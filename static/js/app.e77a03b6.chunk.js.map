{"version":3,"sources":["assets/images/tourist.png","src/context/graphql/index.tsx","src/theme/light.ts","src/theme/dark.ts","src/router/linking.ts","src/components/loaders/overlay/index.tsx","src/components/Icon/index.tsx","src/components/avatar/index.tsx","src/typography/index.ts","src/components/Button/index.tsx","src/components/Modal/index.web.tsx","src/components/Row/Cell.tsx","src/components/Row/index.tsx","src/components/Row/PlaceholderIcon.tsx","src/components/Page/index.tsx","src/components/Popup/index.tsx","src/components/posts/filter/index.tsx","src/components/Row/Header.tsx","src/components/Group/index.tsx","src/components/Input/index.tsx","src/components/Dialog/index.tsx","src/components/Header/index.tsx","src/components/gallery/index.tsx","src/components/gallery/save.ts","src/hooks/graphql.tsx","src/context/home/index.tsx","src/hooks/media.ts","src/components/notification/index.tsx","src/context/notifications/index.tsx","src/hooks/notifications.ts","src/hooks/posts.ts","src/components/rows/post/index.tsx","src/components/add-images/index.tsx","src/components/inputs/feed/index.tsx","src/components/inputs/user/index.tsx","src/components/inputs/name-value/index.tsx","src/components/utils/push-registration.tsx","src/context/profile/index.tsx","src/hooks/profile.ts","src/screens/posts/add/index.tsx","src/screens/posts/feed/index.tsx","src/hooks/feeds.ts","src/screens/profile/index.tsx","src/hooks/users.ts","src/screens/feeds/edit/index.tsx","src/screens/login/login/index.tsx","src/screens/login/accept-invitation/index.tsx","src/screens/comments/index.tsx","src/router/index.tsx","App.tsx","src/App.tsx","src/hooks/colors.ts","src/context/server/index.tsx","src/context/server/push.ts","src/components/Image/index.web.tsx"],"names":["module","exports","GraphQLProvider","children","useContext","ServerContext","token","domain","apolloClient","useMemo","link","createHttpLink","uri","authLink","setContext","_","headers","authorization","ApolloClient","cache","InMemoryCache","concat","ApolloProvider","client","lightTheme","colors","primary","icon","destructive","shade","input","secondary","shadow","background","text","textShade","sizes","corners","icons","margins","small","medium","large","font","baseSize","darkTheme","light","linkingConfig","prefixes","screens","AcceptInvitation","Wrapper","styled","BlurView","Activity","ActivityIndicator","OverlayLoader","intensity","Icon","size","color","name","theme","useTheme","Feather","Touchable","TouchableOpacity","View","Avatar","mediaId","onPress","content","media","aspect","id","BaseText","Text","bold","Jumbo","Title1","Body1","Overline","Link","Touch","getColors","type","bg","fg","StyledLink","Button","title","accessibilityHint","accessibilityRole","accessibilityLabel","accessible","Modal","visible","elm","newElm","document","createElement","style","position","display","flexDirection","left","top","width","height","transition","transform","useEffect","body","appendChild","removeChild","ReactDOM","createPortal","flex","direction","align","Cell","props","others","node","Children","componentOrString","Component","Row","right","overline","description","KeyboardAvoiding","KeyboardAvoidingView","Pressable","Page","loading","useState","keyboardShown","setKeyboardShown","show","Keyboard","addListener","hide","remove","disabled","dismiss","behavior","Platform","OS","Top","Outer","Popup","onClose","insets","useSafeAreaInsets","transparent","animationType","paddingBottom","bottom","PostFilter","selected","feeds","onSelect","setVisible","length","map","feed","isSelected","includes","filter","s","Header","add","Group","items","getKey","render","item","marginLeft","InputField","TextInput","Input","label","value","onChangeText","autoCorrect","secure","keyboardType","autoCapitalize","secureTextEntry","placeholderTextColor","placeholder","Content","Dialog","renderSelect","search","create","allowClear","searchInput","setSeachInput","results","useCallback","select","createItem","a","async","FlatList","data","keyExtractor","renderItem","undefined","back","actions","navigation","useNavigation","paddingTop","goBack","Ionicons","action","ScrollWrapper","ScrollView","ScrollContent","TouchableWithoutFeedback","ScrollPage","DotWrapper","Dot","Pager","current","total","dots","Array","fill","i","Gallery","setWidth","offset","setOffset","saveImage","url","download","FileSystem","Authorization","downloadAsync","result","Error","MediaLibrary","Alert","alert","toString","useSaveImage","currentIndex","Math","round","lightboxVisible","setLightboxVisible","lightboxImages","currentMedia","currentAspect","Lightbox","images","imageIndex","onRequestClose","FooterComponent","dark","horizontal","scrollEventThrottle","snapToInterval","showsHorizontalScrollIndicator","decelerationRate","snapToAlignment","disableIntervalMomentum","onScroll","evt","nativeEvent","contentOffset","x","onLayout","currentWidth","layout","defaultOptions","CreateCommentDocument","gql","FeedDocument","CreateFeedDocument","AddUserToFeedDocument","RemoveUserFromFeedDocument","PostDocument","PostsDocument","CreatePostDocument","RemovePostDocument","ProfileDocument","useProfileQuery","baseOptions","options","Apollo","SetProfileAvatarDocument","RegisterPushNotificationDocument","UsersDocument","HomeContext","createContext","HomeProvider","setFeeds","usePostsQuery","variables","posts","context","Provider","useCreateMedia","ids","file","FormData","append","fetch","method","response","ok","console","error","json","push","Notification","notification","NotificationContext","nextId","NotificationProvider","notifications","setNotifications","c","index","useNotifications","useCreatePost","useCreatePostMutation","createPostMutation","message","createMedia","params","useRemovePost","setLoading","refetch","useFeed","useRemovePostMutation","removePostMutation","removePost","removePostId","fullWidth","PostRow","post","menuVisible","setMenuVisible","creator","avatar","navigate","commentCount","username","Image","Spacer","Item","ImageWrapper","AddImages","files","onUpdate","pickImage","ImagePicker","mediaTypes","All","quality","base64","cancelled","split","filename","match","exec","f","m","source","FeedInput","UserInput","users","NameValueInput","key","PushRegistation","pushToken","useRegisterPushNotificationMutation","registerPushMutation","ProfileContext","ProfileProvider","profile","useSetAvatar","useSetProfileAvatarMutation","setAvatarMutation","useProfile","AddPostScreen","refetchPosts","profileLoading","selectedFeed","setSelectedFeed","setMedia","setBody","createPost","adminFeeds","accessType","submit","useFocusEffect","Seperator","FeedScreen","selectedFeeds","setSelectedFeeds","userFeeds","columns","ceil","Dimensions","get","numColumns","ItemSeparatorComponent","refreshControl","RefreshControl","refreshing","onRefresh","useFeedQuery","feedId","log","useCreateFeed","useCreateFeedMutation","createFeedMutation","useAddUserToFeed","useAddUserToFeedMutation","addUserToFeedMutation","userId","useRemoveUserFromFeed","useRemoveUserFromFeedMutation","removeUserFromFeedMutation","ProfileScreen","logout","createFeed","addFeedVisible","setAddFeedVisible","feedName","setFeedName","setAvatar","saveAddFeed","admin","useUsers","useUsersQuery","accessTypes","FeedEditScreen","route","removeUserFromFeed","addUserToFeed","addUserVisible","setAddUserVisible","addUserSelected","setAddUserSelected","addUserAccessType","setAddUserAccessType","addUser","removeUser","relation","user","LoginScreen","login","setError","setDomain","setUsername","password","setPassword","doLogin","catch","err","image","AcceptInvitationScreen","inviteCode","acceptInvitation","doAccept","CommentsScreen","setContent","useCreateCommentMutation","createCommentMutation","usePostQuery","postId","createComment","inverted","comments","reverse","RootStack","createNativeStackNavigator","TabStack","createBottomTabNavigator","ProfileStack","Profile","Navigator","screenOptions","headerShown","Screen","component","Tabs","canCreate","find","tabBarActiveTintColor","tabBarIcon","focused","Root","contentStyle","backgroundColor","presentation","initialParams","Router","colorScheme","baseTheme","DarkTheme","DefaultTheme","navigationTheme","card","NavigationContainer","linking","getSizeWithHeaders","success","failed","App","_useColorScheme","StatusBar","ServerProvider","setPushToken","ready","setReady","AsyncStorage","removeItem","Device","Notifications","existingStatus","status","finalStatus","importance","MAX","vibrationPattern","lightColor","registerForPushNotificationsAsync","then","secret","authUrl","Accept","JSON","stringify","query","errors","createAuthToken","setItem","invitation","rawInvite","Buffer","from","parse","creationToken","getItem","nextContext","run","setUrl","arrayBuffer","binaryData","contentType"],"mappings":"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","file":"static/js/app.e77a03b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tourist.e3fa36f8.png\";","import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport React, { useContext, useMemo } from 'react';\nimport { ServerContext } from '../server';\n\nconst GraphQLProvider: React.FC = ({ children }) => {\n  const { token, domain } = useContext(ServerContext);\n  const apolloClient = useMemo(() => {\n    const link = createHttpLink({\n      uri: `${domain}/graphql`,\n    });\n    const authLink = setContext((_, { headers }) => {\n      return {\n        headers: {\n          ...headers,\n          authorization: `bearer ${token}`,\n        },\n      };\n    });\n    return new ApolloClient({\n      cache: new InMemoryCache(),\n      link: authLink.concat(link),\n    });\n  }, [token, domain]);\n\n  return <ApolloProvider client={apolloClient}>{children}</ApolloProvider>;\n};\n\nexport { GraphQLProvider };\n","import Theme from './Theme';\n\nconst lightTheme: Theme = {\n  colors: {\n    primary: '#1abc9c',\n    icon: '#1abc9c',\n    destructive: '#e74c3c',\n    shade: '#ededed',\n    input: '#ddd',\n    secondary: 'blue',\n    shadow: '#000',\n    background: '#fff',\n    text: '#000',\n    textShade: '#999',\n  },\n  sizes: {\n    corners: 5,\n    icons: 24,\n  },\n  margins: {\n    small: 8,\n    medium: 16,\n    large: 24,\n  },\n  font: {\n    baseSize: 14,\n  },\n};\n\nexport default lightTheme;\n","import Theme from './Theme';\nimport light from './light';\n\nconst darkTheme: Theme = {\n  ...light,\n  colors: {\n    ...light.colors,\n    primary: '#e67e22',\n    input: '#333',\n    icon: '#e67e22',\n    background: '#151515',\n    shadow: '#000',\n    secondary: 'blue',\n    shade: '#000',\n    text: '#fff',\n    textShade: '#666',\n  },\n};\n\nexport default darkTheme;\n","export const linkingConfig = {\n  prefixes: ['pictoroma://'],\n  screens: {\n    AcceptInvitation: 'login/accept-invite',\n  },\n};\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { BlurView } from 'expo-blur';\n\nconst Wrapper = styled(BlurView)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 100;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Activity = styled.ActivityIndicator`\n  \n`\n\n\nconst OverlayLoader: React.FC<{}> = () => (\n  <Wrapper intensity={20}>\n    <Activity /> \n  </Wrapper>\n);\n\nexport { OverlayLoader };\n","import React from 'react';\nimport { Feather } from '@expo/vector-icons';\nimport { useTheme } from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ntype Props = {\n  size?: number;\n  color?: keyof Theme['colors'];\n  name: keyof typeof Feather.glyphMap;\n};\n\nfunction Icon({ size, color, name }: Props) {\n  const theme = useTheme();\n  return (\n    <Feather\n      name={name}\n      color={color ? theme.colors[color] : theme.colors.icon}\n      size={size ?? theme.sizes.icons}\n    />\n  );\n}\n\nexport { Icon };\n","import styled from 'styled-components/native';\nimport { Icon } from '../Icon';\nimport { Image } from '../Image';\n\ntype Props = {\n  mediaId?: string;\n  onPress?: () => void;\n};\n\nconst Touchable = styled.TouchableOpacity``;\nconst Wrapper = styled.View`\n  position: relative;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Avatar: React.FC<Props> = ({ mediaId, onPress }) => {\n  const content = (\n    <Wrapper>\n      {mediaId ? (\n        <Image media={{ aspect: 1, id: mediaId }} />\n      ) : (\n        <Icon name=\"user\" />\n      )}\n    </Wrapper>\n  );\n\n  if (onPress) {\n    return <Touchable onPress={onPress}>{content}</Touchable>;\n  }\n  return content;\n};\n\nexport { Avatar };\n","import styled from 'styled-components/native';\nimport Theme from '#/theme/Theme';\n\ninterface TextProps {\n  color?: keyof Theme['colors'];\n  bold?: boolean;\n  theme: Theme;\n}\n\nconst BaseText = styled.Text<TextProps>`\n  color: ${({ color, theme }) =>\n    color ? theme.colors[color] : theme.colors.text};\n  font-weight: ${({ bold }) => (bold ? 'bold' : 'normal')};\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n`;\n\nconst Jumbo = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 2.8}px;\n  font-weight: bold;\n`;\n\nconst Title2 = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 1.3}px;\n  font-weight: bold;\n`;\n\nconst Title1 = styled(BaseText)`\n  font-weight: bold;\n`;\n\nconst Body1 = styled(BaseText)``;\n\nconst Overline = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.6}px;\n  text-transform: uppercase;\n`;\n\nconst Caption = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.8}px;\n`;\n\nconst Link = styled(BaseText)`\n  text-transform: uppercase;\n`;\n\nexport type { TextProps };\nexport { Jumbo, Title2, Title1, Body1, Overline, Caption, Link };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native';\nimport { Theme } from '#/theme';\nimport { Link } from '#/typography';\n\ninterface Props {\n  title: string;\n  onPress?: () => any;\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  type?: 'primary' | 'secondary' | 'destructive';\n}\n\nconst Touch = styled.TouchableOpacity``;\n\nconst getColors = (type: Props['type'], theme: Theme) => {\n  if (type === 'secondary') {\n    return { bg: theme.colors.secondary, fg: '#fff' };\n  }\n  if (type === 'destructive') {\n    return { bg: 'transparent', fg: theme.colors.destructive };\n  }\n  return { bg: theme.colors.primary, fg: '#fff' };\n};\n\nconst Wrapper = styled.View<{\n  theme: Theme;\n  type: Props['type'];\n}>`\n  background: ${({ theme, type }) => getColors(type, theme).bg};\n  padding: ${({ theme }) => theme.margins.small}px;\n  border-radius: ${({ theme }) => theme.sizes.corners}px;\n  align-items: center;\n`;\n\nconst StyledLink = styled<{\n  theme: Theme;\n  type: Props['type'];\n}>(Link)`\n  color: ${({ theme, type }) => getColors(type, theme).fg};\n  font-weight: bold;\n`;\n\nconst Button: React.FC<Props> = ({\n  title,\n  onPress,\n  accessibilityHint,\n  accessibilityRole,\n  accessibilityLabel,\n  type,\n}) => (\n  <Touch\n    onPress={onPress}\n    accessible\n    accessibilityHint={accessibilityHint}\n    accessibilityRole={accessibilityRole}\n    accessibilityLabel={accessibilityLabel}\n  >\n    <Wrapper type={type}>\n      <StyledLink type={type}>{title}</StyledLink>\n    </Wrapper>\n  </Touch>\n);\n\nexport { Button };\n","import ReactDOM from 'react-dom';\nimport React, { useMemo, useEffect, ReactNode } from 'react';\n\ninterface Props {\n  visible: boolean;\n  children: ReactNode;\n}\n\nconst Modal: React.FC<Props> = ({ visible, children }) => {\n  const elm = useMemo(() => {\n    const newElm = document.createElement('div');\n    newElm.style.position = 'fixed';\n    newElm.style.display = 'flex';\n    newElm.style.flexDirection = 'column';\n    newElm.style.left = '0px';\n    newElm.style.top = '0px';\n    newElm.style.width = '100%';\n    newElm.style.height = '100%';\n    newElm.style.transition = 'transform 0.3s';\n    newElm.style.transform = 'translateY(100%)';\n    return newElm;\n  }, []);\n  useEffect(() => {\n    document.body.appendChild(elm);\n    return () => {\n      document.body.removeChild(elm);\n    };\n  }, [elm]);\n  useEffect(() => {\n    if (visible) {\n      elm.style.transform = 'translateY(0)';\n    } else {\n      elm.style.transform = 'translateY(100%)';\n    }\n  }, [elm, visible]);\n\n  return ReactDOM.createPortal(<>{children}</>, elm);\n};\n\nexport { Modal };\n","import React, { ReactNode } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ninterface Props {\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  children?: ReactNode;\n  onPress?: () => any;\n  background?: string;\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}\n\nconst Wrapper = styled.View<{\n  background?: string;\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  theme: Theme;\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}>`\n  padding: ${({ theme }) => theme.margins.medium / 2}px\n    ${({ theme }) => theme.margins.medium / 2}px;\n  ${({ background }) => (background ? `background: ${background};` : '')}\n  ${({ flex }) => (flex ? `flex: ${flex};` : '')}\n  flex-direction: ${({ direction }) => (direction ? direction : 'row')};\n  align-items: ${({ align }) => (align ? align : 'center')};\n`;\n\nconst Touch = styled.TouchableOpacity``;\n\nconst Cell: React.FC<Props> = ({ children, onPress, ...props }) => {\n  const {\n    accessibilityLabel,\n    accessibilityRole,\n    accessibilityHint,\n    ...others\n  } = props;\n  const node = <Wrapper {...others}>{children}</Wrapper>;\n  if (onPress) {\n    return (\n      <Touch\n        accessible\n        accessibilityRole={accessibilityRole || 'button'}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        onPress={onPress}\n      >\n        {node}\n      </Touch>\n    );\n  }\n  return node;\n};\n\nexport { Cell };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { Title1, Body1, Overline } from '#/typography';\nimport { Cell } from './Cell';\nimport { PlaceholderIcon } from './PlaceholderIcon';\n\ninterface Props {\n  background?: string;\n  top?: ReactNode;\n  left?: ReactNode;\n  right?: ReactNode;\n  title?: ReactNode;\n  overline?: ReactNode;\n  description?: ReactNode;\n  children?: ReactNode;\n  onPress?: () => any;\n}\n\nconst Children = styled.View``;\n\nconst componentOrString = (\n  input: ReactNode,\n  Component: React.FC<{ children: ReactNode }>\n) => {\n  if (!input) {\n    return null;\n  }\n  if (typeof input === 'string') {\n    return <Component>{input}</Component>;\n  }\n  return input;\n};\n\nconst Row: React.FC<Props> = ({\n  background,\n  top,\n  left,\n  right,\n  title,\n  overline,\n  description,\n  children,\n  onPress,\n}) => (\n  <Cell background={background} onPress={onPress}>\n    {left}\n    <Cell flex={1} direction=\"column\" align=\"stretch\">\n      {!!top}\n      {componentOrString(overline, Overline)}\n      {componentOrString(title, Title1)}\n      {componentOrString(description, Body1)}\n      {!!children && <Children>{children}</Children>}\n    </Cell>\n    {right}\n  </Cell>\n);\n\nexport { Row, Cell, PlaceholderIcon };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { Cell } from './Cell';\n\ninterface Props {\n  color?: string;\n  size?: number;\n  onPress?: () => void;\n}\n\nconst Icon = styled.View<{ size: number; color: string }>`\n  background: ${({ color }) => color};\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  border-radius: ${({ size }) => size / 4}px;\n`;\n\nconst PlaceholderIcon: React.FC<Props> = ({\n  color = 'red',\n  size = 24,\n  onPress,\n}) => (\n  <Cell onPress={onPress}>\n    <Icon color={color} size={size} />\n  </Cell>\n);\n\nexport { PlaceholderIcon };\n","import React, { useState, useEffect, ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { Keyboard, Platform } from 'react-native';\nimport { OverlayLoader } from '../loaders';\n\nconst KeyboardAvoiding = styled.KeyboardAvoidingView`\n  flex: 1;\n`;\n\nconst Pressable = styled.Pressable`\n  flex: 1;\n`;\n\ntype Props = {\n  children: ReactNode;\n  loading?: boolean;\n}\n\nconst Page: React.FC<Props> = ({ children, loading }) => {\n  const [keyboardShown, setKeyboardShown] = useState(false);\n  useEffect(() => {\n    const keyboardDidShow = () => setKeyboardShown(true);\n    const keyboardDidHide = () => setKeyboardShown(false);\n    const show = Keyboard.addListener('keyboardDidShow', keyboardDidShow);\n    const hide = Keyboard.addListener('keyboardDidHide', keyboardDidHide);\n\n    return () => {\n      show.remove();\n      hide.remove();\n    };\n  }, []);\n  return (\n    <Pressable disabled={!keyboardShown} onPress={() => Keyboard.dismiss()}>\n      <KeyboardAvoiding behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        {loading && <OverlayLoader />}\n        {children}\n      </KeyboardAvoiding>\n    </Pressable>\n  );\n};\n\nexport { Page };\n","import React, { ReactNode } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\nimport { Icon } from '#/components/Icon';\nimport { Modal } from '#/components/Modal';\nimport { Row, Cell } from '#/components/Row';\nimport { Page } from '#/components/Page';\n\ninterface Props {\n  visible: boolean;\n  onClose?: () => void;\n  children: ReactNode;\n}\n\nconst Top = styled.Pressable`\n  flex: 1;\n`;\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.background};\n  width: 100%;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-offset: 0 0;\n  shadow-opacity: 1;\n  shadow-radius: 200px;\n  border-radius: 12px;\n  margin-bottom: -12px;\n`;\n\nconst Outer = styled.View`\n  flex: 1;\n`;\n\nconst Popup: React.FC<Props> = ({ visible, children, onClose }) => {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Modal visible={visible} transparent animationType=\"slide\">\n      <Page>\n        <Outer>\n          <Top onPress={onClose} />\n          <Wrapper style={{ paddingBottom: insets.bottom + 12 }}>\n            <Row\n              right={\n                <Cell onPress={onClose}>\n                  <Icon name=\"x-circle\" />\n                </Cell>\n              }\n            />\n            {children}\n          </Wrapper>\n        </Outer>\n      </Page>\n    </Modal>\n  );\n};\n\nexport { Popup };\n","import React, { useState } from 'react';\nimport { Button } from '#/components/Button';\nimport { Icon } from '#/components/Icon';\nimport { Popup } from '#/components/Popup';\nimport { Cell, Row } from '#/components/Row';\n\ninterface PostFilterProps {\n  selected?: string[];\n  feeds?: {\n    id: string;\n    name: string;\n  }[];\n  onSelect: (ids: string[]) => void;\n}\nconst PostFilter: React.FC<PostFilterProps> = ({\n  selected = [],\n  feeds = [],\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Cell onPress={() => setVisible(true)}>\n        <Icon name=\"filter\" color={selected.length > 0 ? 'primary' : 'text'} />\n      </Cell>\n      <Popup visible={visible} onClose={() => setVisible(false)}>\n        {feeds.map(feed => {\n          const isSelected = selected.includes(feed.id);\n          return (\n            <Row\n              key={feed.id}\n              onPress={\n                isSelected\n                  ? () => onSelect(selected.filter(s => s !== feed.id))\n                  : () => onSelect([...selected, feed.id])\n              }\n              left={\n                <Cell>\n                  <Icon name={isSelected ? 'check-circle' : 'circle'} />\n                </Cell>\n              }\n              title={feed.name}\n            />\n          );\n        })}\n        {selected.length > 0 && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => onSelect([])} />\n          </Row>\n        )}\n      </Popup>\n    </>\n  );\n};\n\nexport { PostFilter };\n","import React, { ReactNode } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Row, Cell } from './index';\n\ninterface Props {\n  title: string;\n  add?: () => void;\n  onPress?: () => void;\n  left?: ReactNode;\n}\n\nfunction Header({ title, add, onPress, left }: Props) {\n  return (\n    <Row\n      onPress={onPress}\n      left={left}\n      title={title}\n      right={\n        add && (\n          <Cell onPress={add}>\n            <Icon name=\"plus-circle\" size={18} />\n          </Cell>\n        )\n      }\n    />\n  );\n}\n\nexport { Header };\n","import React, { Fragment, ReactNode, useState } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Header } from '#/components/Row/Header';\nimport styled from 'styled-components/native';\nimport { Row, Cell } from '#/components/Row';\nimport { Body1 } from '#/typography';\n\ninterface ListProps<T> {\n  title: string;\n  items: T[];\n  getKey: (item: T) => any;\n  render: (item: T) => ReactNode;\n  add?: () => void;\n}\n\ninterface ChildProps {\n  title: string;\n  add?: () => void;\n  children?: ReactNode;\n}\n\nconst Wrapper = styled.View`\n  border-radius: 7px;\n  background: ${({ theme }) => theme.colors.background};\n  shadow-offset: 0px;\n  shadow-opacity: 0.1;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-radius: 5px;\n`;\n\nfunction Group<T = any>(props: ListProps<T> | ChildProps) {\n  const [visible, setVisible] = useState(true);\n  const { title, items, getKey, render, add, children } =\n    props as ListProps<T> & ChildProps;\n  return (\n    <Row>\n      <Wrapper>\n        <Header\n          left={\n            <Icon name={visible ? 'chevron-down' : 'chevron-up'} size={18} />\n          }\n          title={title}\n          add={add}\n          onPress={() => setVisible(!visible)}\n        />\n        {visible &&\n          items &&\n          items.map(item => (\n            <Fragment key={getKey(item)}>{render(item)}</Fragment>\n          ))}\n        {visible && children}\n        {visible && !children && (!items || items.length === 0) && (\n          <Row\n            left={\n              <Cell>\n                <Icon color=\"textShade\" name=\"maximize\" />\n              </Cell>\n            }\n          >\n            <Body1 style={{ marginLeft: 10 }} color=\"textShade\">\n              Empty\n            </Body1>\n          </Row>\n        )}\n      </Wrapper>\n    </Row>\n  );\n}\n\nexport { Group };\n","import React from 'react';\nimport { KeyboardType } from 'react-native';\nimport styled, { useTheme } from 'styled-components/native';\n\ninterface Props {\n  label: string;\n  value: string;\n  onChangeText?: (text: string) => any;\n  type?: KeyboardType;\n  autoCorrect?: boolean;\n  secure?: boolean;\n}\n\nconst InputField = styled.TextInput`\n  color: ${({ theme }) => theme.colors.text};\n  padding: ${({ theme }) => theme.margins.small}px 0;\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n  width: 100%;\n`;\n\nconst Input: React.FC<Props> = ({\n  label,\n  value,\n  onChangeText,\n  type,\n  autoCorrect,\n  secure,\n}) => {\n  const theme = useTheme();\n  return (\n    <InputField\n      value={value}\n      keyboardType={type}\n      autoCapitalize={'none'}\n      autoCorrect={autoCorrect}\n      secureTextEntry={secure}\n      placeholderTextColor={theme.colors.textShade}\n      placeholder={label}\n      onChangeText={onChangeText}\n    />\n  );\n};\n\nexport { Input };\n","import React, { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { Popup } from '#/components/Popup';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Row } from '#/components/Row';\nimport { Button } from '#/components/Button';\n\ninterface Props<T> {\n  visible: boolean;\n  onClose: () => void;\n  selected?: T;\n  allowClear?: boolean;\n  items: T[];\n  onSelect: (item?: T) => void;\n  renderSelect: (item: T) => ReactNode;\n  getKey: (item: T) => any;\n  search?: (term: string, items: T[]) => T[];\n  create?: (term: string) => Promise<T>;\n}\n\nconst Touch = styled.TouchableOpacity``;\nconst Content = styled.View`\n  min-height: 40%;\n`;\n\nfunction Dialog<T>({\n  visible,\n  onClose,\n  items,\n  onSelect,\n  renderSelect,\n  getKey,\n  search,\n  create,\n  allowClear,\n}: Props<T>) {\n  const [searchInput, setSeachInput] = useState('');\n  const results = useMemo(() => {\n    if (!search || !searchInput) {\n      return items;\n    }\n    return search(searchInput, items);\n  }, [items, searchInput, search]);\n  const hide = useCallback(() => {\n    setSeachInput('');\n    onClose();\n  }, [setSeachInput, onClose]);\n\n  const select = useCallback(\n    (item: T) => {\n      onSelect(item);\n      hide();\n    },\n    [onSelect, hide]\n  );\n  const createItem = useCallback(async () => {\n    if (!create) {\n      return;\n    }\n    const item = await create(searchInput);\n    onSelect(item);\n    hide();\n  }, [create, searchInput, hide]);\n  return (\n    <Popup visible={visible} onClose={hide}>\n      {search && (\n        <Row>\n          <Input\n            label=\"Search\"\n            value={searchInput}\n            onChangeText={setSeachInput}\n          />\n        </Row>\n      )}\n      <Content>\n        {create && results.length === 0 && searchInput && (\n          <Row>\n            <Button title={`Create ${searchInput}`} onPress={createItem} />\n          </Row>\n        )}\n        {results.length > 0 && (\n          <FlatList\n            data={results}\n            keyExtractor={getKey}\n            style={{ flex: 1 }}\n            renderItem={({ item }) => (\n              <Touch onPress={() => select(item)}>{renderSelect(item)}</Touch>\n            )}\n          />\n        )}\n        {allowClear && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => select(undefined)} />\n          </Row>\n        )}\n      </Content>\n    </Popup>\n  );\n}\n\nexport { Dialog };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Row, Cell } from '#/components/Row';\nimport { Button } from '#/components/Button';\nimport { Jumbo } from '#/typography';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\ninterface Props {\n  title: string;\n  back?: boolean;\n  actions?: {\n    title: string;\n    onPress?: () => any;\n  }[];\n  right?: ReactNode;\n}\n\nconst Wrapper = styled.View``;\n\nconst Header: React.FC<Props> = ({ title, back, actions, right }) => {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Wrapper style={{ paddingTop: insets.top }}>\n      <Row\n        left={\n          !!back && (\n            <Cell onPress={() => navigation.goBack()}>\n              <Ionicons name=\"arrow-back-circle\" size={26} />\n            </Cell>\n          )\n        }\n        right={\n          (actions || right) && (\n            <>\n              {actions &&\n                actions.map(action => (\n                  <Button\n                    key={action.title}\n                    title={action.title}\n                    onPress={action.onPress}\n                  />\n                ))}\n              {right}\n            </>\n          )\n        }\n      >\n        <Jumbo>{title}</Jumbo>\n      </Row>\n    </Wrapper>\n  );\n};\n\nexport { Header };\n","import styled, { ThemeProvider } from 'styled-components/native';\nimport ImageView from 'react-native-image-viewing';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\nimport { Image } from '../Image';\nimport { Cell, Row } from '../Row';\nimport { useContext, useMemo, useState } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Icon } from '../Icon';\nimport { dark } from '#/theme';\nimport { useSaveImage } from './save';\n\nconst ScrollWrapper = styled.ScrollView<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\n\nconst ScrollContent = styled.View`\n  flex-direction: row;\n`;\n\nconst Touchable = styled.TouchableWithoutFeedback``;\n\nconst ScrollPage = styled.View<{\n  width: number;\n}>`\n  width: ${({ width }) => width}px;\n`;\n\nconst Wrapper = styled.View`\n  border-radius: 5px;\n  overflow: hidden;\n`;\n\ntype PagerProps = {\n  current: number;\n  total: number;\n};\n\nconst DotWrapper = styled.View`\n  margin-top: 10px;\n  flex-direction: row;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Dot = styled.View<{\n  selected: boolean;\n}>`\n  width: 6px;\n  height: 6px;\n  background: ${({ selected, theme }) => (selected ? theme.colors.primary : '#ccc')};\n  margin: 0 5px;\n  border-radius: 3px;\n`;\n\nconst Pager: React.FC<PagerProps> = ({ current, total }) => {\n  const dots = useMemo(\n    () => new Array(total).fill(undefined).map((_, i) => i),\n    [total]\n  );\n\n  return (\n    <DotWrapper>\n      {dots.map(i => (\n        <Dot key={i} selected={i === current} />\n      ))}\n    </DotWrapper>\n  );\n};\n\ntype GalleryProps = {\n  media: DeepPartial<MediaModel[]>;\n};\n\nconst Gallery: React.FC<GalleryProps> = ({ media }) => {\n  const [width, setWidth] = useState(0);\n  const [offset, setOffset] = useState(0);\n  const saveImage = useSaveImage();\n  const { domain, token } = useContext(ServerContext);\n  const currentIndex = useMemo(\n    () => Math.round(offset / width) || 0,\n    [offset, width]\n  );\n  const [lightboxVisible, setLightboxVisible] = useState(false);\n  const lightboxImages = useMemo(\n    () =>\n      media.map(item => ({\n        uri: `${domain}/api/media/${item?.id}`,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })),\n    [domain, token, media]\n  );\n  const currentMedia = useMemo(\n    () => media[currentIndex],\n    [media, currentIndex]\n  );\n  const currentAspect = useMemo(\n    () => currentMedia?.aspect || 1, // use current media aspect\n    [currentMedia]\n  );\n\n  if (media.length === 0) {\n    return <></>;\n  }\n  const Lightbox = () => (\n    <ImageView\n      images={lightboxImages}\n      imageIndex={currentIndex}\n      visible={lightboxVisible}\n      onRequestClose={() => setLightboxVisible(false)}\n      FooterComponent={() => (\n        <ThemeProvider theme={dark}>\n          <Row\n            right={\n              <Cell onPress={() => saveImage(lightboxImages[currentIndex].uri)}>\n                <Icon name=\"download\" />\n              </Cell>\n            }\n          />\n          <Row />\n        </ThemeProvider>\n      )}\n    />\n  );\n  if (media.length === 1) {\n    return (\n      <Row>\n        <Lightbox />\n        <Touchable onPress={() => setLightboxVisible(true)}>\n          <Wrapper>\n            <Image media={media[0]!} />\n          </Wrapper>\n        </Touchable>\n      </Row>\n    );\n  }\n\n  return (\n    <Row>\n      <Lightbox />\n      <Wrapper>\n        <ScrollWrapper\n          horizontal\n          scrollEventThrottle={16}\n          snapToInterval={width}\n          showsHorizontalScrollIndicator={false}\n          decelerationRate={0}\n          snapToAlignment=\"center\"\n          disableIntervalMomentum\n          height={width / currentAspect}\n          onScroll={evt => {\n            const offset = evt.nativeEvent.contentOffset.x;\n            setOffset(offset);\n          }}\n          onLayout={evt => {\n            const currentWidth = evt.nativeEvent.layout.width;\n            if (currentWidth !== width) {\n              setWidth(currentWidth);\n            }\n          }}\n        >\n          <Touchable onPress={() => setLightboxVisible(true)}>\n            <ScrollContent>\n              {media.map(item => (\n                <ScrollPage key={item!.id} width={width}>\n                  <Image media={item!} />\n                </ScrollPage>\n              ))}\n            </ScrollContent>\n          </Touchable>\n        </ScrollWrapper>\n      </Wrapper>\n      <Pager current={currentIndex} total={media.length} />\n    </Row>\n  );\n};\n\nexport { Gallery };\n","import * as MediaLibrary from 'expo-media-library';\nimport * as FileSystem from 'expo-file-system';\nimport { useCallback, useContext } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Alert } from 'react-native';\n\nexport const useSaveImage = () => {\n  const { token } = useContext(ServerContext);\n  const saveImage = useCallback(\n    async (url: string) => {\n      try {\n        const download = FileSystem.createDownloadResumable(\n          url,\n          FileSystem.cacheDirectory + 'download.jpeg',\n          { headers: { Authorization: `bearer: ${token}`}},\n        );\n        const result = await download.downloadAsync();\n        if (!result) {\n          throw new Error('failed');\n        }\n        MediaLibrary.saveToLibraryAsync(result.uri);\n        Alert.alert('Image saved');\n      } catch (err) {\n        Alert.alert(`Failed: ${err.toString()}`)\n      }\n    },\n    [token]\n  );\n\n  return saveImage;\n};\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type CommentCreateParameters = {\n  content?: InputMaybe<Scalars['String']>;\n  post: Scalars['String'];\n};\n\nexport type CommentModel = {\n  __typename?: 'CommentModel';\n  content: Scalars['String'];\n  created: Scalars['DateTime'];\n  creator: UserModel;\n  id: Scalars['String'];\n  post: PostModel;\n};\n\nexport type FeedModel = {\n  __typename?: 'FeedModel';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  posts: Array<PostModel>;\n  users: Array<UserFeedRelationModel>;\n};\n\n\nexport type FeedModelPostsArgs = {\n  filter?: InputMaybe<PostFindParameters>;\n};\n\nexport type MediaModel = {\n  __typename?: 'MediaModel';\n  aspect?: Maybe<Scalars['Float']>;\n  contentType?: Maybe<Scalars['String']>;\n  created?: Maybe<Scalars['DateTime']>;\n  creator: UserModel;\n  filename?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  lowres?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Float']>;\n  size: Scalars['Float'];\n  type?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addUserToFeed: UserFeedRelationModel;\n  createAuthToken: Scalars['String'];\n  createComment: CommentModel;\n  createFeed: FeedModel;\n  createPost: PostModel;\n  inviteProfile: UserModel;\n  registerPushNotification: PushRegistrationModel;\n  removePost: Scalars['Boolean'];\n  removeUserFromFeed: Scalars['Boolean'];\n  setProfileAvatar: UserModel;\n};\n\n\nexport type MutationAddUserToFeedArgs = {\n  accessType: Scalars['String'];\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationCreateAuthTokenArgs = {\n  secret: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationCreateCommentArgs = {\n  params: CommentCreateParameters;\n};\n\n\nexport type MutationCreateFeedArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  params: PostCreateParameters;\n};\n\n\nexport type MutationInviteProfileArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterPushNotificationArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type MutationRemovePostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationRemoveUserFromFeedArgs = {\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationSetProfileAvatarArgs = {\n  mediaId?: InputMaybe<Scalars['String']>;\n};\n\nexport type PostCreateParameters = {\n  body?: InputMaybe<Scalars['String']>;\n  feed: Scalars['String'];\n  media: Array<Scalars['String']>;\n};\n\nexport type PostFindParameters = {\n  after?: InputMaybe<Scalars['DateTime']>;\n  feeds?: InputMaybe<Array<Scalars['String']>>;\n  limit?: InputMaybe<Scalars['Float']>;\n  offset?: InputMaybe<Scalars['Float']>;\n};\n\nexport type PostModel = {\n  __typename?: 'PostModel';\n  body?: Maybe<Scalars['String']>;\n  commentCount: Scalars['Float'];\n  comments: Array<CommentModel>;\n  created: Scalars['DateTime'];\n  creator?: Maybe<UserModel>;\n  feed: FeedModel;\n  id: Scalars['String'];\n  media: Array<MediaModel>;\n};\n\nexport type PushRegistrationModel = {\n  __typename?: 'PushRegistrationModel';\n  device?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  feed: FeedModel;\n  feeds: Array<FeedModel>;\n  post: PostModel;\n  posts: Array<PostModel>;\n  profile?: Maybe<UserModel>;\n  users: Array<UserModel>;\n};\n\n\nexport type QueryFeedArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostsArgs = {\n  filter: PostFindParameters;\n};\n\nexport type UserFeedRelationModel = {\n  __typename?: 'UserFeedRelationModel';\n  accessType: Scalars['String'];\n  feed: FeedModel;\n  user: UserModel;\n};\n\nexport type UserModel = {\n  __typename?: 'UserModel';\n  admin: Scalars['Boolean'];\n  avatar?: Maybe<Scalars['String']>;\n  feeds: Array<UserFeedRelationModel>;\n  id: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  username: Scalars['String'];\n};\n\nexport type CreateCommentMutationVariables = Exact<{\n  params: CommentCreateParameters;\n}>;\n\n\nexport type CreateCommentMutation = { __typename?: 'Mutation', createComment: { __typename?: 'CommentModel', id: string } };\n\nexport type FeedsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FeedsQuery = { __typename?: 'Query', feeds: Array<{ __typename?: 'FeedModel', id: string, name: string, posts: Array<{ __typename?: 'PostModel', id: string, body?: string | null, media: Array<{ __typename?: 'MediaModel', id: string }> }> }> };\n\nexport type FeedQueryVariables = Exact<{\n  feedId: Scalars['String'];\n}>;\n\n\nexport type FeedQuery = { __typename?: 'Query', feed: { __typename?: 'FeedModel', id: string, name: string, users: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, user: { __typename?: 'UserModel', id: string, name?: string | null, username: string } }> } };\n\nexport type CreateFeedMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateFeedMutation = { __typename?: 'Mutation', createFeed: { __typename?: 'FeedModel', id: string } };\n\nexport type AddUserToFeedMutationVariables = Exact<{\n  accessType: Scalars['String'];\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\n\nexport type AddUserToFeedMutation = { __typename?: 'Mutation', addUserToFeed: { __typename?: 'UserFeedRelationModel', accessType: string } };\n\nexport type RemoveUserFromFeedMutationVariables = Exact<{\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\n\nexport type RemoveUserFromFeedMutation = { __typename?: 'Mutation', removeUserFromFeed: boolean };\n\nexport type PostQueryVariables = Exact<{\n  postId: Scalars['String'];\n}>;\n\n\nexport type PostQuery = { __typename?: 'Query', post: { __typename?: 'PostModel', id: string, created: any, creator?: { __typename?: 'UserModel', id: string, name?: string | null, avatar?: string | null, username: string } | null, comments: Array<{ __typename?: 'CommentModel', id: string, content: string, created: any, creator: { __typename?: 'UserModel', username: string, name?: string | null, id: string, avatar?: string | null } }>, media: Array<{ __typename?: 'MediaModel', id: string, contentType?: string | null, lowres?: string | null, aspect?: number | null, order?: number | null, created?: any | null, type?: string | null }> } };\n\nexport type PostsQueryVariables = Exact<{\n  filter: PostFindParameters;\n}>;\n\n\nexport type PostsQuery = { __typename?: 'Query', posts: Array<{ __typename?: 'PostModel', id: string, body?: string | null, commentCount: number, created: any, creator?: { __typename?: 'UserModel', name?: string | null, username: string, avatar?: string | null } | null, media: Array<{ __typename?: 'MediaModel', id: string, aspect?: number | null, type?: string | null }> }> };\n\nexport type CreatePostMutationVariables = Exact<{\n  params: PostCreateParameters;\n}>;\n\n\nexport type CreatePostMutation = { __typename?: 'Mutation', createPost: { __typename?: 'PostModel', id: string } };\n\nexport type RemovePostMutationVariables = Exact<{\n  removePostId: Scalars['String'];\n}>;\n\n\nexport type RemovePostMutation = { __typename?: 'Mutation', removePost: boolean };\n\nexport type ProfileQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProfileQuery = { __typename?: 'Query', profile?: { __typename?: 'UserModel', id: string, username: string, name?: string | null, admin: boolean, avatar?: string | null, feeds: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, feed: { __typename?: 'FeedModel', id: string, name: string } }> } | null };\n\nexport type SetProfileAvatarMutationVariables = Exact<{\n  mediaId?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type SetProfileAvatarMutation = { __typename?: 'Mutation', setProfileAvatar: { __typename?: 'UserModel', id: string } };\n\nexport type RegisterPushNotificationMutationVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type RegisterPushNotificationMutation = { __typename?: 'Mutation', registerPushNotification: { __typename?: 'PushRegistrationModel', id: string } };\n\nexport type UsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'UserModel', id: string, name?: string | null, username: string, avatar?: string | null }> };\n\n\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($params: CommentCreateParameters!) {\n  createComment(params: $params) {\n    id\n  }\n}\n    `;\nexport type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, options);\n      }\nexport type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;\nexport type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;\nexport const FeedsDocument = gql`\n    query Feeds {\n  feeds {\n    id\n    name\n    posts {\n      id\n      body\n      media {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedsQuery__\n *\n * To run a query within a React component, call `useFeedsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFeedsQuery(baseOptions?: Apollo.QueryHookOptions<FeedsQuery, FeedsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FeedsQuery, FeedsQueryVariables>(FeedsDocument, options);\n      }\nexport function useFeedsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedsQuery, FeedsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FeedsQuery, FeedsQueryVariables>(FeedsDocument, options);\n        }\nexport type FeedsQueryHookResult = ReturnType<typeof useFeedsQuery>;\nexport type FeedsLazyQueryHookResult = ReturnType<typeof useFeedsLazyQuery>;\nexport type FeedsQueryResult = Apollo.QueryResult<FeedsQuery, FeedsQueryVariables>;\nexport const FeedDocument = gql`\n    query Feed($feedId: String!) {\n  feed(id: $feedId) {\n    id\n    name\n    users {\n      accessType\n      user {\n        id\n        name\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedQuery__\n *\n * To run a query within a React component, call `useFeedQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedQuery({\n *   variables: {\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useFeedQuery(baseOptions: Apollo.QueryHookOptions<FeedQuery, FeedQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n      }\nexport function useFeedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedQuery, FeedQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n        }\nexport type FeedQueryHookResult = ReturnType<typeof useFeedQuery>;\nexport type FeedLazyQueryHookResult = ReturnType<typeof useFeedLazyQuery>;\nexport type FeedQueryResult = Apollo.QueryResult<FeedQuery, FeedQueryVariables>;\nexport const CreateFeedDocument = gql`\n    mutation CreateFeed($name: String!) {\n  createFeed(name: $name) {\n    id\n  }\n}\n    `;\nexport type CreateFeedMutationFn = Apollo.MutationFunction<CreateFeedMutation, CreateFeedMutationVariables>;\n\n/**\n * __useCreateFeedMutation__\n *\n * To run a mutation, you first call `useCreateFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createFeedMutation, { data, loading, error }] = useCreateFeedMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateFeedMutation(baseOptions?: Apollo.MutationHookOptions<CreateFeedMutation, CreateFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateFeedMutation, CreateFeedMutationVariables>(CreateFeedDocument, options);\n      }\nexport type CreateFeedMutationHookResult = ReturnType<typeof useCreateFeedMutation>;\nexport type CreateFeedMutationResult = Apollo.MutationResult<CreateFeedMutation>;\nexport type CreateFeedMutationOptions = Apollo.BaseMutationOptions<CreateFeedMutation, CreateFeedMutationVariables>;\nexport const AddUserToFeedDocument = gql`\n    mutation AddUserToFeed($accessType: String!, $userId: String!, $feedId: String!) {\n  addUserToFeed(accessType: $accessType, userId: $userId, feedId: $feedId) {\n    accessType\n  }\n}\n    `;\nexport type AddUserToFeedMutationFn = Apollo.MutationFunction<AddUserToFeedMutation, AddUserToFeedMutationVariables>;\n\n/**\n * __useAddUserToFeedMutation__\n *\n * To run a mutation, you first call `useAddUserToFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddUserToFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addUserToFeedMutation, { data, loading, error }] = useAddUserToFeedMutation({\n *   variables: {\n *      accessType: // value for 'accessType'\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useAddUserToFeedMutation(baseOptions?: Apollo.MutationHookOptions<AddUserToFeedMutation, AddUserToFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddUserToFeedMutation, AddUserToFeedMutationVariables>(AddUserToFeedDocument, options);\n      }\nexport type AddUserToFeedMutationHookResult = ReturnType<typeof useAddUserToFeedMutation>;\nexport type AddUserToFeedMutationResult = Apollo.MutationResult<AddUserToFeedMutation>;\nexport type AddUserToFeedMutationOptions = Apollo.BaseMutationOptions<AddUserToFeedMutation, AddUserToFeedMutationVariables>;\nexport const RemoveUserFromFeedDocument = gql`\n    mutation RemoveUserFromFeed($userId: String!, $feedId: String!) {\n  removeUserFromFeed(userId: $userId, feedId: $feedId)\n}\n    `;\nexport type RemoveUserFromFeedMutationFn = Apollo.MutationFunction<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>;\n\n/**\n * __useRemoveUserFromFeedMutation__\n *\n * To run a mutation, you first call `useRemoveUserFromFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveUserFromFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeUserFromFeedMutation, { data, loading, error }] = useRemoveUserFromFeedMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useRemoveUserFromFeedMutation(baseOptions?: Apollo.MutationHookOptions<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>(RemoveUserFromFeedDocument, options);\n      }\nexport type RemoveUserFromFeedMutationHookResult = ReturnType<typeof useRemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationResult = Apollo.MutationResult<RemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationOptions = Apollo.BaseMutationOptions<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>;\nexport const PostDocument = gql`\n    query Post($postId: String!) {\n  post(id: $postId) {\n    id\n    creator {\n      id\n      name\n      avatar\n      username\n    }\n    created\n    comments {\n      id\n      creator {\n        username\n        name\n        id\n        avatar\n      }\n      content\n      created\n    }\n    media {\n      id\n      contentType\n      lowres\n      aspect\n      order\n      created\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts($filter: PostFindParameters!) {\n  posts(filter: $filter) {\n    id\n    body\n    commentCount\n    creator {\n      name\n      username\n      avatar\n    }\n    created\n    media {\n      id\n      aspect\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const CreatePostDocument = gql`\n    mutation CreatePost($params: PostCreateParameters!) {\n  createPost(params: $params) {\n    id\n  }\n}\n    `;\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, options);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const RemovePostDocument = gql`\n    mutation RemovePost($removePostId: String!) {\n  removePost(id: $removePostId)\n}\n    `;\nexport type RemovePostMutationFn = Apollo.MutationFunction<RemovePostMutation, RemovePostMutationVariables>;\n\n/**\n * __useRemovePostMutation__\n *\n * To run a mutation, you first call `useRemovePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemovePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removePostMutation, { data, loading, error }] = useRemovePostMutation({\n *   variables: {\n *      removePostId: // value for 'removePostId'\n *   },\n * });\n */\nexport function useRemovePostMutation(baseOptions?: Apollo.MutationHookOptions<RemovePostMutation, RemovePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemovePostMutation, RemovePostMutationVariables>(RemovePostDocument, options);\n      }\nexport type RemovePostMutationHookResult = ReturnType<typeof useRemovePostMutation>;\nexport type RemovePostMutationResult = Apollo.MutationResult<RemovePostMutation>;\nexport type RemovePostMutationOptions = Apollo.BaseMutationOptions<RemovePostMutation, RemovePostMutationVariables>;\nexport const ProfileDocument = gql`\n    query Profile {\n  profile {\n    id\n    username\n    name\n    admin\n    avatar\n    feeds {\n      feed {\n        id\n        name\n      }\n      accessType\n    }\n  }\n}\n    `;\n\n/**\n * __useProfileQuery__\n *\n * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProfileQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProfileQuery(baseOptions?: Apollo.QueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n      }\nexport function useProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n        }\nexport type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;\nexport type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;\nexport type ProfileQueryResult = Apollo.QueryResult<ProfileQuery, ProfileQueryVariables>;\nexport const SetProfileAvatarDocument = gql`\n    mutation SetProfileAvatar($mediaId: String) {\n  setProfileAvatar(mediaId: $mediaId) {\n    id\n  }\n}\n    `;\nexport type SetProfileAvatarMutationFn = Apollo.MutationFunction<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>;\n\n/**\n * __useSetProfileAvatarMutation__\n *\n * To run a mutation, you first call `useSetProfileAvatarMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProfileAvatarMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProfileAvatarMutation, { data, loading, error }] = useSetProfileAvatarMutation({\n *   variables: {\n *      mediaId: // value for 'mediaId'\n *   },\n * });\n */\nexport function useSetProfileAvatarMutation(baseOptions?: Apollo.MutationHookOptions<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>(SetProfileAvatarDocument, options);\n      }\nexport type SetProfileAvatarMutationHookResult = ReturnType<typeof useSetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationResult = Apollo.MutationResult<SetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationOptions = Apollo.BaseMutationOptions<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>;\nexport const RegisterPushNotificationDocument = gql`\n    mutation RegisterPushNotification($token: String!) {\n  registerPushNotification(token: $token) {\n    id\n  }\n}\n    `;\nexport type RegisterPushNotificationMutationFn = Apollo.MutationFunction<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>;\n\n/**\n * __useRegisterPushNotificationMutation__\n *\n * To run a mutation, you first call `useRegisterPushNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterPushNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerPushNotificationMutation, { data, loading, error }] = useRegisterPushNotificationMutation({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useRegisterPushNotificationMutation(baseOptions?: Apollo.MutationHookOptions<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>(RegisterPushNotificationDocument, options);\n      }\nexport type RegisterPushNotificationMutationHookResult = ReturnType<typeof useRegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationResult = Apollo.MutationResult<RegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationOptions = Apollo.BaseMutationOptions<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    name\n    username\n    avatar\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n      }\nexport function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;","import { usePostsQuery } from '#/hooks/graphql';\nimport { createContext, useMemo, useState } from 'react';\n\ntype BaseType = ReturnType<typeof usePostsQuery>;\n\ntype HomeContextValue = BaseType & {\n  posts: Exclude<BaseType['data'], undefined>['posts'];\n  feeds: string[];\n  setFeeds: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nconst HomeContext = createContext<HomeContextValue>(undefined as any);\n\nconst HomeProvider: React.FC = ({ children }) => {\n  const [feeds, setFeeds] = useState<string[]>([]);\n  const { data, ...props } = usePostsQuery({\n    variables: {\n      filter: {\n        feeds: feeds.length > 0 ? feeds : undefined,\n      },\n    },\n  });\n\n  const posts = useMemo(() => data?.posts || [], [data]);\n\n  const context = useMemo(\n    () => ({\n      ...props,\n      data,\n      feeds,\n      posts,\n      setFeeds,\n    }),\n    [props, data, feeds, setFeeds],\n  )\n\n  return (\n    <HomeContext.Provider value={context}>\n      {children}\n    </HomeContext.Provider>\n  );\n}\n\nexport { HomeContext, HomeProvider };\n","import { ServerContext } from '#/context/server';\nimport { useCallback, useContext } from 'react';\nimport { UploadFile } from './posts';\n\nexport const useCreateMedia = () => {\n  const { domain, token } = useContext(ServerContext);\n  const createMedia = useCallback(\n    async (media: UploadFile[]) => {\n      const ids: string[] = [];\n      for (let file of media) {\n        const data = new FormData();\n        data.append('media', file as any);\n        const response = await fetch(`${domain}/api/media`, {\n          method: 'POST',\n          body: data,\n          headers: {\n            'content-type': 'multipart/form-data',\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        if (!response.ok) {\n          console.error(await response.text());\n          throw new Error('Could not upload image');\n        }\n        const json = await response.json();\n        ids.push(json.ids[0]);\n      };\n      return ids;\n    },\n    [token, domain]\n  );\n  return createMedia;\n};\n","import { NotificationInfo } from '#/context/notifications';\nimport { Cell, Row } from '#/components/Row';\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Icon } from '../Icon';\n\ntype Props = {\n  notification: NotificationInfo;\n  dismiss: () => void;\n}\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.destructive};\n  margin: 5px;\n  border-radius: 5px;\n`\n\nconst Notification: React.FC<Props> = ({ notification, dismiss }) => {\n  return (\n    <Wrapper>\n      <Row\n        description={notification.text}\n        right={\n          <Cell onPress={dismiss}>\n            <Icon name=\"x\" color=\"text\" />\n          </Cell>\n        }\n      />\n    </Wrapper>\n  );\n}\n\nexport { Notification };\n\n\n","import { Notification } from '#/components/notification';\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\n\ntype NotificationInfo = {\n  type: 'info' | 'error',\n  text: string;\n  autoHideAfter?: number;\n  actions?: {\n    title: string;\n    onPress: () => void;\n    dismissOnPress: boolean;\n  };\n}\n\ntype InternalNotification = NotificationInfo & {\n  id: number;\n}\n\ntype NotificationContextValue = {\n  show: (notification: NotificationInfo) => number;\n  dismiss: (id: number) => void;\n}\n\nconst NotificationContext = createContext<NotificationContextValue>(undefined as any);\n\nconst Wrapper = styled.View<{ top: number }>`\n  position: absolute;\n  top: ${({ top }) => top}px;\n  width: 100%;\n  z-index: 1000;\n`;\n\nlet nextId = 0;\n\nconst NotificationProvider: React.FC = ({ children }) => {\n  const [notifications, setNotifications] = useState<InternalNotification[]>([]);\n  const insets = useSafeAreaInsets();\n\n  const show = useCallback(\n    (notification: NotificationInfo) => {\n      const id = nextId++;\n      setNotifications(current => [...current, {...notification, id}]);\n      return id;\n    },\n    [setNotifications]\n  );\n\n  const dismiss = useCallback(\n    (id: number) => {\n      setNotifications(current => current.filter(c => c.id !== id));\n    },\n    [setNotifications],\n  );\n\n  const context = useMemo(\n    () => ({\n      show,\n      dismiss,\n    }),\n    [show, dismiss],\n  );\n\n  return (\n    <NotificationContext.Provider value={context}>\n      {notifications.length > 0 && (\n        <Wrapper top={insets.top}>\n          {notifications.map((notification, index) => (\n            <Notification dismiss={() => dismiss(notification.id)} key={index} notification={notification} />\n          ))}\n        </Wrapper>\n      )}\n      {children}\n    </NotificationContext.Provider>\n  )\n}\n\nexport type { NotificationInfo };\nexport { NotificationProvider, NotificationContext };\n","import { NotificationContext } from \"#/context/notifications\"\nimport { useContext } from \"react\"\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  return context;\n};\n","import { HomeContext } from '#/context/home';\nimport { ServerContext } from '#/context/server';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport {\n  useCreatePostMutation,\n  useProfileQuery,\n  useRemovePostMutation,\n} from './graphql';\nimport { useCreateMedia } from './media';\nimport { useNotifications } from './notifications';\n\nexport type UploadFile = {\n  uri: string;\n  name: string;\n  type: string;\n};\n\nexport const useCreatePostData = () => {\n  const { data, refetch, loading, error } = useProfileQuery();\n  const feeds = useMemo(\n    () => data?.profile?.feeds.filter(f => f.accessType === 'admin'),\n    [data]\n  );\n\n  return {\n    feeds,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nexport const useCreatePost = () => {\n  const { domain, token } = useContext(ServerContext);\n  const { show, dismiss } = useNotifications();\n  const [createPostMutation, { error }] = useCreatePostMutation();\n  useEffect(\n    () => {\n      if (!error) {\n        return;\n      } \n      const id = show({\n        type: 'error',\n        text: error.message,\n      });\n      return () => {\n        dismiss(id);\n      }\n    },\n    [error, show, dismiss],\n  )\n  const createMedia = useCreateMedia();\n  const createPost = useCallback(\n    async (feed: string, body: string, media: UploadFile[]) => {\n      const ids = await createMedia(media);\n      await createPostMutation({\n        variables: {\n          params: {\n            feed,\n            body,\n            media: ids,\n          },\n        },\n      });\n    },\n    [createPostMutation, token, domain]\n  );\n\n  return createPost;\n};\n\nexport const useRemovePost = () => {\n  const [loading, setLoading] = useState(false);\n  const { refetch } = useFeed();\n  const [removePostMutation, { error }] = useRemovePostMutation();\n  const { show, dismiss } = useNotifications();\n  useEffect(\n    () => {\n      if (!error) {\n        return;\n      } \n      const id = show({\n        type: 'error',\n        text: error.message,\n      });\n      return () => {\n        dismiss(id);\n      }\n    },\n    [error, show, dismiss],\n  )\n  const removePost = useCallback(\n    async (id: string) => {\n      setLoading(true);\n      try {\n        await removePostMutation({\n          variables: { removePostId: id },\n        });\n        await refetch();\n      } finally {\n        setLoading(false);\n      }\n    },\n    [removePostMutation],\n  )\n\n  return { removePost, loading };\n};\n\nexport const useFeed = () => {\n  const context = useContext(HomeContext);\n  return context;\n};\n","import { PostModel, useRemovePostMutation } from '#/hooks/graphql';\nimport styled from 'styled-components/native';\nimport { DeepPartial } from '#/helpers/types';\nimport { Cell, Row } from '#/components/Row';\nimport { Icon } from '#/components/Icon';\nimport { Gallery } from '#/components/gallery';\nimport { Body1 } from '#/typography';\nimport { Avatar } from '#/components/avatar';\nimport { useNavigation } from '@react-navigation/native';\nimport { Popup } from '#/components/Popup';\nimport { useCallback, useState } from 'react';\nimport { useProfile } from '#/hooks/profile';\nimport { useFeed, useRemovePost } from '#/hooks/posts';\nimport { Button } from '#/components/Button';\nimport { OverlayLoader } from '#/components/loaders';\n\ntype PostRowProps = {\n  post: DeepPartial<PostModel>;\n  fullWidth: boolean;\n};\n\nconst Wrapper = styled.View<{\n  fullWidth: boolean;\n}>`\n  ${({ fullWidth, theme }) => fullWidth ? `\n    border-top-width: 7px; \n    border-color: ${theme.colors.shade};\n  ` : `\n    background-color: ${theme.colors.shade};\n    margin: 7px;\n    border-radius: 7px;\n  `}\n`;\n\nconst PostRow: React.FC<PostRowProps> = ({ post, fullWidth }) => {\n  const navigation = useNavigation();\n  const { removePost, loading } = useRemovePost();\n  const [menuVisible, setMenuVisible] = useState(false);\n  return (\n    <Wrapper fullWidth={fullWidth}>\n      {loading && <OverlayLoader />}\n      <Row\n        left={\n          <Cell>\n            <Avatar mediaId={post?.creator?.avatar!} />\n          </Cell>\n        }\n        right={\n          (\n            <>\n              <Cell onPress={() => navigation.navigate('Comments', { id: post.id })}>\n                <Icon name=\"message-circle\" color=\"text\" size={20} />\n                <Body1>{post.commentCount}</Body1>\n              </Cell>\n              <Cell onPress={() => setMenuVisible(true)}>\n                <Icon name=\"more-horizontal\" color=\"text\" size={20} />\n              </Cell>\n            </>\n          )\n        }\n        description={post.body}\n        overline={post.creator?.name || post.creator?.username}\n      />\n      {post.media && <Gallery media={post!.media} />}\n      <Popup onClose={() => setMenuVisible(false)} visible={menuVisible}>\n        <Button onPress={() => removePost(post.id!)} title=\"Remove\" type=\"destructive\" />\n      </Popup>\n    </Wrapper>\n  );\n};\n\nexport { PostRow };\n","import { useCallback } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport styled from 'styled-components/native';\nimport { UploadFile } from '#/hooks/posts';\nimport { Icon } from '../Icon';\nimport { Row } from '../Row';\n\ntype Props = {\n  files: UploadFile[];\n  onUpdate: (files: UploadFile[]) => void;\n};\n\nconst Image = styled.Image`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 5px;\n`;\n\nconst Spacer = styled.View`\n  padding-bottom: 100%;\n`;\n\nconst Item = styled.View`\n  width: 33%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Wrapper = styled.View`\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst Button = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n  justify-content: center;\n  align-items: center;\n  background: #ddd;\n  border-radius: 5px;\n`;\n\nconst ImageWrapper = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n`;\n\nconst AddImages: React.FC<Props> = ({ files, onUpdate }) => {\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    onUpdate([...files, file]);\n  }, [files, onUpdate]);\n\n  const remove = useCallback(\n    (file: UploadFile) => {\n      onUpdate(files.filter(f => f !== file));\n    },\n    [files, onUpdate]\n  );\n\n  return (\n    <Row>\n      <Wrapper>\n        {files.map(m => (\n          <Item key={m.uri}>\n            <Spacer />\n            <ImageWrapper onPress={() => remove(m)}>\n              <Image source={{ uri: m.uri }} />\n            </ImageWrapper>\n          </Item>\n        ))}\n        <Item>\n          <Spacer />\n          <Button onPress={pickImage}>\n            <Icon name=\"plus-circle\" size={40} />\n          </Button>\n        </Item>\n      </Wrapper>\n    </Row>\n  );\n};\n\nexport { AddImages };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { DeepPartial } from '#/helpers/types';\nimport { FeedModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype FeedInputProps = {\n  label: string;\n  feeds: DeepPartial<FeedModel>[];\n  selected?: DeepPartial<FeedModel>;\n  onSelect: (feed?: DeepPartial<FeedModel>) => void;\n};\n\nconst FeedInput: React.FC<FeedInputProps> = ({\n  label,\n  feeds,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={feeds || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name} />}\n      />\n    </>\n  );\n};\n\nexport { FeedInput };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { PartialDeep } from 'type-fest';\nimport { UserModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype UserInputProps = {\n  label: string;\n  users: PartialDeep<UserModel>[];\n  selected?: PartialDeep<UserModel>;\n  onSelect: (user?: PartialDeep<UserModel>) => void;\n};\n\nconst UserInput: React.FC<UserInputProps> = ({\n  label,\n  users,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || selected?.username || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={users || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name || item.username} />}\n      />\n    </>\n  );\n};\n\nexport { UserInput };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype NameValueInputItem = {\n  key: string;\n  value: any;\n};\n\ntype NameValueInputProps = {\n  label: string;\n  items: NameValueInputItem[];\n  selected?: NameValueInputItem;\n  onSelect: (item?: NameValueInputItem) => void;\n};\n\nconst NameValueInput: React.FC<NameValueInputProps> = ({\n  label,\n  items,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.key || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={items}\n        getKey={item => item.key}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.key} />}\n      />\n    </>\n  );\n};\n\nexport { NameValueInputItem, NameValueInput };\n","import { ServerContext } from '#/context/server';\nimport { useRegisterPushNotificationMutation } from '#/hooks/graphql';\nimport React, { useContext, useEffect } from 'react';\n\nconst PushRegistation: React.FC<{}> = () => {\n  const { pushToken } = useContext(ServerContext);\n  const [registerPushMutation] = useRegisterPushNotificationMutation();\n\n  useEffect(() => {\n    if (!pushToken) {\n      return;\n    }\n    registerPushMutation({\n      variables: {\n        token: pushToken,\n      },\n    });\n  }, [pushToken]);\n\n  return <></>;\n};\n\nexport { PushRegistation };\n","\nimport { useProfileQuery } from '#/hooks/graphql';\nimport { createContext, useMemo, useState } from 'react';\n\ntype BaseType = ReturnType<typeof useProfileQuery>;\n\ntype ProfileContextValue = BaseType & {\n  profile: Exclude<BaseType['data'], undefined>['profile'];\n  feeds: Exclude<Exclude<BaseType['data'], undefined>['profile'], null | undefined>['feeds'];\n}\n\nconst ProfileContext = createContext<ProfileContextValue>(undefined as any);\n\nconst ProfileProvider: React.FC = ({ children }) => {\n  const { data, ...props } = useProfileQuery({\n    variables: {\n    },\n  });\n\n  const feeds = useMemo(() => data?.profile?.feeds || [], [data]);\n  const profile = useMemo(() => data?.profile, [data]);\n\n  const context = useMemo(\n    () => ({\n      ...props,\n      data,\n      feeds,\n      profile,\n    }),\n    [props, data, feeds],\n  )\n\n  return (\n    <ProfileContext.Provider value={context}>\n      {children}\n    </ProfileContext.Provider>\n  );\n}\n\nexport { ProfileContext, ProfileProvider };\n","import { ProfileContext } from '#/context/profile';\nimport { useCallback, useContext } from 'react';\nimport { useSetProfileAvatarMutation } from './graphql';\nimport { useCreateMedia } from './media';\nimport { UploadFile } from './posts';\n\nexport const useSetAvatar = () => {\n  const createMedia = useCreateMedia();\n  const [setAvatarMutation] = useSetProfileAvatarMutation();\n\n  const setAvatar = useCallback(async (media?: UploadFile) => {\n    const [id] = media ? await createMedia([media]) : [];\n    await setAvatarMutation({\n      variables: {\n        mediaId: id,\n      },\n    });\n  }, []);\n\n  return setAvatar;\n};\n\nexport const useProfile = () => {\n  const context = useContext(ProfileContext);\n  return context;\n};\n","import React, { useCallback, useState, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { UploadFile, useCreatePost } from '#/hooks/posts';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { Page, FeedInput, AddImages, Row, Input, Button } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\nimport { useFeed } from '#/hooks/posts';\n\nconst Wrapper = styled.ScrollView`\n  flex: 1;\n`;\nconst Outer = styled.View`\n  flex: 1;\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n\nconst AddPostScreen: React.FC<AddScreenNavigationProp> = ({ navigation }) => {\n  const [loading, setLoading] = useState(false);\n  const { refetch: refetchPosts } = useFeed();\n  const { feeds, refetch, loading: profileLoading } = useProfile();\n  const [selectedFeed, setSelectedFeed] = useState<any>();\n  const [media, setMedia] = useState<UploadFile[]>([]);\n  const [body, setBody] = useState('');\n  const createPost = useCreatePost();\n  const adminFeeds = useMemo(\n    () => feeds?.filter(f => f.accessType === 'admin').map(f => f.feed) || [],\n    [feeds]\n  );\n\n  const submit = useCallback(async () => {\n    setLoading(true);\n    await createPost(selectedFeed.id, body, media);\n    await refetchPosts();\n    setLoading(false);\n    setSelectedFeed(undefined);\n    setMedia([]);\n    setBody('');\n    navigation.navigate('Feed', {});\n  }, [selectedFeed, body, media]);\n  useFocusEffect(\n    useCallback(() => {\n      refetch();\n    }, [refetch])\n  );\n\n  if (!feeds) {\n    return <></>;\n  }\n\n  return (\n    <Page loading={profileLoading || loading}>\n      <Outer>\n        <Header title=\"Create post\" />\n        <Wrapper>\n          <AddImages files={media} onUpdate={setMedia} />\n          <FeedInput\n            label=\"Feed\"\n            feeds={adminFeeds}\n            selected={selectedFeed}\n            onSelect={setSelectedFeed}\n          />\n          <Row overline=\"Content\">\n            <Input\n              label=\"Tell your story...\"\n              value={body}\n              onChangeText={setBody}\n            />\n          </Row>\n        </Wrapper>\n        <Row>\n          {!!selectedFeed && media.length > 0 && (\n            <Button onPress={submit} title=\"Create\" />\n          )}\n        </Row>\n      </Outer>\n    </Page>\n  );\n};\n\nexport { AddPostScreen };\n","import React, { useCallback, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { ListRenderItem, RefreshControl, Dimensions } from 'react-native';\nimport MasonryList from '@react-native-seoul/masonry-list';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { useFeed } from '#/hooks/posts';\nimport { Page } from '#/components/Page';\nimport { PostFilter, PostRow } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\n\nconst Seperator = styled.View`\n  margin-top: 15px;\n  border-bottom-width: 5px;\n  margin-bottom: 15px;\n  border-color: ${({ theme }) => theme.colors.shade};\n`;\nconst Wrapper = styled.View`\n  background-color: ${({ theme }) => theme.colors.background};\n  flex: 1;\n`;\n\nconst FeedScreen: React.FC<AddScreenNavigationProp> = () => {\n  const { posts, loading, refetch, feeds: selectedFeeds, setFeeds: setSelectedFeeds } = useFeed();\n  const { feeds } = useProfile();\n\n  const userFeeds = useMemo(() => feeds.map(f => f.feed), [feeds]);\n  const columns = useMemo(\n    () => Math.ceil(Dimensions.get('window').width / 500),\n    [],\n  );\n\n  const renderItem: ListRenderItem<typeof posts[0]> = useCallback(\n    ({ item }) => <PostRow fullWidth={columns <= 1} key={item.id} post={item} />,\n    [columns]\n  );\n\n  return (\n    <Page>\n      <Wrapper>\n        <Header\n          key=\"test\"\n          title=\"All posts\"\n          right={\n            <>\n              {userFeeds.length > 1 && (\n                <PostFilter\n                  feeds={userFeeds}\n                  selected={selectedFeeds}\n                  onSelect={setSelectedFeeds}\n                />\n              )}\n            </>\n          }\n        />\n        <MasonryList\n          data={posts}\n          keyExtractor={(item: any) => item.id}\n          renderItem={renderItem}\n          numColumns={columns}\n          ItemSeparatorComponent={Seperator}\n          refreshControl={\n            <RefreshControl refreshing={loading} onRefresh={refetch} />\n          }\n        />\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { FeedScreen };\n","import {\n  useAddUserToFeedMutation,\n  useCreateFeedMutation,\n  useRemoveUserFromFeedMutation,\n  useFeedQuery,\n} from '#/hooks/graphql';\nimport { useCallback, useMemo } from 'react';\n\nexport const useFeed = (id: string) => {\n  const { data, refetch, loading, error } = useFeedQuery({\n    variables: { feedId: id },\n  });\n  const feed = useMemo(() => data?.feed, [data]);\n  console.log(error);\n  return {\n    feed,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nconst useCreateFeed = () => {\n  const [createFeedMutation] = useCreateFeedMutation();\n  const createFeed = useCallback(\n    async (name: string) => {\n      await createFeedMutation({\n        variables: {\n          name,\n        },\n      });\n    },\n    [createFeedMutation]\n  );\n\n  return createFeed;\n};\n\nconst useAddUserToFeed = () => {\n  const [addUserToFeedMutation] = useAddUserToFeedMutation();\n  const addUserToFeed = useCallback(\n    async (feedId: string, userId: string, accessType: string) => {\n      await addUserToFeedMutation({\n        variables: {\n          feedId,\n          userId,\n          accessType,\n        },\n      });\n    },\n    [addUserToFeedMutation]\n  );\n\n  return addUserToFeed;\n};\n\nconst useRemoveUserFromFeed = () => {\n  const [removeUserFromFeedMutation] = useRemoveUserFromFeedMutation();\n  const removeUserFromFeed = useCallback(\n    async (feedId: string, userId: string) => {\n      await removeUserFromFeedMutation({\n        variables: {\n          feedId,\n          userId,\n        },\n      });\n    },\n    [removeUserFromFeedMutation]\n  );\n\n  return removeUserFromFeed;\n};\n\nexport { useCreateFeed, useAddUserToFeed, useRemoveUserFromFeed };\n","import { useCallback, useContext, useState } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport {\n  Avatar,\n  Button,\n  Cell,\n  Group,\n  Header,\n  Input,\n  Page,\n  Popup,\n  Row,\n} from '#/components';\nimport { useProfile, useSetAvatar } from '#/hooks/profile';\nimport { ProfileMainScreenNavigationProp } from '#/router/types';\nimport { useCreateFeed } from '#/hooks/feeds';\nimport { ServerContext } from '#/context/server';\n\nconst ProfileScreen: React.FC<ProfileMainScreenNavigationProp> = ({\n  navigation,\n}) => {\n  const { profile, feeds, refetch } = useProfile();\n  const { logout } = useContext(ServerContext);\n  const createFeed = useCreateFeed();\n  const [addFeedVisible, setAddFeedVisible] = useState(false);\n  const [feedName, setFeedName] = useState('');\n  const setAvatar = useSetAvatar();\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    await setAvatar(file);\n    await refetch();\n  }, []);\n  const saveAddFeed = useCallback(async () => {\n    await createFeed(feedName);\n    setFeedName('');\n    setAddFeedVisible(false);\n    await refetch();\n  }, [feedName, createFeed]);\n  return (\n    <Page>\n      <Header title=\"Profile\" />\n      <Row\n        left={\n          <Cell>\n            <Avatar\n              mediaId={profile?.avatar || undefined}\n              onPress={pickImage}\n            />\n          </Cell>\n        }\n        title={profile?.name || profile?.username}\n      />\n      <Popup visible={addFeedVisible} onClose={() => setAddFeedVisible(false)}>\n        <Row>\n          <Input label=\"Name\" value={feedName} onChangeText={setFeedName} />\n        </Row>\n        <Row>\n          <Button title=\"Save\" onPress={saveAddFeed} />\n        </Row>\n      </Popup>\n      <Group\n        title=\"My feeds\"\n        items={feeds}\n        getKey={item => item.feed.id}\n        add={\n          profile?.admin\n            ? () => {\n                setAddFeedVisible(true);\n              }\n            : undefined\n        }\n        render={item => (\n          <Row\n            title={item.feed.name}\n            overline={item.accessType}\n            right={\n              <Cell>\n                <Button title=\"Leave\" type=\"destructive\" />\n              </Cell>\n            }\n            onPress={() => {\n              navigation.navigate('FeedEdit', { id: item.feed.id });\n            }}\n          />\n        )}\n      />\n      <Row>\n        <Button title=\"Logout\" type=\"destructive\" onPress={logout} />\n      </Row>\n    </Page>\n  );\n};\n\nexport { ProfileScreen };\n","import { useMemo } from 'react';\nimport { useUsersQuery } from './graphql';\n\nexport const useUsers = () => {\n  const { data, refetch, loading, error } = useUsersQuery();\n  const users = useMemo(() => data?.users, [data]);\n  return {\n    users,\n    refetch,\n    loading,\n    error,\n  };\n};\n","import {\n  Group,\n  NameValueInput,\n  Header,\n  Input,\n  Page,\n  Popup,\n  Row,\n  UserInput,\n  NameValueInputItem,\n  Button,\n  Cell,\n} from '#/components';\nimport {\n  useAddUserToFeed,\n  useFeed,\n  useRemoveUserFromFeed,\n} from '#/hooks/feeds';\nimport { UserModel } from '#/hooks/graphql';\nimport { useUsers } from '#/hooks/users';\nimport { FeedEditScreenNavigationProp } from '#/router/types';\nimport { useCallback, useState } from 'react';\nimport { PartialDeep } from 'type-fest';\n\nconst accessTypes = [\n  { key: 'Admin', value: 'admin' },\n  { key: 'Moderator', value: 'moderator' },\n  { key: 'Writer', value: 'writer' },\n  { key: 'Reader', value: 'reader' },\n];\n\nconst FeedEditScreen: React.FC<FeedEditScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const { feed, refetch } = useFeed(id);\n  const { users } = useUsers();\n  const removeUserFromFeed = useRemoveUserFromFeed();\n  const addUserToFeed = useAddUserToFeed();\n  const [addUserVisible, setAddUserVisible] = useState(false);\n  const [addUserSelected, setAddUserSelected] =\n    useState<PartialDeep<UserModel>>();\n  const [addUserAccessType, setAddUserAccessType] =\n    useState<NameValueInputItem>();\n\n  const addUser = useCallback(async () => {\n    await addUserToFeed(id, addUserSelected!.id!, addUserAccessType!.value);\n    setAddUserSelected(undefined);\n    setAddUserAccessType(undefined);\n    setAddUserVisible(false);\n    await refetch();\n  }, [id, addUserSelected, addUserAccessType]);\n\n  const removeUser = useCallback(\n    async (userId: string) => {\n      await removeUserFromFeed(id, userId);\n      await refetch();\n    },\n    [id, removeUserFromFeed, refetch]\n  );\n\n  if (!feed) {\n    return <></>;\n  }\n\n  return (\n    <Page>\n      <Header title=\"Feed\" />\n      <Row>\n        <Input label=\"Name\" value={feed.name} />\n      </Row>\n      <Group\n        title=\"Users\"\n        add={() => {\n          setAddUserVisible(true);\n        }}\n        items={feed.users}\n        getKey={relation => relation.user.id}\n        render={relation => (\n          <Row\n            overline={relation.accessType}\n            title={relation.user.name || relation.user.username}\n            right={\n              <Cell>\n                <Button\n                  title=\"Remove\"\n                  onPress={() => removeUser(relation.user.id)}\n                />\n              </Cell>\n            }\n          />\n        )}\n      />\n      <Popup visible={addUserVisible} onClose={() => setAddUserVisible(false)}>\n        <UserInput\n          label=\"User\"\n          selected={addUserSelected}\n          onSelect={user => setAddUserSelected(user!)}\n          users={users}\n        />\n        <NameValueInput\n          label=\"Access type\"\n          selected={addUserAccessType}\n          onSelect={accessType => setAddUserAccessType(accessType!)}\n          items={accessTypes}\n        />\n        {!!addUserAccessType && !!addUserSelected && (\n          <Row>\n            <Button title=\"Save\" onPress={addUser} />\n          </Row>\n        )}\n      </Popup>\n    </Page>\n  );\n};\n\nexport { FeedEditScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { ServerContext } from '#/context/server';\nimport { Header, Icon, Page } from '#/components';\nimport { LoginScreenNavigationProp } from '#/router/types';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background: ${({ theme }) => theme.colors.shade};\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\nconst Text = styled.Text``;\n\nconst LoginScreen: React.FC<LoginScreenNavigationProp> = ({ navigation }) => {\n  const { login } = useContext(ServerContext);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n  const [domain, setDomain] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const doLogin = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await login(domain, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [domain, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          {error && <Text>{error.toString()}</Text>}\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"server\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Domain\"\n              value={domain}\n              onChangeText={setDomain}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Secret\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doLogin} title=\"Login\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { LoginScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { AcceptInvitationScreenNavigationProp } from '#/router/types';\nimport { ServerContext } from '#/context/server';\nimport { Text } from 'react-native';\nimport { Header, Icon, Page } from '#/components';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  align-items: center;\n  justify-content: center;\n  padding: 0 20px;\n  flex: 1;\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\n\nconst AcceptInvitationScreen: React.FC<\n  AcceptInvitationScreenNavigationProp\n> = ({ route, navigation }) => {\n  const { inviteCode } = route.params;\n  const { acceptInvitation } = useContext(ServerContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n\n  const doAccept = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await acceptInvitation(inviteCode, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [inviteCode, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          <Row description=\"You are almost there! Just pick your username and password and off we go!\" />\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Password\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doAccept} title=\"Let's GO\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { AcceptInvitationScreen };\n","\nimport {\n  Header,\n  Input,\n  Page,\n  Row,\n  Button,\n  Cell,\n  Avatar,\n} from '#/components';\nimport { useCreateCommentMutation, usePostQuery } from '#/hooks/graphql';\nimport { CommentsScreenNavigationProp } from '#/router/types';\nimport { useCallback, useState } from 'react';\nimport { FlatList } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\n\nconst Content = styled.View`\n  flex: 1;\n`\n\nconst Wrapper = styled.View`\n  flex: 1;\n`\n\nconst CommentsScreen: React.FC<CommentsScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const insets = useSafeAreaInsets();\n  const [content, setContent] = useState('');\n  const [createCommentMutation] = useCreateCommentMutation();\n  const { data, refetch } = usePostQuery({\n    variables: {\n      postId: id,\n    },\n  });\n\n  const createComment = useCallback(\n    async () => {\n      await createCommentMutation({\n        variables: {\n          params: {\n            content,\n            post: id,\n          }\n        }\n      });\n      setContent('');\n      await refetch();\n    },\n    [content, id, createCommentMutation, refetch],\n  )\n  return (\n    <Page>\n      <Header title=\"Comments\" />\n      <Wrapper style={{ paddingBottom: insets.bottom + 20 }}>\n        <Content>\n          <FlatList\n            style={{ flex: 1 }}\n            inverted\n            keyExtractor={item => item.id}\n            renderItem={({ item }) => (\n              <Row\n                left={(\n                  <Cell>\n                    <Avatar mediaId={item.creator.avatar || undefined}/>\n                  </Cell>\n                )}\n                overline={item.creator.name || item.creator.username}\n                description={item.content}\n              />\n            )}\n            data={[...(data?.post.comments || [])].reverse()}\n          />\n        </Content> \n        <Row\n          right={(\n            <Button title=\"Send\" onPress={createComment} />\n          )}\n        >\n          <Input label=\" Say something...\" value={content} onChangeText={setContent} />\n        </Row>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { CommentsScreen };\n","import React, { useContext, useMemo } from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useTheme } from 'styled-components/native';\nimport { ProfileParamList, RootStackParamList, TabParamList } from './types';\nimport { linkingConfig } from './linking';\nimport { Icon, PushRegistation } from '#/components';\n\nimport { AddPostScreen } from '#/screens/posts/add';\nimport { FeedScreen } from '#/screens/posts/feed';\nimport { ProfileScreen } from '#/screens/profile';\nimport { FeedEditScreen } from '#/screens/feeds/edit';\nimport { ServerContext } from '#/context/server';\nimport { LoginScreen } from '#/screens/login/login';\nimport { useProfile } from '#/hooks/profile';\nimport { AcceptInvitationScreen } from '#/screens/login/accept-invitation';\nimport { CommentsScreen } from '#/screens/comments';\nimport { HomeProvider } from '#/context/home';\n\nconst RootStack = createNativeStackNavigator<RootStackParamList>();\nconst TabStack = createBottomTabNavigator<TabParamList>();\nconst ProfileStack = createNativeStackNavigator<ProfileParamList>();\n\nconst Profile = () => {\n  return (\n    <ProfileStack.Navigator screenOptions={{ headerShown: false }}>\n      <ProfileStack.Screen name=\"ProfileMain\" component={ProfileScreen} />\n    </ProfileStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const theme = useTheme();\n  const { profile } = useProfile();\n  const canCreate = useMemo(\n    () =>\n      profile?.feeds?.find(\n        f =>\n          f.accessType === 'admin' ||\n          f.accessType === 'moderator' ||\n          f.accessType === 'writer'\n      ),\n    [profile]\n  );\n  return (\n    <>\n      <PushRegistation />\n      <TabStack.Navigator\n        screenOptions={{\n          headerShown: false,\n          tabBarActiveTintColor: theme.colors.primary,\n        }}\n      >\n        <TabStack.Screen\n          name=\"Feed\"\n          component={FeedScreen}\n          options={{\n            title: 'Posts',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"home\"\n                size={28}\n              />\n            ),\n          }}\n        />\n        {canCreate && (\n          <TabStack.Screen\n            name=\"Add\"\n            component={AddPostScreen}\n            options={{\n              title: 'Add',\n              tabBarIcon: ({ focused }) => (\n                <Icon\n                  color={focused ? 'primary' : 'text'}\n                  name=\"plus-square\"\n                  size={28}\n                />\n              ),\n            }}\n          />\n        )}\n        <TabStack.Screen\n          name=\"Profile\"\n          component={Profile}\n          options={{\n            title: 'Profile',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"user\"\n                size={28}\n              />\n            ),\n          }}\n        />\n      </TabStack.Navigator>\n    </>\n  );\n};\n\nconst Root = () => {\n  const theme = useTheme();\n  const { domain } = useContext(ServerContext);\n  return (\n    <RootStack.Navigator screenOptions={{ headerShown: false }}>\n      {domain ? (\n        <>\n          <RootStack.Group>\n            <RootStack.Screen name=\"Main\" component={Tabs} />\n          </RootStack.Group>\n          <RootStack.Group\n            screenOptions={{\n              contentStyle: {\n                backgroundColor: theme.colors.shade,\n              },\n              presentation: 'modal',\n            }}\n          >\n            <RootStack.Screen name=\"FeedEdit\" component={FeedEditScreen} />\n            <RootStack.Screen name=\"Comments\" component={CommentsScreen} />\n          </RootStack.Group>\n        </>\n      ) : (\n        <RootStack.Group>\n          <RootStack.Screen name=\"Login\" component={LoginScreen} />\n          <RootStack.Screen\n            initialParams={{ inviteCode: '' }}\n            name=\"AcceptInvitation\"\n            component={AcceptInvitationScreen}\n          />\n        </RootStack.Group>\n      )}\n    </RootStack.Navigator>\n  );\n};\n\ninterface RouterProps {\n  colorScheme: string;\n}\n\nconst Router: React.FC<RouterProps> = ({ colorScheme }) => {\n  const theme = useTheme();\n  const baseTheme = useMemo(\n    () => (colorScheme === 'dark' ? DarkTheme : DefaultTheme),\n    [colorScheme]\n  );\n  const navigationTheme = useMemo(\n    () => ({\n      ...baseTheme,\n      colors: {\n        ...baseTheme.colors,\n        background: theme.colors.shade,\n        card: theme.colors.background,\n        text: theme.colors.text,\n      },\n    }),\n    [baseTheme, theme]\n  );\n  return (\n    <HomeProvider>\n      <NavigationContainer linking={linkingConfig} theme={navigationTheme}>\n        <Root />\n      </NavigationContainer>\n    </HomeProvider>\n  );\n};\n\nexport { Router };\n","import { Image } from 'react-native';\n\nif (!Image.getSizeWithHeaders) {\n  Image.getSizeWithHeaders = (uri, headers, success, failed) => {\n    success(100, 100);\n  };\n}\n\nimport App from './src/App';\n\nexport default App;\n","import { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { useColorScheme } from './hooks/colors';\nimport { ThemeProvider } from 'styled-components/native';\nimport { StatusBar } from 'expo-status-bar';\nimport { GraphQLProvider } from './context/graphql';\nimport { ServerProvider } from './context/server';\nimport { light, dark } from '#/theme';\nimport { Router } from '#/router';\nimport { ProfileProvider } from './context/profile';\nimport { NotificationProvider } from './context/notifications';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n  return (\n    <ThemeProvider theme={colorScheme === 'dark' ? dark : light}>\n      <SafeAreaProvider>\n        <ServerProvider>\n          <StatusBar style={colorScheme === 'dark' ? 'light' : 'dark'} />\n          <GraphQLProvider>\n            <NotificationProvider>\n              <ProfileProvider>\n                <Router colorScheme={colorScheme} />\n              </ProfileProvider>\n            </NotificationProvider>\n          </GraphQLProvider>\n        </ServerProvider>\n      </SafeAreaProvider>\n    </ThemeProvider>\n  );\n}\n","import {\n  ColorSchemeName,\n  useColorScheme as _useColorScheme,\n} from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import React, { createContext, useCallback, useEffect, useState } from 'react';\nimport { Buffer } from 'buffer';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { registerForPushNotificationsAsync } from './push';\n\nconst STORAGE_KEY = '_/server';\ntype ServerContextValue = {\n  domain?: string;\n  pushToken: string | undefined;\n  token?: string;\n  logout: () => Promise<void>;\n  login: (domain: string, username: string, secret: string) => Promise<void>;\n  acceptInvitation: (\n    invitation: string,\n    username: string,\n    secret: string,\n    name?: string\n  ) => Promise<void>;\n};\n\nconst ServerContext = createContext<ServerContextValue>(undefined as any);\n\nconst ServerProvider: React.FC = ({ children }) => {\n  const [context, setContext] = useState<{ domain: string; token: string }>();\n  const [error, setError] = useState<any>();\n  const [pushToken, setPushToken] = useState<string>();\n  const [ready, setReady] = useState(false);\n  const logout = useCallback(async () => {\n    await AsyncStorage.removeItem(STORAGE_KEY);\n    setContext(undefined);\n  }, [setContext]);\n\n  useEffect(() => {\n    if (!context) {\n      return;\n    }\n    registerForPushNotificationsAsync().then(setPushToken);\n  }, [context]);\n\n  const login = useCallback(\n    async (domain: string, username: string, secret: string) => {\n      const authUrl = `${domain}/graphql`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: `\n            mutation CreateAuthToken($secret: String!, $username: String!) {\n              createAuthToken(secret: $secret, username: $username)\n            } \n          `,\n          variables: {\n            username,\n            secret,\n          },\n        }),\n      });\n      const json = await response.json();\n      if (!response.ok) {\n        setError(json.errors);\n        throw new Error('failed');\n      }\n      const context = {\n        token: json.data.createAuthToken,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    []\n  );\n\n  const acceptInvitation = useCallback(\n    async (\n      invitation: string,\n      username: string,\n      secret: string,\n      name?: string\n    ) => {\n      const rawInvite = Buffer.from(invitation, 'base64').toString('utf-8');\n      const { creationToken, domain } = JSON.parse(rawInvite);\n      const authUrl = `${domain}/api/accept-invitation`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n          secret,\n          creationToken,\n          name,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const json = await response.json();\n      const context = {\n        token: json.token,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    []\n  );\n\n  useEffect(() => {\n    const run = async () => {\n      const item = await AsyncStorage.getItem(STORAGE_KEY);\n      if (item) {\n        const nextContext = JSON.parse(item) as ServerContextValue;\n        const configResponse = await fetch(`${nextContext.domain}/api/config`, {\n          headers: {\n            Authorization: `Bearer ${nextContext.token}`,\n          },\n        });\n        if (configResponse.ok) {\n          setContext(JSON.parse(item));\n        }\n      }\n      setReady(true);\n    };\n    run().catch(err => {\n      setReady(true);\n      setError(err);\n    });\n  }, []);\n\n  if (!ready) {\n    return <></>;\n  }\n\n  return (\n    <ServerContext.Provider\n      value={{ ...context, pushToken, logout, login, acceptInvitation }}\n    >\n      {children}\n    </ServerContext.Provider>\n  );\n};\n\nexport { ServerContext, ServerProvider };\n","import * as Device from 'expo-device';\nimport { Platform } from 'react-native';\nimport * as Notifications from 'expo-notifications';\n\nexport const registerForPushNotificationsAsync = async () => {\n  if (Device.isDevice && Platform.OS !== 'web') {\n    const { status: existingStatus } =\n      await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n    return token;\n  };\n};\n","import { ServerContext } from '#/context/server';\nimport styled from 'styled-components/native';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\n\nconst Wrapper = styled.View<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\nconst ImageWrapper = styled.Image`\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: #ccc;\n`;\n\ntype Props = {\n  media: DeepPartial<MediaModel>;\n};\nconst Image: React.FC<Props> = ({ media }) => {\n  const { domain, token } = useContext(ServerContext);\n  const [width, setWidth] = useState<number>(0);\n  const [url, setUrl] = useState<string>();\n  useEffect(() => {\n    const run = async () => {\n      const response = await fetch(`${domain}/api/thumb/${media.id!}`, {\n        headers: {\n          Authorization: `bearer ${token!}`,\n        },\n      });\n      const binaryData = await response.arrayBuffer();\n      const contentType = response.headers.get('content-type');\n      const base64 = Buffer.from(binaryData).toString('base64');\n      const dataUrl = `data:${contentType || 'image/jpeg'};base64,${base64}`;\n      setUrl(dataUrl);\n    };\n    run();\n  }, [domain, token, media.id]);\n  return (\n    <Wrapper\n      height={width / media.aspect!}\n      onLayout={evt => {\n        const currentWidth = evt.nativeEvent.layout.width;\n        if (currentWidth !== width) {\n          setWidth(currentWidth);\n        }\n      }}\n    >\n      <ImageWrapper source={{ uri: url }} />\n    </Wrapper>\n  );\n};\n\nexport { Image };\n"],"sourceRoot":""}