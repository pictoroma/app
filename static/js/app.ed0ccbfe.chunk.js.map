{"version":3,"sources":["src/components/Row/Cell.tsx","src/components/Row/index.tsx","src/components/Row/PlaceholderIcon.tsx","src/hooks/notifications.ts","assets/images/tourist.png","src/components/notification/index.tsx","src/context/notifications/index.tsx","assets/images/error.png","src/hooks/graphql.tsx","src/hooks/utils.ts","src/context/profile/index.tsx","src/context/home/index.tsx","src/context/graphql/index.tsx","src/theme/light.ts","src/theme/dark.ts","src/router/linking.ts","src/components/loaders/overlay/index.tsx","src/components/avatar/index.tsx","src/components/Button/index.tsx","src/components/Modal/index.web.tsx","src/components/Page/index.tsx","src/components/Popup/index.tsx","src/components/posts/filter/index.tsx","src/components/Row/Header.tsx","src/components/Group/index.tsx","src/components/Input/index.tsx","src/components/Dialog/index.tsx","src/components/Header/index.tsx","src/components/gallery/index.tsx","src/components/gallery/save.ts","src/hooks/media.ts","src/hooks/posts.ts","src/components/rows/post/index.tsx","src/components/add-images/index.tsx","src/components/inputs/feed/index.tsx","src/components/inputs/user/index.tsx","src/components/inputs/name-value/index.tsx","src/components/utils/push-registration.tsx","src/hooks/profile.ts","src/screens/posts/add/index.tsx","src/screens/posts/feed/index.tsx","src/hooks/feeds.ts","src/hooks/users.ts","src/screens/profile/index.tsx","src/screens/feeds/edit/index.tsx","src/screens/login/login/index.tsx","src/screens/login/accept-invitation/index.tsx","src/screens/comments/index.tsx","src/router/index.tsx","App.tsx","src/App.tsx","src/hooks/colors.ts","src/context/server/index.tsx","src/context/server/push.ts","src/components/Icon/index.tsx","src/typography/index.ts","src/components/Image/index.web.tsx"],"names":["Wrapper","styled","View","theme","margins","medium","background","flex","direction","align","Touch","TouchableOpacity","Cell","children","onPress","props","accessibilityLabel","accessibilityRole","accessibilityHint","others","node","accessible","Children","color","size","componentOrString","input","Component","Row","top","left","right","title","overline","description","Overline","Title1","Body1","useNotifications","useContext","NotificationContext","module","exports","colors","destructive","Notification","notification","dismiss","text","Icon","name","createContext","undefined","nextId","NotificationProvider","useState","notifications","setNotifications","insets","useSafeAreaInsets","show","useCallback","id","current","filter","c","context","useMemo","Provider","value","length","map","index","defaultOptions","CreateCommentDocument","gql","FeedDocument","CreateFeedDocument","AddUserToFeedDocument","RemoveUserFromFeedDocument","PostDocument","PostsDocument","CreatePostDocument","RemovePostDocument","ProfileDocument","useProfileQuery","baseOptions","options","Apollo","SetProfileAvatarDocument","InviteProfileDocument","RegisterPushNotificationDocument","UsersDocument","useErrorNotification","error","useEffect","console","type","message","ProfileContext","ProfileProvider","variables","data","feeds","profile","HomeContext","HomeProvider","setFeeds","usePostsQuery","posts","GraphQLProvider","ServerContext","token","domain","apolloClient","link","createHttpLink","uri","authLink","setContext","_","headers","authorization","ApolloClient","cache","InMemoryCache","concat","ApolloProvider","client","lightTheme","primary","icon","shade","secondary","shadow","textShade","sizes","corners","icons","small","large","font","baseSize","darkTheme","light","linkingConfig","prefixes","screens","AcceptInvitation","BlurView","Activity","ActivityIndicator","OverlayLoader","intensity","Touchable","Avatar","mediaId","content","media","aspect","getColors","bg","fg","StyledLink","Link","Button","Modal","visible","elm","newElm","document","createElement","style","position","display","flexDirection","width","height","transition","transform","body","appendChild","removeChild","ReactDOM","createPortal","KeyboardAvoiding","KeyboardAvoidingView","Pressable","ErrorWrapper","ErrorImage","Image","ErrorBoundary","state","hasError","errorInfo","Sentry","captureException","extra","this","source","errorImage","toString","setState","React","Page","loading","keyboardShown","setKeyboardShown","Keyboard","addListener","hide","remove","disabled","behavior","Platform","OS","Top","Outer","Popup","onClose","transparent","animationType","paddingBottom","bottom","PostFilter","selected","onSelect","setVisible","feed","isSelected","includes","s","Header","add","Group","items","getKey","render","item","marginLeft","InputField","TextInput","Input","label","onChangeText","autoCorrect","secure","useTheme","keyboardType","autoCapitalize","secureTextEntry","placeholderTextColor","placeholder","Content","Dialog","renderSelect","search","create","allowClear","searchInput","setSeachInput","results","select","createItem","a","async","FlatList","keyExtractor","renderItem","back","actions","navigation","useNavigation","paddingTop","goBack","Ionicons","action","ScrollWrapper","ScrollView","ScrollContent","TouchableWithoutFeedback","ScrollPage","DotWrapper","Dot","Pager","total","dots","Array","fill","i","Gallery","setWidth","offset","setOffset","saveImage","url","download","FileSystem","Authorization","downloadAsync","result","Error","MediaLibrary","Alert","alert","useSaveImage","currentIndex","Math","round","lightboxVisible","setLightboxVisible","lightboxImages","currentMedia","currentAspect","Lightbox","images","imageIndex","onRequestClose","FooterComponent","dark","horizontal","scrollEventThrottle","snapToInterval","showsHorizontalScrollIndicator","decelerationRate","snapToAlignment","disableIntervalMomentum","onScroll","evt","nativeEvent","contentOffset","x","onLayout","currentWidth","layout","useCreateMedia","ids","file","FormData","append","fetch","method","response","ok","json","push","useCreatePost","useCreatePostMutation","createPostMutation","createMedia","params","useRemovePost","setLoading","refetch","useFeed","useRemovePostMutation","removePostMutation","removePost","removePostId","fullWidth","PostRow","post","menuVisible","setMenuVisible","creator","avatar","navigate","commentCount","username","Spacer","Item","ImageWrapper","AddImages","files","onUpdate","pickImage","ImagePicker","mediaTypes","All","quality","base64","cancelled","split","filename","match","exec","f","m","FeedInput","UserInput","users","NameValueInput","key","PushRegistation","pushToken","useRegisterPushNotificationMutation","registerPushMutation","useSetAvatar","useSetProfileAvatarMutation","setAvatarMutation","useProfile","AddPostScreen","refetchPosts","profileLoading","selectedFeed","setSelectedFeed","setMedia","setBody","createPost","adminFeeds","accessType","submit","useFocusEffect","Seperator","FeedScreen","selectedFeeds","setSelectedFeeds","userFeeds","columns","ceil","Dimensions","get","numColumns","ItemSeparatorComponent","refreshControl","RefreshControl","refreshing","onRefresh","useFeedQuery","feedId","log","useCreateFeed","useCreateFeedMutation","createFeedMutation","useAddUserToFeed","useAddUserToFeedMutation","addUserToFeedMutation","userId","useRemoveUserFromFeed","useRemoveUserFromFeedMutation","removeUserFromFeedMutation","useUsers","useUsersQuery","useSendInvite","useInviteProfileMutation","sendInviteMutation","email","ProfileScreen","logout","createFeed","addFeedVisible","setAddFeedVisible","inviteVisible","setInviteVisible","inviteEmail","setInviteEmail","feedName","setFeedName","setAvatar","sendInvite","saveAddFeed","sendInviteAction","admin","accessTypes","FeedEditScreen","route","removeUserFromFeed","addUserToFeed","addUserVisible","setAddUserVisible","addUserSelected","setAddUserSelected","addUserAccessType","setAddUserAccessType","addUser","removeUser","relation","user","Text","LoginScreen","login","setError","setDomain","setUsername","password","setPassword","doLogin","catch","err","image","AcceptInvitationScreen","inviteCode","acceptInvitation","doAccept","CommentsScreen","setContent","useCreateCommentMutation","createCommentMutation","usePostQuery","postId","createComment","inverted","comments","reverse","RootStack","createNativeStackNavigator","TabStack","createBottomTabNavigator","ProfileStack","Profile","Navigator","screenOptions","headerShown","Screen","component","Tabs","canCreate","find","tabBarActiveTintColor","tabBarIcon","focused","Root","contentStyle","backgroundColor","presentation","initialParams","Router","colorScheme","baseTheme","DarkTheme","DefaultTheme","navigationTheme","card","NavigationContainer","linking","dsn","enableInExpoDevelopment","debug","getSizeWithHeaders","success","failed","App","_useColorScheme","StatusBar","ServerProvider","setPushToken","ready","setReady","AsyncStorage","removeItem","Device","Notifications","existingStatus","status","finalStatus","importance","MAX","vibrationPattern","lightColor","registerForPushNotificationsAsync","then","secret","authUrl","Accept","JSON","stringify","query","createAuthToken","setItem","invitation","rawInvite","Buffer","from","parse","creationToken","getItem","nextContext","configResponse","run","BaseText","bold","Jumbo","setUrl","arrayBuffer","binaryData","contentType"],"mappings":"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","file":"static/js/app.ed0ccbfe.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ninterface Props {\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  children?: ReactNode;\n  onPress?: () => any;\n  background?: string;\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}\n\nconst Wrapper = styled.View<{\n  background?: string;\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  theme: Theme;\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}>`\n  padding: ${({ theme }) => theme.margins.medium / 2}px\n    ${({ theme }) => theme.margins.medium / 2}px;\n  ${({ background }) => (background ? `background: ${background};` : '')}\n  ${({ flex }) => (flex ? `flex: ${flex};` : '')}\n  flex-direction: ${({ direction }) => (direction ? direction : 'row')};\n  align-items: ${({ align }) => (align ? align : 'center')};\n`;\n\nconst Touch = styled.TouchableOpacity``;\n\nconst Cell: React.FC<Props> = ({ children, onPress, ...props }) => {\n  const {\n    accessibilityLabel,\n    accessibilityRole,\n    accessibilityHint,\n    ...others\n  } = props;\n  const node = <Wrapper {...others}>{children}</Wrapper>;\n  if (onPress) {\n    return (\n      <Touch\n        accessible\n        accessibilityRole={accessibilityRole || 'button'}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        onPress={onPress}\n      >\n        {node}\n      </Touch>\n    );\n  }\n  return node;\n};\n\nexport { Cell };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { Title1, Body1, Overline } from '#/typography';\nimport { Cell } from './Cell';\nimport { PlaceholderIcon } from './PlaceholderIcon';\n\ninterface Props {\n  background?: string;\n  top?: ReactNode;\n  left?: ReactNode;\n  right?: ReactNode;\n  title?: ReactNode;\n  overline?: ReactNode;\n  description?: ReactNode;\n  children?: ReactNode;\n  onPress?: () => any;\n}\n\nconst Children = styled.View``;\n\nconst componentOrString = (\n  input: ReactNode,\n  Component: React.FC<{ children: ReactNode }>\n) => {\n  if (!input) {\n    return null;\n  }\n  if (typeof input === 'string') {\n    return <Component>{input}</Component>;\n  }\n  return input;\n};\n\nconst Row: React.FC<Props> = ({\n  background,\n  top,\n  left,\n  right,\n  title,\n  overline,\n  description,\n  children,\n  onPress,\n}) => (\n  <Cell background={background} onPress={onPress}>\n    {left}\n    <Cell flex={1} direction=\"column\" align=\"stretch\">\n      {!!top}\n      {componentOrString(overline, Overline)}\n      {componentOrString(title, Title1)}\n      {componentOrString(description, Body1)}\n      {!!children && <Children>{children}</Children>}\n    </Cell>\n    {right}\n  </Cell>\n);\n\nexport { Row, Cell, PlaceholderIcon };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { Cell } from './Cell';\n\ninterface Props {\n  color?: string;\n  size?: number;\n  onPress?: () => void;\n}\n\nconst Icon = styled.View<{ size: number; color: string }>`\n  background: ${({ color }) => color};\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  border-radius: ${({ size }) => size / 4}px;\n`;\n\nconst PlaceholderIcon: React.FC<Props> = ({\n  color = 'red',\n  size = 24,\n  onPress,\n}) => (\n  <Cell onPress={onPress}>\n    <Icon color={color} size={size} />\n  </Cell>\n);\n\nexport { PlaceholderIcon };\n","import { NotificationContext } from \"#/context/notifications\"\nimport { useContext } from \"react\"\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  return context;\n};\n","module.exports = __webpack_public_path__ + \"static/media/tourist.e3fa36f8.png\";","import { NotificationInfo } from '#/context/notifications';\nimport { Cell, Row } from '#/components/Row';\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Icon } from '../Icon';\n\ntype Props = {\n  notification: NotificationInfo;\n  dismiss: () => void;\n}\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.destructive};\n  margin: 5px;\n  border-radius: 5px;\n`\n\nconst Notification: React.FC<Props> = ({ notification, dismiss }) => {\n  return (\n    <Wrapper>\n      <Row\n        description={notification.text}\n        right={\n          <Cell onPress={dismiss}>\n            <Icon name=\"x\" color=\"text\" />\n          </Cell>\n        }\n      />\n    </Wrapper>\n  );\n}\n\nexport { Notification };\n\n\n","import { Notification } from '#/components/notification';\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\n\ntype NotificationInfo = {\n  type: 'info' | 'error',\n  text: string;\n  autoHideAfter?: number;\n  actions?: {\n    title: string;\n    onPress: () => void;\n    dismissOnPress: boolean;\n  };\n}\n\ntype InternalNotification = NotificationInfo & {\n  id: number;\n}\n\ntype NotificationContextValue = {\n  show: (notification: NotificationInfo) => number;\n  dismiss: (id: number) => void;\n}\n\nconst NotificationContext = createContext<NotificationContextValue>(undefined as any);\n\nconst Wrapper = styled.View<{ top: number }>`\n  position: absolute;\n  top: ${({ top }) => top}px;\n  width: 100%;\n  z-index: 1000;\n`;\n\nlet nextId = 0;\n\nconst NotificationProvider: React.FC = ({ children }) => {\n  const [notifications, setNotifications] = useState<InternalNotification[]>([]);\n  const insets = useSafeAreaInsets();\n\n  const show = useCallback(\n    (notification: NotificationInfo) => {\n      const id = nextId++;\n      setNotifications(current => [...current, {...notification, id}]);\n      return id;\n    },\n    [setNotifications]\n  );\n\n  const dismiss = useCallback(\n    (id: number) => {\n      setNotifications(current => current.filter(c => c.id !== id));\n    },\n    [setNotifications],\n  );\n\n  const context = useMemo(\n    () => ({\n      show,\n      dismiss,\n    }),\n    [show, dismiss],\n  );\n\n  return (\n    <NotificationContext.Provider value={context}>\n      {notifications.length > 0 && (\n        <Wrapper top={insets.top}>\n          {notifications.map((notification, index) => (\n            <Notification dismiss={() => dismiss(notification.id)} key={index} notification={notification} />\n          ))}\n        </Wrapper>\n      )}\n      {children}\n    </NotificationContext.Provider>\n  )\n}\n\nexport type { NotificationInfo };\nexport { NotificationProvider, NotificationContext };\n","module.exports = __webpack_public_path__ + \"static/media/error.f81af091.png\";","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type CommentCreateParameters = {\n  content?: InputMaybe<Scalars['String']>;\n  post: Scalars['String'];\n};\n\nexport type CommentModel = {\n  __typename?: 'CommentModel';\n  content: Scalars['String'];\n  created: Scalars['DateTime'];\n  creator: UserModel;\n  id: Scalars['String'];\n  post: PostModel;\n};\n\nexport type FeedModel = {\n  __typename?: 'FeedModel';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  posts: Array<PostModel>;\n  users: Array<UserFeedRelationModel>;\n};\n\n\nexport type FeedModelPostsArgs = {\n  filter?: InputMaybe<PostFindParameters>;\n};\n\nexport type MediaModel = {\n  __typename?: 'MediaModel';\n  aspect?: Maybe<Scalars['Float']>;\n  contentType?: Maybe<Scalars['String']>;\n  created?: Maybe<Scalars['DateTime']>;\n  creator: UserModel;\n  filename?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  lowres?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Float']>;\n  size: Scalars['Float'];\n  type?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addUserToFeed: UserFeedRelationModel;\n  createAuthToken: Scalars['String'];\n  createComment: CommentModel;\n  createFeed: FeedModel;\n  createPost: PostModel;\n  inviteProfile: UserModel;\n  registerPushNotification: PushRegistrationModel;\n  removePost: Scalars['Boolean'];\n  removeUserFromFeed: Scalars['Boolean'];\n  setProfileAvatar: UserModel;\n};\n\n\nexport type MutationAddUserToFeedArgs = {\n  accessType: Scalars['String'];\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationCreateAuthTokenArgs = {\n  secret: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationCreateCommentArgs = {\n  params: CommentCreateParameters;\n};\n\n\nexport type MutationCreateFeedArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  params: PostCreateParameters;\n};\n\n\nexport type MutationInviteProfileArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterPushNotificationArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type MutationRemovePostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationRemoveUserFromFeedArgs = {\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationSetProfileAvatarArgs = {\n  mediaId?: InputMaybe<Scalars['String']>;\n};\n\nexport type PostCreateParameters = {\n  body?: InputMaybe<Scalars['String']>;\n  feed: Scalars['String'];\n  media: Array<Scalars['String']>;\n};\n\nexport type PostFindParameters = {\n  after?: InputMaybe<Scalars['DateTime']>;\n  feeds?: InputMaybe<Array<Scalars['String']>>;\n  limit?: InputMaybe<Scalars['Float']>;\n  offset?: InputMaybe<Scalars['Float']>;\n};\n\nexport type PostModel = {\n  __typename?: 'PostModel';\n  body?: Maybe<Scalars['String']>;\n  commentCount: Scalars['Float'];\n  comments: Array<CommentModel>;\n  created: Scalars['DateTime'];\n  creator?: Maybe<UserModel>;\n  feed: FeedModel;\n  id: Scalars['String'];\n  media: Array<MediaModel>;\n};\n\nexport type PushRegistrationModel = {\n  __typename?: 'PushRegistrationModel';\n  device?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  feed: FeedModel;\n  feeds: Array<FeedModel>;\n  post: PostModel;\n  posts: Array<PostModel>;\n  profile?: Maybe<UserModel>;\n  users: Array<UserModel>;\n};\n\n\nexport type QueryFeedArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostsArgs = {\n  filter: PostFindParameters;\n};\n\nexport type UserFeedRelationModel = {\n  __typename?: 'UserFeedRelationModel';\n  accessType: Scalars['String'];\n  feed: FeedModel;\n  user: UserModel;\n};\n\nexport type UserModel = {\n  __typename?: 'UserModel';\n  admin: Scalars['Boolean'];\n  avatar?: Maybe<Scalars['String']>;\n  feeds: Array<UserFeedRelationModel>;\n  id: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  username: Scalars['String'];\n};\n\nexport type CreateCommentMutationVariables = Exact<{\n  params: CommentCreateParameters;\n}>;\n\n\nexport type CreateCommentMutation = { __typename?: 'Mutation', createComment: { __typename?: 'CommentModel', id: string } };\n\nexport type FeedsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FeedsQuery = { __typename?: 'Query', feeds: Array<{ __typename?: 'FeedModel', id: string, name: string, posts: Array<{ __typename?: 'PostModel', id: string, body?: string | null, media: Array<{ __typename?: 'MediaModel', id: string }> }> }> };\n\nexport type FeedQueryVariables = Exact<{\n  feedId: Scalars['String'];\n}>;\n\n\nexport type FeedQuery = { __typename?: 'Query', feed: { __typename?: 'FeedModel', id: string, name: string, users: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, user: { __typename?: 'UserModel', id: string, name?: string | null, username: string } }> } };\n\nexport type CreateFeedMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateFeedMutation = { __typename?: 'Mutation', createFeed: { __typename?: 'FeedModel', id: string } };\n\nexport type AddUserToFeedMutationVariables = Exact<{\n  accessType: Scalars['String'];\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\n\nexport type AddUserToFeedMutation = { __typename?: 'Mutation', addUserToFeed: { __typename?: 'UserFeedRelationModel', accessType: string } };\n\nexport type RemoveUserFromFeedMutationVariables = Exact<{\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\n\nexport type RemoveUserFromFeedMutation = { __typename?: 'Mutation', removeUserFromFeed: boolean };\n\nexport type PostQueryVariables = Exact<{\n  postId: Scalars['String'];\n}>;\n\n\nexport type PostQuery = { __typename?: 'Query', post: { __typename?: 'PostModel', id: string, created: any, creator?: { __typename?: 'UserModel', id: string, name?: string | null, avatar?: string | null, username: string } | null, comments: Array<{ __typename?: 'CommentModel', id: string, content: string, created: any, creator: { __typename?: 'UserModel', username: string, name?: string | null, id: string, avatar?: string | null } }>, media: Array<{ __typename?: 'MediaModel', id: string, contentType?: string | null, lowres?: string | null, aspect?: number | null, order?: number | null, created?: any | null, type?: string | null }> } };\n\nexport type PostsQueryVariables = Exact<{\n  filter: PostFindParameters;\n}>;\n\n\nexport type PostsQuery = { __typename?: 'Query', posts: Array<{ __typename?: 'PostModel', id: string, body?: string | null, commentCount: number, created: any, creator?: { __typename?: 'UserModel', name?: string | null, username: string, avatar?: string | null } | null, media: Array<{ __typename?: 'MediaModel', id: string, aspect?: number | null, type?: string | null }> }> };\n\nexport type CreatePostMutationVariables = Exact<{\n  params: PostCreateParameters;\n}>;\n\n\nexport type CreatePostMutation = { __typename?: 'Mutation', createPost: { __typename?: 'PostModel', id: string } };\n\nexport type RemovePostMutationVariables = Exact<{\n  removePostId: Scalars['String'];\n}>;\n\n\nexport type RemovePostMutation = { __typename?: 'Mutation', removePost: boolean };\n\nexport type ProfileQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProfileQuery = { __typename?: 'Query', profile?: { __typename?: 'UserModel', id: string, username: string, name?: string | null, admin: boolean, avatar?: string | null, feeds: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, feed: { __typename?: 'FeedModel', id: string, name: string } }> } | null };\n\nexport type SetProfileAvatarMutationVariables = Exact<{\n  mediaId?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type SetProfileAvatarMutation = { __typename?: 'Mutation', setProfileAvatar: { __typename?: 'UserModel', id: string } };\n\nexport type InviteProfileMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type InviteProfileMutation = { __typename?: 'Mutation', inviteProfile: { __typename?: 'UserModel', id: string } };\n\nexport type RegisterPushNotificationMutationVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type RegisterPushNotificationMutation = { __typename?: 'Mutation', registerPushNotification: { __typename?: 'PushRegistrationModel', id: string } };\n\nexport type UsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'UserModel', id: string, name?: string | null, username: string, avatar?: string | null }> };\n\n\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($params: CommentCreateParameters!) {\n  createComment(params: $params) {\n    id\n  }\n}\n    `;\nexport type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, options);\n      }\nexport type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;\nexport type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;\nexport const FeedsDocument = gql`\n    query Feeds {\n  feeds {\n    id\n    name\n    posts {\n      id\n      body\n      media {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedsQuery__\n *\n * To run a query within a React component, call `useFeedsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFeedsQuery(baseOptions?: Apollo.QueryHookOptions<FeedsQuery, FeedsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FeedsQuery, FeedsQueryVariables>(FeedsDocument, options);\n      }\nexport function useFeedsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedsQuery, FeedsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FeedsQuery, FeedsQueryVariables>(FeedsDocument, options);\n        }\nexport type FeedsQueryHookResult = ReturnType<typeof useFeedsQuery>;\nexport type FeedsLazyQueryHookResult = ReturnType<typeof useFeedsLazyQuery>;\nexport type FeedsQueryResult = Apollo.QueryResult<FeedsQuery, FeedsQueryVariables>;\nexport const FeedDocument = gql`\n    query Feed($feedId: String!) {\n  feed(id: $feedId) {\n    id\n    name\n    users {\n      accessType\n      user {\n        id\n        name\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedQuery__\n *\n * To run a query within a React component, call `useFeedQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedQuery({\n *   variables: {\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useFeedQuery(baseOptions: Apollo.QueryHookOptions<FeedQuery, FeedQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n      }\nexport function useFeedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedQuery, FeedQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n        }\nexport type FeedQueryHookResult = ReturnType<typeof useFeedQuery>;\nexport type FeedLazyQueryHookResult = ReturnType<typeof useFeedLazyQuery>;\nexport type FeedQueryResult = Apollo.QueryResult<FeedQuery, FeedQueryVariables>;\nexport const CreateFeedDocument = gql`\n    mutation CreateFeed($name: String!) {\n  createFeed(name: $name) {\n    id\n  }\n}\n    `;\nexport type CreateFeedMutationFn = Apollo.MutationFunction<CreateFeedMutation, CreateFeedMutationVariables>;\n\n/**\n * __useCreateFeedMutation__\n *\n * To run a mutation, you first call `useCreateFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createFeedMutation, { data, loading, error }] = useCreateFeedMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateFeedMutation(baseOptions?: Apollo.MutationHookOptions<CreateFeedMutation, CreateFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateFeedMutation, CreateFeedMutationVariables>(CreateFeedDocument, options);\n      }\nexport type CreateFeedMutationHookResult = ReturnType<typeof useCreateFeedMutation>;\nexport type CreateFeedMutationResult = Apollo.MutationResult<CreateFeedMutation>;\nexport type CreateFeedMutationOptions = Apollo.BaseMutationOptions<CreateFeedMutation, CreateFeedMutationVariables>;\nexport const AddUserToFeedDocument = gql`\n    mutation AddUserToFeed($accessType: String!, $userId: String!, $feedId: String!) {\n  addUserToFeed(accessType: $accessType, userId: $userId, feedId: $feedId) {\n    accessType\n  }\n}\n    `;\nexport type AddUserToFeedMutationFn = Apollo.MutationFunction<AddUserToFeedMutation, AddUserToFeedMutationVariables>;\n\n/**\n * __useAddUserToFeedMutation__\n *\n * To run a mutation, you first call `useAddUserToFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddUserToFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addUserToFeedMutation, { data, loading, error }] = useAddUserToFeedMutation({\n *   variables: {\n *      accessType: // value for 'accessType'\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useAddUserToFeedMutation(baseOptions?: Apollo.MutationHookOptions<AddUserToFeedMutation, AddUserToFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddUserToFeedMutation, AddUserToFeedMutationVariables>(AddUserToFeedDocument, options);\n      }\nexport type AddUserToFeedMutationHookResult = ReturnType<typeof useAddUserToFeedMutation>;\nexport type AddUserToFeedMutationResult = Apollo.MutationResult<AddUserToFeedMutation>;\nexport type AddUserToFeedMutationOptions = Apollo.BaseMutationOptions<AddUserToFeedMutation, AddUserToFeedMutationVariables>;\nexport const RemoveUserFromFeedDocument = gql`\n    mutation RemoveUserFromFeed($userId: String!, $feedId: String!) {\n  removeUserFromFeed(userId: $userId, feedId: $feedId)\n}\n    `;\nexport type RemoveUserFromFeedMutationFn = Apollo.MutationFunction<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>;\n\n/**\n * __useRemoveUserFromFeedMutation__\n *\n * To run a mutation, you first call `useRemoveUserFromFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveUserFromFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeUserFromFeedMutation, { data, loading, error }] = useRemoveUserFromFeedMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useRemoveUserFromFeedMutation(baseOptions?: Apollo.MutationHookOptions<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>(RemoveUserFromFeedDocument, options);\n      }\nexport type RemoveUserFromFeedMutationHookResult = ReturnType<typeof useRemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationResult = Apollo.MutationResult<RemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationOptions = Apollo.BaseMutationOptions<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>;\nexport const PostDocument = gql`\n    query Post($postId: String!) {\n  post(id: $postId) {\n    id\n    creator {\n      id\n      name\n      avatar\n      username\n    }\n    created\n    comments {\n      id\n      creator {\n        username\n        name\n        id\n        avatar\n      }\n      content\n      created\n    }\n    media {\n      id\n      contentType\n      lowres\n      aspect\n      order\n      created\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts($filter: PostFindParameters!) {\n  posts(filter: $filter) {\n    id\n    body\n    commentCount\n    creator {\n      name\n      username\n      avatar\n    }\n    created\n    media {\n      id\n      aspect\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const CreatePostDocument = gql`\n    mutation CreatePost($params: PostCreateParameters!) {\n  createPost(params: $params) {\n    id\n  }\n}\n    `;\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, options);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const RemovePostDocument = gql`\n    mutation RemovePost($removePostId: String!) {\n  removePost(id: $removePostId)\n}\n    `;\nexport type RemovePostMutationFn = Apollo.MutationFunction<RemovePostMutation, RemovePostMutationVariables>;\n\n/**\n * __useRemovePostMutation__\n *\n * To run a mutation, you first call `useRemovePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemovePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removePostMutation, { data, loading, error }] = useRemovePostMutation({\n *   variables: {\n *      removePostId: // value for 'removePostId'\n *   },\n * });\n */\nexport function useRemovePostMutation(baseOptions?: Apollo.MutationHookOptions<RemovePostMutation, RemovePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemovePostMutation, RemovePostMutationVariables>(RemovePostDocument, options);\n      }\nexport type RemovePostMutationHookResult = ReturnType<typeof useRemovePostMutation>;\nexport type RemovePostMutationResult = Apollo.MutationResult<RemovePostMutation>;\nexport type RemovePostMutationOptions = Apollo.BaseMutationOptions<RemovePostMutation, RemovePostMutationVariables>;\nexport const ProfileDocument = gql`\n    query Profile {\n  profile {\n    id\n    username\n    name\n    admin\n    avatar\n    feeds {\n      feed {\n        id\n        name\n      }\n      accessType\n    }\n  }\n}\n    `;\n\n/**\n * __useProfileQuery__\n *\n * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProfileQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProfileQuery(baseOptions?: Apollo.QueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n      }\nexport function useProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n        }\nexport type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;\nexport type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;\nexport type ProfileQueryResult = Apollo.QueryResult<ProfileQuery, ProfileQueryVariables>;\nexport const SetProfileAvatarDocument = gql`\n    mutation SetProfileAvatar($mediaId: String) {\n  setProfileAvatar(mediaId: $mediaId) {\n    id\n  }\n}\n    `;\nexport type SetProfileAvatarMutationFn = Apollo.MutationFunction<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>;\n\n/**\n * __useSetProfileAvatarMutation__\n *\n * To run a mutation, you first call `useSetProfileAvatarMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProfileAvatarMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProfileAvatarMutation, { data, loading, error }] = useSetProfileAvatarMutation({\n *   variables: {\n *      mediaId: // value for 'mediaId'\n *   },\n * });\n */\nexport function useSetProfileAvatarMutation(baseOptions?: Apollo.MutationHookOptions<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>(SetProfileAvatarDocument, options);\n      }\nexport type SetProfileAvatarMutationHookResult = ReturnType<typeof useSetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationResult = Apollo.MutationResult<SetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationOptions = Apollo.BaseMutationOptions<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>;\nexport const InviteProfileDocument = gql`\n    mutation InviteProfile($email: String!) {\n  inviteProfile(email: $email) {\n    id\n  }\n}\n    `;\nexport type InviteProfileMutationFn = Apollo.MutationFunction<InviteProfileMutation, InviteProfileMutationVariables>;\n\n/**\n * __useInviteProfileMutation__\n *\n * To run a mutation, you first call `useInviteProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInviteProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [inviteProfileMutation, { data, loading, error }] = useInviteProfileMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useInviteProfileMutation(baseOptions?: Apollo.MutationHookOptions<InviteProfileMutation, InviteProfileMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<InviteProfileMutation, InviteProfileMutationVariables>(InviteProfileDocument, options);\n      }\nexport type InviteProfileMutationHookResult = ReturnType<typeof useInviteProfileMutation>;\nexport type InviteProfileMutationResult = Apollo.MutationResult<InviteProfileMutation>;\nexport type InviteProfileMutationOptions = Apollo.BaseMutationOptions<InviteProfileMutation, InviteProfileMutationVariables>;\nexport const RegisterPushNotificationDocument = gql`\n    mutation RegisterPushNotification($token: String!) {\n  registerPushNotification(token: $token) {\n    id\n  }\n}\n    `;\nexport type RegisterPushNotificationMutationFn = Apollo.MutationFunction<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>;\n\n/**\n * __useRegisterPushNotificationMutation__\n *\n * To run a mutation, you first call `useRegisterPushNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterPushNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerPushNotificationMutation, { data, loading, error }] = useRegisterPushNotificationMutation({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useRegisterPushNotificationMutation(baseOptions?: Apollo.MutationHookOptions<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>(RegisterPushNotificationDocument, options);\n      }\nexport type RegisterPushNotificationMutationHookResult = ReturnType<typeof useRegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationResult = Apollo.MutationResult<RegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationOptions = Apollo.BaseMutationOptions<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    name\n    username\n    avatar\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n      }\nexport function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;","import { ApolloError } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { useNotifications } from \"./notifications\";\n\nexport const useErrorNotification = (error?: ApolloError) => {\n  const { show, dismiss } = useNotifications();\n\n  useEffect(\n    () => {\n      if (!error) {\n        return;\n      }\n      console.error(error);\n      const id = show({\n        type: 'error',\n        text: error.message,\n      });\n\n      return () => {\n        dismiss(id);\n      };\n    },\n    [error, show, dismiss],\n  )\n}\n","\nimport { useProfileQuery } from '#/hooks/graphql';\nimport { useErrorNotification } from '#/hooks/utils';\nimport { createContext, useMemo, useState } from 'react';\n\ntype BaseType = ReturnType<typeof useProfileQuery>;\n\ntype ProfileContextValue = BaseType & {\n  profile: Exclude<BaseType['data'], undefined>['profile'];\n  feeds: Exclude<Exclude<BaseType['data'], undefined>['profile'], null | undefined>['feeds'];\n}\n\nconst ProfileContext = createContext<ProfileContextValue>(undefined as any);\n\nconst ProfileProvider: React.FC = ({ children }) => {\n  const { data, ...props } = useProfileQuery({\n    variables: {\n    },\n  });\n  useErrorNotification(props.error);\n\n  const feeds = useMemo(() => data?.profile?.feeds || [], [data]);\n  const profile = useMemo(() => data?.profile, [data]);\n\n  const context = useMemo(\n    () => ({\n      ...props,\n      data,\n      feeds,\n      profile,\n    }),\n    [props, data, feeds],\n  )\n\n  return (\n    <ProfileContext.Provider value={context}>\n      {children}\n    </ProfileContext.Provider>\n  );\n}\n\nexport { ProfileContext, ProfileProvider };\n","import { usePostsQuery } from '#/hooks/graphql';\nimport { useErrorNotification } from '#/hooks/utils';\nimport { createContext, useMemo, useState } from 'react';\n\ntype BaseType = ReturnType<typeof usePostsQuery>;\n\ntype HomeContextValue = BaseType & {\n  posts: Exclude<BaseType['data'], undefined>['posts'];\n  feeds: string[];\n  setFeeds: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nconst HomeContext = createContext<HomeContextValue>(undefined as any);\n\nconst HomeProvider: React.FC = ({ children }) => {\n  const [feeds, setFeeds] = useState<string[]>([]);\n  const { data, ...props } = usePostsQuery({\n    variables: {\n      filter: {\n        feeds: feeds.length > 0 ? feeds : undefined,\n      },\n    },\n  });\n  useErrorNotification(props.error);\n\n  const posts = useMemo(() => data?.posts || [], [data]);\n\n  const context = useMemo(\n    () => ({\n      ...props,\n      data,\n      feeds,\n      posts,\n      setFeeds,\n    }),\n    [props, data, feeds, setFeeds],\n  )\n\n  return (\n    <HomeContext.Provider value={context}>\n      {children}\n    </HomeContext.Provider>\n  );\n}\n\nexport { HomeContext, HomeProvider };\n","import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport React, { useContext, useMemo } from 'react';\nimport { ServerContext } from '../server';\nimport { ProfileProvider } from '../profile';\nimport { HomeProvider } from '../home';\n\nconst GraphQLProvider: React.FC = ({ children }) => {\n  const { token, domain } = useContext(ServerContext);\n  const apolloClient = useMemo(() => {\n    if (!domain) {\n      return undefined;\n    }\n    const link = createHttpLink({\n      uri: `${domain}/graphql`,\n    });\n    const authLink = setContext((_, { headers }) => {\n      return {\n        headers: {\n          ...headers,\n          authorization: `bearer ${token}`,\n        },\n      };\n    });\n    return new ApolloClient({\n      cache: new InMemoryCache(),\n      link: authLink.concat(link),\n    });\n  }, [token, domain]);\n\n  if (!apolloClient) {\n    return <>{children}</>;\n  }\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      <ProfileProvider>\n        <HomeProvider>\n          {children}\n        </HomeProvider>\n      </ProfileProvider>\n    </ApolloProvider>\n  );\n};\n\nexport { GraphQLProvider };\n","import Theme from './Theme';\n\nconst lightTheme: Theme = {\n  colors: {\n    primary: '#1abc9c',\n    icon: '#1abc9c',\n    destructive: '#e74c3c',\n    shade: '#ededed',\n    input: '#ddd',\n    secondary: 'blue',\n    shadow: '#000',\n    background: '#fff',\n    text: '#000',\n    textShade: '#999',\n  },\n  sizes: {\n    corners: 5,\n    icons: 24,\n  },\n  margins: {\n    small: 8,\n    medium: 16,\n    large: 24,\n  },\n  font: {\n    baseSize: 14,\n  },\n};\n\nexport default lightTheme;\n","import Theme from './Theme';\nimport light from './light';\n\nconst darkTheme: Theme = {\n  ...light,\n  colors: {\n    ...light.colors,\n    primary: '#e67e22',\n    input: '#333',\n    icon: '#e67e22',\n    background: '#151515',\n    shadow: '#000',\n    secondary: 'blue',\n    shade: '#000',\n    text: '#fff',\n    textShade: '#666',\n  },\n};\n\nexport default darkTheme;\n","export const linkingConfig = {\n  prefixes: ['pictoroma://'],\n  screens: {\n    AcceptInvitation: 'login/accept-invite',\n  },\n};\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { BlurView } from 'expo-blur';\n\nconst Wrapper = styled(BlurView)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 100;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Activity = styled.ActivityIndicator`\n  \n`\n\n\nconst OverlayLoader: React.FC<{}> = () => (\n  <Wrapper intensity={20}>\n    <Activity /> \n  </Wrapper>\n);\n\nexport { OverlayLoader };\n","import styled from 'styled-components/native';\nimport { Icon } from '../Icon';\nimport { Image } from '../Image';\n\ntype Props = {\n  mediaId?: string;\n  onPress?: () => void;\n};\n\nconst Touchable = styled.TouchableOpacity``;\nconst Wrapper = styled.View`\n  position: relative;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Avatar: React.FC<Props> = ({ mediaId, onPress }) => {\n  const content = (\n    <Wrapper>\n      {mediaId ? (\n        <Image media={{ aspect: 1, id: mediaId }} />\n      ) : (\n        <Icon name=\"user\" />\n      )}\n    </Wrapper>\n  );\n\n  if (onPress) {\n    return <Touchable onPress={onPress}>{content}</Touchable>;\n  }\n  return content;\n};\n\nexport { Avatar };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native';\nimport { Theme } from '#/theme';\nimport { Link } from '#/typography';\n\ninterface Props {\n  title: string;\n  onPress?: () => any;\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  type?: 'primary' | 'secondary' | 'destructive';\n}\n\nconst Touch = styled.TouchableOpacity``;\n\nconst getColors = (type: Props['type'], theme: Theme) => {\n  if (type === 'secondary') {\n    return { bg: theme.colors.secondary, fg: '#fff' };\n  }\n  if (type === 'destructive') {\n    return { bg: 'transparent', fg: theme.colors.destructive };\n  }\n  return { bg: theme.colors.primary, fg: '#fff' };\n};\n\nconst Wrapper = styled.View<{\n  theme: Theme;\n  type: Props['type'];\n}>`\n  background: ${({ theme, type }) => getColors(type, theme).bg};\n  padding: ${({ theme }) => theme.margins.small}px;\n  border-radius: ${({ theme }) => theme.sizes.corners}px;\n  align-items: center;\n`;\n\nconst StyledLink = styled<{\n  theme: Theme;\n  type: Props['type'];\n}>(Link)`\n  color: ${({ theme, type }) => getColors(type, theme).fg};\n  font-weight: bold;\n`;\n\nconst Button: React.FC<Props> = ({\n  title,\n  onPress,\n  accessibilityHint,\n  accessibilityRole,\n  accessibilityLabel,\n  type,\n}) => (\n  <Touch\n    onPress={onPress}\n    accessible\n    accessibilityHint={accessibilityHint}\n    accessibilityRole={accessibilityRole}\n    accessibilityLabel={accessibilityLabel}\n  >\n    <Wrapper type={type}>\n      <StyledLink type={type}>{title}</StyledLink>\n    </Wrapper>\n  </Touch>\n);\n\nexport { Button };\n","import ReactDOM from 'react-dom';\nimport React, { useMemo, useEffect, ReactNode } from 'react';\n\ninterface Props {\n  visible: boolean;\n  children: ReactNode;\n}\n\nconst Modal: React.FC<Props> = ({ visible, children }) => {\n  const elm = useMemo(() => {\n    const newElm = document.createElement('div');\n    newElm.style.position = 'fixed';\n    newElm.style.display = 'flex';\n    newElm.style.flexDirection = 'column';\n    newElm.style.left = '0px';\n    newElm.style.top = '0px';\n    newElm.style.width = '100%';\n    newElm.style.height = '100%';\n    newElm.style.transition = 'transform 0.3s';\n    newElm.style.transform = 'translateY(100%)';\n    return newElm;\n  }, []);\n  useEffect(() => {\n    document.body.appendChild(elm);\n    return () => {\n      document.body.removeChild(elm);\n    };\n  }, [elm]);\n  useEffect(() => {\n    if (visible) {\n      elm.style.transform = 'translateY(0)';\n    } else {\n      elm.style.transform = 'translateY(100%)';\n    }\n  }, [elm, visible]);\n\n  return ReactDOM.createPortal(<>{children}</>, elm);\n};\n\nexport { Modal };\n","import React, { useState, useEffect, ReactNode } from 'react';\nimport * as Sentry from 'sentry-expo';\nimport styled from 'styled-components/native';\nimport { Keyboard, Platform } from 'react-native';\nimport { OverlayLoader } from '../loaders';\nimport errorImage from '#/../assets/images/error.png';\nimport { Body1, Overline } from '#/typography';\nimport { Button } from '../Button';\n\nconst KeyboardAvoiding = styled.KeyboardAvoidingView`\n  flex: 1;\n`;\n\nconst Pressable = styled.Pressable`\n  flex: 1;\n`;\n\nconst ErrorWrapper = styled.View`\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n`;\n\nconst ErrorImage = styled.Image`\n  width: 150px;\n  height: 150px;\n`;\n\ntype Props = {\n  children: ReactNode;\n  loading?: boolean;\n};\n\ntype ErrorBoundState = {\n  hasError: boolean;\n  error?: any;\n};\n\ntype ErrorBoundProps = {\n  children: ReactNode;\n};\n\nclass ErrorBoundary extends React.Component<ErrorBoundProps, ErrorBoundState> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    Sentry.Native.captureException(error, {\n      extra: errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <ErrorWrapper>\n          <ErrorImage source={errorImage} />\n          <Body1>An error has occured</Body1>\n          <Overline>{this.state.error?.toString()}</Overline>\n          <Button\n            onPress={() => this.setState({ hasError: false, error: undefined })}\n            title=\"Retry\"\n          />\n        </ErrorWrapper>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nconst Page: React.FC<Props> = ({ children, loading }) => {\n  const [keyboardShown, setKeyboardShown] = useState(false);\n  useEffect(() => {\n    const keyboardDidShow = () => setKeyboardShown(true);\n    const keyboardDidHide = () => setKeyboardShown(false);\n    const show = Keyboard.addListener('keyboardDidShow', keyboardDidShow);\n    const hide = Keyboard.addListener('keyboardDidHide', keyboardDidHide);\n\n    return () => {\n      show.remove();\n      hide.remove();\n    };\n  }, []);\n  return (\n    <Pressable disabled={!keyboardShown} onPress={() => Keyboard.dismiss()}>\n      <KeyboardAvoiding behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        {loading && <OverlayLoader />}\n        <ErrorBoundary>{children}</ErrorBoundary>\n      </KeyboardAvoiding>\n    </Pressable>\n  );\n};\n\nexport { Page };\n","import React, { ReactNode } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\nimport { Icon } from '#/components/Icon';\nimport { Modal } from '#/components/Modal';\nimport { Row, Cell } from '#/components/Row';\nimport { Page } from '#/components/Page';\n\ninterface Props {\n  visible: boolean;\n  onClose?: () => void;\n  children: ReactNode;\n}\n\nconst Top = styled.Pressable`\n  flex: 1;\n`;\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.background};\n  width: 100%;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-offset: 0 0;\n  shadow-opacity: 1;\n  shadow-radius: 200px;\n  border-radius: 12px;\n  margin-bottom: -12px;\n`;\n\nconst Outer = styled.View`\n  flex: 1;\n`;\n\nconst Popup: React.FC<Props> = ({ visible, children, onClose }) => {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Modal visible={visible} transparent animationType=\"slide\">\n      <Page>\n        <Outer>\n          <Top onPress={onClose} />\n          <Wrapper style={{ paddingBottom: insets.bottom + 12 }}>\n            <Row\n              right={\n                <Cell onPress={onClose}>\n                  <Icon name=\"x-circle\" />\n                </Cell>\n              }\n            />\n            {children}\n          </Wrapper>\n        </Outer>\n      </Page>\n    </Modal>\n  );\n};\n\nexport { Popup };\n","import React, { useState } from 'react';\nimport { Button } from '#/components/Button';\nimport { Icon } from '#/components/Icon';\nimport { Popup } from '#/components/Popup';\nimport { Cell, Row } from '#/components/Row';\n\ninterface PostFilterProps {\n  selected?: string[];\n  feeds?: {\n    id: string;\n    name: string;\n  }[];\n  onSelect: (ids: string[]) => void;\n}\nconst PostFilter: React.FC<PostFilterProps> = ({\n  selected = [],\n  feeds = [],\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Cell onPress={() => setVisible(true)}>\n        <Icon name=\"filter\" color={selected.length > 0 ? 'primary' : 'text'} />\n      </Cell>\n      <Popup visible={visible} onClose={() => setVisible(false)}>\n        {feeds.map(feed => {\n          const isSelected = selected.includes(feed.id);\n          return (\n            <Row\n              key={feed.id}\n              onPress={\n                isSelected\n                  ? () => onSelect(selected.filter(s => s !== feed.id))\n                  : () => onSelect([...selected, feed.id])\n              }\n              left={\n                <Cell>\n                  <Icon name={isSelected ? 'check-circle' : 'circle'} />\n                </Cell>\n              }\n              title={feed.name}\n            />\n          );\n        })}\n        {selected.length > 0 && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => onSelect([])} />\n          </Row>\n        )}\n      </Popup>\n    </>\n  );\n};\n\nexport { PostFilter };\n","import React, { ReactNode } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Row, Cell } from './index';\n\ninterface Props {\n  title: string;\n  add?: () => void;\n  onPress?: () => void;\n  left?: ReactNode;\n}\n\nfunction Header({ title, add, onPress, left }: Props) {\n  return (\n    <Row\n      onPress={onPress}\n      left={left}\n      title={title}\n      right={\n        add && (\n          <Cell onPress={add}>\n            <Icon name=\"plus-circle\" size={18} />\n          </Cell>\n        )\n      }\n    />\n  );\n}\n\nexport { Header };\n","import React, { Fragment, ReactNode, useState } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Header } from '#/components/Row/Header';\nimport styled from 'styled-components/native';\nimport { Row, Cell } from '#/components/Row';\nimport { Body1 } from '#/typography';\n\ninterface ListProps<T> {\n  title: string;\n  items: T[];\n  getKey: (item: T) => any;\n  render: (item: T) => ReactNode;\n  add?: () => void;\n}\n\ninterface ChildProps {\n  title: string;\n  add?: () => void;\n  children?: ReactNode;\n}\n\nconst Wrapper = styled.View`\n  border-radius: 7px;\n  background: ${({ theme }) => theme.colors.background};\n  shadow-offset: 0px;\n  shadow-opacity: 0.1;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-radius: 5px;\n`;\n\nfunction Group<T = any>(props: ListProps<T> | ChildProps) {\n  const [visible, setVisible] = useState(true);\n  const { title, items, getKey, render, add, children } =\n    props as ListProps<T> & ChildProps;\n  return (\n    <Row>\n      <Wrapper>\n        <Header\n          left={\n            <Icon name={visible ? 'chevron-down' : 'chevron-up'} size={18} />\n          }\n          title={title}\n          add={add}\n          onPress={() => setVisible(!visible)}\n        />\n        {visible &&\n          items &&\n          items.map(item => (\n            <Fragment key={getKey(item)}>{render(item)}</Fragment>\n          ))}\n        {visible && children}\n        {visible && !children && (!items || items.length === 0) && (\n          <Row\n            left={\n              <Cell>\n                <Icon color=\"textShade\" name=\"maximize\" />\n              </Cell>\n            }\n          >\n            <Body1 style={{ marginLeft: 10 }} color=\"textShade\">\n              Empty\n            </Body1>\n          </Row>\n        )}\n      </Wrapper>\n    </Row>\n  );\n}\n\nexport { Group };\n","import React from 'react';\nimport { KeyboardType } from 'react-native';\nimport styled, { useTheme } from 'styled-components/native';\n\ninterface Props {\n  label: string;\n  value: string;\n  onChangeText?: (text: string) => any;\n  type?: KeyboardType;\n  autoCorrect?: boolean;\n  secure?: boolean;\n}\n\nconst InputField = styled.TextInput`\n  color: ${({ theme }) => theme.colors.text};\n  padding: ${({ theme }) => theme.margins.small}px 0;\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n  width: 100%;\n`;\n\nconst Input: React.FC<Props> = ({\n  label,\n  value,\n  onChangeText,\n  type,\n  autoCorrect,\n  secure,\n}) => {\n  const theme = useTheme();\n  return (\n    <InputField\n      value={value}\n      keyboardType={type}\n      autoCapitalize={'none'}\n      autoCorrect={autoCorrect}\n      secureTextEntry={secure}\n      placeholderTextColor={theme.colors.textShade}\n      placeholder={label}\n      onChangeText={onChangeText}\n    />\n  );\n};\n\nexport { Input };\n","import React, { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { Popup } from '#/components/Popup';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Row } from '#/components/Row';\nimport { Button } from '#/components/Button';\n\ninterface Props<T> {\n  visible: boolean;\n  onClose: () => void;\n  selected?: T;\n  allowClear?: boolean;\n  items: T[];\n  onSelect: (item?: T) => void;\n  renderSelect: (item: T) => ReactNode;\n  getKey: (item: T) => any;\n  search?: (term: string, items: T[]) => T[];\n  create?: (term: string) => Promise<T>;\n}\n\nconst Touch = styled.TouchableOpacity``;\nconst Content = styled.View`\n  min-height: 40%;\n`;\n\nfunction Dialog<T>({\n  visible,\n  onClose,\n  items,\n  onSelect,\n  renderSelect,\n  getKey,\n  search,\n  create,\n  allowClear,\n}: Props<T>) {\n  const [searchInput, setSeachInput] = useState('');\n  const results = useMemo(() => {\n    if (!search || !searchInput) {\n      return items;\n    }\n    return search(searchInput, items);\n  }, [items, searchInput, search]);\n  const hide = useCallback(() => {\n    setSeachInput('');\n    onClose();\n  }, [setSeachInput, onClose]);\n\n  const select = useCallback(\n    (item: T) => {\n      onSelect(item);\n      hide();\n    },\n    [onSelect, hide]\n  );\n  const createItem = useCallback(async () => {\n    if (!create) {\n      return;\n    }\n    const item = await create(searchInput);\n    onSelect(item);\n    hide();\n  }, [create, searchInput, hide]);\n  return (\n    <Popup visible={visible} onClose={hide}>\n      {search && (\n        <Row>\n          <Input\n            label=\"Search\"\n            value={searchInput}\n            onChangeText={setSeachInput}\n          />\n        </Row>\n      )}\n      <Content>\n        {create && results.length === 0 && searchInput && (\n          <Row>\n            <Button title={`Create ${searchInput}`} onPress={createItem} />\n          </Row>\n        )}\n        {results.length > 0 && (\n          <FlatList\n            data={results}\n            keyExtractor={getKey}\n            style={{ flex: 1 }}\n            renderItem={({ item }) => (\n              <Touch onPress={() => select(item)}>{renderSelect(item)}</Touch>\n            )}\n          />\n        )}\n        {allowClear && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => select(undefined)} />\n          </Row>\n        )}\n      </Content>\n    </Popup>\n  );\n}\n\nexport { Dialog };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Row, Cell } from '#/components/Row';\nimport { Button } from '#/components/Button';\nimport { Jumbo } from '#/typography';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\ninterface Props {\n  title: string;\n  back?: boolean;\n  actions?: {\n    title: string;\n    onPress?: () => any;\n  }[];\n  right?: ReactNode;\n}\n\nconst Wrapper = styled.View``;\n\nconst Header: React.FC<Props> = ({ title, back, actions, right }) => {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Wrapper style={{ paddingTop: insets.top }}>\n      <Row\n        left={\n          !!back && (\n            <Cell onPress={() => navigation.goBack()}>\n              <Ionicons name=\"arrow-back-circle\" size={26} />\n            </Cell>\n          )\n        }\n        right={\n          (actions || right) && (\n            <>\n              {actions &&\n                actions.map(action => (\n                  <Button\n                    key={action.title}\n                    title={action.title}\n                    onPress={action.onPress}\n                  />\n                ))}\n              {right}\n            </>\n          )\n        }\n      >\n        <Jumbo>{title}</Jumbo>\n      </Row>\n    </Wrapper>\n  );\n};\n\nexport { Header };\n","import styled, { ThemeProvider } from 'styled-components/native';\nimport ImageView from 'react-native-image-viewing';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\nimport { Image } from '../Image';\nimport { Cell, Row } from '../Row';\nimport { useContext, useMemo, useState } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Icon } from '../Icon';\nimport { dark } from '#/theme';\nimport { useSaveImage } from './save';\n\nconst ScrollWrapper = styled.ScrollView<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\n\nconst ScrollContent = styled.View`\n  flex-direction: row;\n`;\n\nconst Touchable = styled.TouchableWithoutFeedback``;\n\nconst ScrollPage = styled.View<{\n  width: number;\n}>`\n  width: ${({ width }) => width}px;\n`;\n\nconst Wrapper = styled.View`\n  border-radius: 5px;\n  overflow: hidden;\n`;\n\ntype PagerProps = {\n  current: number;\n  total: number;\n};\n\nconst DotWrapper = styled.View`\n  margin-top: 10px;\n  flex-direction: row;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Dot = styled.View<{\n  selected: boolean;\n}>`\n  width: 6px;\n  height: 6px;\n  background: ${({ selected, theme }) => (selected ? theme.colors.primary : '#ccc')};\n  margin: 0 5px;\n  border-radius: 3px;\n`;\n\nconst Pager: React.FC<PagerProps> = ({ current, total }) => {\n  const dots = useMemo(\n    () => new Array(total).fill(undefined).map((_, i) => i),\n    [total]\n  );\n\n  return (\n    <DotWrapper>\n      {dots.map(i => (\n        <Dot key={i} selected={i === current} />\n      ))}\n    </DotWrapper>\n  );\n};\n\ntype GalleryProps = {\n  media: DeepPartial<MediaModel[]>;\n};\n\nconst Gallery: React.FC<GalleryProps> = ({ media }) => {\n  const [width, setWidth] = useState(0);\n  const [offset, setOffset] = useState(0);\n  const saveImage = useSaveImage();\n  const { domain, token } = useContext(ServerContext);\n  const currentIndex = useMemo(\n    () => Math.round(offset / width) || 0,\n    [offset, width]\n  );\n  const [lightboxVisible, setLightboxVisible] = useState(false);\n  const lightboxImages = useMemo(\n    () =>\n      media.map(item => ({\n        uri: `${domain}/api/media/${item?.id}`,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })),\n    [domain, token, media]\n  );\n  const currentMedia = useMemo(\n    () => media[currentIndex],\n    [media, currentIndex]\n  );\n  const currentAspect = useMemo(\n    () => currentMedia?.aspect || 1, // use current media aspect\n    [currentMedia]\n  );\n\n  if (media.length === 0) {\n    return <></>;\n  }\n  const Lightbox = () => (\n    <ImageView\n      images={lightboxImages}\n      imageIndex={currentIndex}\n      visible={lightboxVisible}\n      onRequestClose={() => setLightboxVisible(false)}\n      FooterComponent={() => (\n        <ThemeProvider theme={dark}>\n          <Row\n            right={\n              <Cell onPress={() => saveImage(lightboxImages[currentIndex].uri)}>\n                <Icon name=\"download\" />\n              </Cell>\n            }\n          />\n          <Row />\n        </ThemeProvider>\n      )}\n    />\n  );\n  if (media.length === 1) {\n    return (\n      <Row>\n        <Lightbox />\n        <Touchable onPress={() => setLightboxVisible(true)}>\n          <Wrapper>\n            <Image media={media[0]!} />\n          </Wrapper>\n        </Touchable>\n      </Row>\n    );\n  }\n\n  return (\n    <Row>\n      <Lightbox />\n      <Wrapper>\n        <ScrollWrapper\n          horizontal\n          scrollEventThrottle={16}\n          snapToInterval={width}\n          showsHorizontalScrollIndicator={false}\n          decelerationRate={0}\n          snapToAlignment=\"center\"\n          disableIntervalMomentum\n          height={width / currentAspect}\n          onScroll={evt => {\n            const offset = evt.nativeEvent.contentOffset.x;\n            setOffset(offset);\n          }}\n          onLayout={evt => {\n            const currentWidth = evt.nativeEvent.layout.width;\n            if (currentWidth !== width) {\n              setWidth(currentWidth);\n            }\n          }}\n        >\n          <Touchable onPress={() => setLightboxVisible(true)}>\n            <ScrollContent>\n              {media.map(item => (\n                <ScrollPage key={item!.id} width={width}>\n                  <Image media={item!} />\n                </ScrollPage>\n              ))}\n            </ScrollContent>\n          </Touchable>\n        </ScrollWrapper>\n      </Wrapper>\n      <Pager current={currentIndex} total={media.length} />\n    </Row>\n  );\n};\n\nexport { Gallery };\n","import * as MediaLibrary from 'expo-media-library';\nimport * as FileSystem from 'expo-file-system';\nimport { useCallback, useContext } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Alert } from 'react-native';\n\nexport const useSaveImage = () => {\n  const { token } = useContext(ServerContext);\n  const saveImage = useCallback(\n    async (url: string) => {\n      try {\n        const download = FileSystem.createDownloadResumable(\n          url,\n          FileSystem.cacheDirectory + 'download.jpeg',\n          { headers: { Authorization: `bearer: ${token}`}},\n        );\n        const result = await download.downloadAsync();\n        if (!result) {\n          throw new Error('failed');\n        }\n        MediaLibrary.saveToLibraryAsync(result.uri);\n        Alert.alert('Image saved');\n      } catch (err) {\n        Alert.alert(`Failed: ${err.toString()}`)\n      }\n    },\n    [token]\n  );\n\n  return saveImage;\n};\n","import { ServerContext } from '#/context/server';\nimport { useCallback, useContext } from 'react';\nimport { UploadFile } from './posts';\n\nexport const useCreateMedia = () => {\n  const { domain, token } = useContext(ServerContext);\n  const createMedia = useCallback(\n    async (media: UploadFile[]) => {\n      const ids: string[] = [];\n      for (let file of media) {\n        const data = new FormData();\n        data.append('media', file as any);\n        const response = await fetch(`${domain}/api/media`, {\n          method: 'POST',\n          body: data,\n          headers: {\n            'content-type': 'multipart/form-data',\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        if (!response.ok) {\n          console.error(await response.text());\n          throw new Error('Could not upload image');\n        }\n        const json = await response.json();\n        ids.push(json.ids[0]);\n      };\n      return ids;\n    },\n    [token, domain]\n  );\n  return createMedia;\n};\n","import { HomeContext } from '#/context/home';\nimport { ServerContext } from '#/context/server';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport {\n  useCreatePostMutation,\n  useProfileQuery,\n  useRemovePostMutation,\n} from './graphql';\nimport { useCreateMedia } from './media';\nimport { useErrorNotification } from './utils';\n\nexport type UploadFile = {\n  uri: string;\n  name: string;\n  type: string;\n};\n\nexport const useCreatePostData = () => {\n  const { data, refetch, loading, error } = useProfileQuery();\n  useErrorNotification(error);\n  const feeds = useMemo(\n    () => data?.profile?.feeds.filter(f => f.accessType === 'admin'),\n    [data]\n  );\n\n  return {\n    feeds,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nexport const useCreatePost = () => {\n  const { domain, token } = useContext(ServerContext);\n  const [createPostMutation, { error }] = useCreatePostMutation();\n  useErrorNotification(error);\n  const createMedia = useCreateMedia();\n  const createPost = useCallback(\n    async (feed: string, body: string, media: UploadFile[]) => {\n      const ids = await createMedia(media);\n      await createPostMutation({\n        variables: {\n          params: {\n            feed,\n            body,\n            media: ids,\n          },\n        },\n      });\n    },\n    [createPostMutation, token, domain]\n  );\n\n  return createPost;\n};\n\nexport const useRemovePost = () => {\n  const [loading, setLoading] = useState(false);\n  const { refetch } = useFeed();\n  const [removePostMutation, { error }] = useRemovePostMutation();\n  useErrorNotification(error);\n  const removePost = useCallback(\n    async (id: string) => {\n      setLoading(true);\n      try {\n        await removePostMutation({\n          variables: { removePostId: id },\n        });\n        await refetch();\n      } finally {\n        setLoading(false);\n      }\n    },\n    [removePostMutation],\n  )\n\n  return { removePost, loading };\n};\n\nexport const useFeed = () => {\n  const context = useContext(HomeContext);\n  return context;\n};\n","import { PostModel, useRemovePostMutation } from '#/hooks/graphql';\nimport styled from 'styled-components/native';\nimport { DeepPartial } from '#/helpers/types';\nimport { Cell, Row } from '#/components/Row';\nimport { Icon } from '#/components/Icon';\nimport { Gallery } from '#/components/gallery';\nimport { Body1 } from '#/typography';\nimport { Avatar } from '#/components/avatar';\nimport { useNavigation } from '@react-navigation/native';\nimport { Popup } from '#/components/Popup';\nimport { useCallback, useState } from 'react';\nimport { useProfile } from '#/hooks/profile';\nimport { useFeed, useRemovePost } from '#/hooks/posts';\nimport { Button } from '#/components/Button';\nimport { OverlayLoader } from '#/components/loaders';\n\ntype PostRowProps = {\n  post: DeepPartial<PostModel>;\n  fullWidth: boolean;\n};\n\nconst Wrapper = styled.View<{\n  fullWidth: boolean;\n}>`\n  ${({ fullWidth, theme }) => fullWidth ? `\n    border-top-width: 7px; \n    border-color: ${theme.colors.shade};\n  ` : `\n    background-color: ${theme.colors.shade};\n    margin: 7px;\n    border-radius: 7px;\n  `}\n`;\n\nconst PostRow: React.FC<PostRowProps> = ({ post, fullWidth }) => {\n  const navigation = useNavigation();\n  const { removePost, loading } = useRemovePost();\n  const [menuVisible, setMenuVisible] = useState(false);\n  return (\n    <Wrapper fullWidth={fullWidth}>\n      {loading && <OverlayLoader />}\n      <Row\n        left={\n          <Cell>\n            <Avatar mediaId={post?.creator?.avatar!} />\n          </Cell>\n        }\n        right={\n          (\n            <>\n              <Cell onPress={() => navigation.navigate('Comments', { id: post.id })}>\n                <Icon name=\"message-circle\" color=\"text\" size={20} />\n                <Body1>{post.commentCount}</Body1>\n              </Cell>\n              <Cell onPress={() => setMenuVisible(true)}>\n                <Icon name=\"more-horizontal\" color=\"text\" size={20} />\n              </Cell>\n            </>\n          )\n        }\n        description={post.body}\n        overline={post.creator?.name || post.creator?.username}\n      />\n      {post.media && <Gallery media={post!.media} />}\n      <Popup onClose={() => setMenuVisible(false)} visible={menuVisible}>\n        <Button onPress={() => removePost(post.id!)} title=\"Remove\" type=\"destructive\" />\n      </Popup>\n    </Wrapper>\n  );\n};\n\nexport { PostRow };\n","import { useCallback } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport styled from 'styled-components/native';\nimport { UploadFile } from '#/hooks/posts';\nimport { Icon } from '../Icon';\nimport { Row } from '../Row';\n\ntype Props = {\n  files: UploadFile[];\n  onUpdate: (files: UploadFile[]) => void;\n};\n\nconst Image = styled.Image`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 5px;\n`;\n\nconst Spacer = styled.View`\n  padding-bottom: 100%;\n`;\n\nconst Item = styled.View`\n  width: 33%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Wrapper = styled.View`\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst Button = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n  justify-content: center;\n  align-items: center;\n  background: #ddd;\n  border-radius: 5px;\n`;\n\nconst ImageWrapper = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n`;\n\nconst AddImages: React.FC<Props> = ({ files, onUpdate }) => {\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    onUpdate([...files, file]);\n  }, [files, onUpdate]);\n\n  const remove = useCallback(\n    (file: UploadFile) => {\n      onUpdate(files.filter(f => f !== file));\n    },\n    [files, onUpdate]\n  );\n\n  return (\n    <Row>\n      <Wrapper>\n        {files.map(m => (\n          <Item key={m.uri}>\n            <Spacer />\n            <ImageWrapper onPress={() => remove(m)}>\n              <Image source={{ uri: m.uri }} />\n            </ImageWrapper>\n          </Item>\n        ))}\n        <Item>\n          <Spacer />\n          <Button onPress={pickImage}>\n            <Icon name=\"plus-circle\" size={40} />\n          </Button>\n        </Item>\n      </Wrapper>\n    </Row>\n  );\n};\n\nexport { AddImages };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { DeepPartial } from '#/helpers/types';\nimport { FeedModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype FeedInputProps = {\n  label: string;\n  feeds: DeepPartial<FeedModel>[];\n  selected?: DeepPartial<FeedModel>;\n  onSelect: (feed?: DeepPartial<FeedModel>) => void;\n};\n\nconst FeedInput: React.FC<FeedInputProps> = ({\n  label,\n  feeds,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={feeds || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name} />}\n      />\n    </>\n  );\n};\n\nexport { FeedInput };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { PartialDeep } from 'type-fest';\nimport { UserModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype UserInputProps = {\n  label: string;\n  users: PartialDeep<UserModel>[];\n  selected?: PartialDeep<UserModel>;\n  onSelect: (user?: PartialDeep<UserModel>) => void;\n};\n\nconst UserInput: React.FC<UserInputProps> = ({\n  label,\n  users,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || selected?.username || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={users || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name || item.username} />}\n      />\n    </>\n  );\n};\n\nexport { UserInput };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype NameValueInputItem = {\n  key: string;\n  value: any;\n};\n\ntype NameValueInputProps = {\n  label: string;\n  items: NameValueInputItem[];\n  selected?: NameValueInputItem;\n  onSelect: (item?: NameValueInputItem) => void;\n};\n\nconst NameValueInput: React.FC<NameValueInputProps> = ({\n  label,\n  items,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.key || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={items}\n        getKey={item => item.key}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.key} />}\n      />\n    </>\n  );\n};\n\nexport { NameValueInputItem, NameValueInput };\n","import { ServerContext } from '#/context/server';\nimport { useRegisterPushNotificationMutation } from '#/hooks/graphql';\nimport React, { useContext, useEffect } from 'react';\n\nconst PushRegistation: React.FC<{}> = () => {\n  const { pushToken } = useContext(ServerContext);\n  const [registerPushMutation] = useRegisterPushNotificationMutation();\n\n  useEffect(() => {\n    if (!pushToken) {\n      return;\n    }\n    registerPushMutation({\n      variables: {\n        token: pushToken,\n      },\n    });\n  }, [pushToken]);\n\n  return <></>;\n};\n\nexport { PushRegistation };\n","import { ProfileContext } from '#/context/profile';\nimport { useCallback, useContext } from 'react';\nimport { useSetProfileAvatarMutation } from './graphql';\nimport { useCreateMedia } from './media';\nimport { UploadFile } from './posts';\n\nexport const useSetAvatar = () => {\n  const createMedia = useCreateMedia();\n  const [setAvatarMutation] = useSetProfileAvatarMutation();\n\n  const setAvatar = useCallback(async (media?: UploadFile) => {\n    const [id] = media ? await createMedia([media]) : [];\n    await setAvatarMutation({\n      variables: {\n        mediaId: id,\n      },\n    });\n  }, []);\n\n  return setAvatar;\n};\n\nexport const useProfile = () => {\n  const context = useContext(ProfileContext);\n  return context;\n};\n","import React, { useCallback, useState, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { UploadFile, useCreatePost } from '#/hooks/posts';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { Page, FeedInput, AddImages, Row, Input, Button } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\nimport { useFeed } from '#/hooks/posts';\n\nconst Wrapper = styled.ScrollView`\n  flex: 1;\n`;\nconst Outer = styled.View`\n  flex: 1;\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n\nconst AddPostScreen: React.FC<AddScreenNavigationProp> = ({ navigation }) => {\n  const [loading, setLoading] = useState(false);\n  const { refetch: refetchPosts } = useFeed();\n  const { feeds, refetch, loading: profileLoading } = useProfile();\n  const [selectedFeed, setSelectedFeed] = useState<any>();\n  const [media, setMedia] = useState<UploadFile[]>([]);\n  const [body, setBody] = useState('');\n  const createPost = useCreatePost();\n  const adminFeeds = useMemo(\n    () => feeds?.filter(f => f.accessType === 'admin').map(f => f.feed) || [],\n    [feeds]\n  );\n\n  const submit = useCallback(async () => {\n    setLoading(true);\n    await createPost(selectedFeed.id, body, media);\n    await refetchPosts();\n    setLoading(false);\n    setSelectedFeed(undefined);\n    setMedia([]);\n    setBody('');\n    navigation.navigate('Feed', {});\n  }, [selectedFeed, body, media]);\n  useFocusEffect(\n    useCallback(() => {\n      refetch();\n    }, [refetch])\n  );\n\n  if (!feeds) {\n    return <></>;\n  }\n\n  return (\n    <Page loading={profileLoading || loading}>\n      <Outer>\n        <Header title=\"Create post\" />\n        <Wrapper>\n          <AddImages files={media} onUpdate={setMedia} />\n          <FeedInput\n            label=\"Feed\"\n            feeds={adminFeeds}\n            selected={selectedFeed}\n            onSelect={setSelectedFeed}\n          />\n          <Row overline=\"Content\">\n            <Input\n              label=\"Tell your story...\"\n              value={body}\n              onChangeText={setBody}\n            />\n          </Row>\n        </Wrapper>\n        <Row>\n          {!!selectedFeed && media.length > 0 && (\n            <Button onPress={submit} title=\"Create\" />\n          )}\n        </Row>\n      </Outer>\n    </Page>\n  );\n};\n\nexport { AddPostScreen };\n","import React, { useCallback, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { ListRenderItem, RefreshControl, Dimensions } from 'react-native';\nimport MasonryList from '@react-native-seoul/masonry-list';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { useFeed } from '#/hooks/posts';\nimport { Page } from '#/components/Page';\nimport { PostFilter, PostRow } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\n\nconst Seperator = styled.View`\n  margin-top: 15px;\n  border-bottom-width: 5px;\n  margin-bottom: 15px;\n  border-color: ${({ theme }) => theme.colors.shade};\n`;\nconst Wrapper = styled.View`\n  background-color: ${({ theme }) => theme.colors.background};\n  flex: 1;\n`;\n\nconst FeedScreen: React.FC<AddScreenNavigationProp> = () => {\n  const { posts, loading, refetch, feeds: selectedFeeds, setFeeds: setSelectedFeeds } = useFeed();\n  const { feeds } = useProfile();\n\n  const userFeeds = useMemo(() => feeds.map(f => f.feed), [feeds]);\n  const columns = useMemo(\n    () => Math.ceil(Dimensions.get('window').width / 500),\n    [],\n  );\n\n  const renderItem: ListRenderItem<typeof posts[0]> = useCallback(\n    ({ item }) => <PostRow fullWidth={columns <= 1} key={item.id} post={item} />,\n    [columns]\n  );\n\n  return (\n    <Page>\n      <Wrapper>\n        <Header\n          key=\"test\"\n          title=\"All posts\"\n          right={\n            <>\n              {userFeeds.length > 1 && (\n                <PostFilter\n                  feeds={userFeeds}\n                  selected={selectedFeeds}\n                  onSelect={setSelectedFeeds}\n                />\n              )}\n            </>\n          }\n        />\n        <MasonryList\n          data={posts}\n          keyExtractor={(item: any) => item.id}\n          renderItem={renderItem}\n          numColumns={columns}\n          ItemSeparatorComponent={Seperator}\n          refreshControl={\n            <RefreshControl refreshing={loading} onRefresh={refetch} />\n          }\n        />\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { FeedScreen };\n","import {\n  useAddUserToFeedMutation,\n  useCreateFeedMutation,\n  useRemoveUserFromFeedMutation,\n  useFeedQuery,\n} from '#/hooks/graphql';\nimport { useCallback, useMemo } from 'react';\nimport { useErrorNotification } from './utils';\n\nconst useFeed = (id: string) => {\n  const { data, refetch, loading, error } = useFeedQuery({\n    variables: { feedId: id },\n  });\n  useErrorNotification(error);\n  const feed = useMemo(() => data?.feed, [data]);\n  console.log(error);\n  return {\n    feed,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nconst useCreateFeed = () => {\n  const [createFeedMutation, { error }] = useCreateFeedMutation();\n  useErrorNotification(error);\n  const createFeed = useCallback(\n    async (name: string) => {\n      await createFeedMutation({\n        variables: {\n          name,\n        },\n      });\n    },\n    [createFeedMutation]\n  );\n\n  return createFeed;\n};\n\nconst useAddUserToFeed = () => {\n  const [addUserToFeedMutation, {error}] = useAddUserToFeedMutation();\n  useErrorNotification(error);\n  const addUserToFeed = useCallback(\n    async (feedId: string, userId: string, accessType: string) => {\n      await addUserToFeedMutation({\n        variables: {\n          feedId,\n          userId,\n          accessType,\n        },\n      });\n    },\n    [addUserToFeedMutation]\n  );\n\n  return addUserToFeed;\n};\n\nconst useRemoveUserFromFeed = () => {\n  const [removeUserFromFeedMutation, { error }] = useRemoveUserFromFeedMutation();\n  useErrorNotification(error);\n  const removeUserFromFeed = useCallback(\n    async (feedId: string, userId: string) => {\n      await removeUserFromFeedMutation({\n        variables: {\n          feedId,\n          userId,\n        },\n      });\n    },\n    [removeUserFromFeedMutation]\n  );\n\n  return removeUserFromFeed;\n};\n\nexport { useFeed, useCreateFeed, useAddUserToFeed, useRemoveUserFromFeed };\n","import { useCallback, useMemo } from 'react';\nimport { useInviteProfileMutation, useUsersQuery } from './graphql';\nimport { useErrorNotification } from './utils';\n\nexport const useUsers = () => {\n  const { data, refetch, loading, error } = useUsersQuery();\n  useErrorNotification(error);\n  const users = useMemo(() => data?.users, [data]);\n  return {\n    users,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nexport const useSendInvite = () => {\n  const [sendInviteMutation, { error }] = useInviteProfileMutation();\n  useErrorNotification(error);\n  const sendInvite = useCallback(\n    async (email: string) => {\n      await sendInviteMutation({\n        variables: { email },\n      });\n    },\n    [sendInviteMutation],\n  );\n\n  return sendInvite;\n};\n","import { useCallback, useContext, useState } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport {\n  Avatar,\n  Button,\n  Cell,\n  Group,\n  Header,\n  Input,\n  Page,\n  Popup,\n  Row,\n} from '#/components';\nimport { useProfile, useSetAvatar } from '#/hooks/profile';\nimport { ProfileMainScreenNavigationProp } from '#/router/types';\nimport { useCreateFeed } from '#/hooks/feeds';\nimport { ServerContext } from '#/context/server';\nimport { useSendInvite } from '#/hooks/users';\n\nconst ProfileScreen: React.FC<ProfileMainScreenNavigationProp> = ({\n  navigation,\n}) => {\n  const { profile, feeds, refetch } = useProfile();\n  const { logout } = useContext(ServerContext);\n  const createFeed = useCreateFeed();\n  const [addFeedVisible, setAddFeedVisible] = useState(false);\n  const [inviteVisible, setInviteVisible] = useState(false);\n  const [inviteEmail, setInviteEmail] = useState('');\n  const [feedName, setFeedName] = useState('');\n  const setAvatar = useSetAvatar();\n  const sendInvite = useSendInvite();\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    await setAvatar(file);\n    await refetch();\n  }, []);\n\n  const saveAddFeed = useCallback(async () => {\n    await createFeed(feedName);\n    setFeedName('');\n    setAddFeedVisible(false);\n    await refetch();\n  }, [feedName, createFeed]);\n\n  const sendInviteAction = useCallback(async () => {\n    await sendInvite(inviteEmail);\n    setInviteEmail('');\n    setInviteVisible(false);\n    await refetch();\n  }, [inviteEmail, sendInvite]);\n\n  return (\n    <Page>\n      <Header title=\"Profile\" />\n      <Row\n        left={\n          <Cell>\n            <Avatar\n              mediaId={profile?.avatar || undefined}\n              onPress={pickImage}\n            />\n          </Cell>\n        }\n        title={profile?.name || profile?.username}\n      />\n      <Popup visible={addFeedVisible} onClose={() => setAddFeedVisible(false)}>\n        <Row>\n          <Input label=\"Name\" value={feedName} onChangeText={setFeedName} />\n        </Row>\n        <Row>\n          <Button title=\"Save\" onPress={saveAddFeed} />\n        </Row>\n      </Popup>\n      <Group\n        title=\"My feeds\"\n        items={feeds}\n        getKey={item => item.feed.id}\n        add={\n          profile?.admin\n            ? () => {\n                setAddFeedVisible(true);\n              }\n            : undefined\n        }\n        render={item => (\n          <Row\n            title={item.feed.name}\n            overline={item.accessType}\n            right={\n              <Cell>\n                <Button title=\"Leave\" type=\"destructive\" />\n              </Cell>\n            }\n            onPress={() => {\n              navigation.navigate('FeedEdit', { id: item.feed.id });\n            }}\n          />\n        )}\n      />\n      {profile?.admin && (\n        <>\n          <Row>\n            <Button title=\"Invite\" onPress={() => setInviteVisible(true)} />\n          </Row>\n          <Popup visible={inviteVisible} onClose={() => setAddFeedVisible(false)}>\n            <Row>\n              <Input label=\"Email\" value={inviteEmail} onChangeText={setInviteEmail} />\n            </Row>\n            <Row>\n              <Button title=\"Save\" onPress={sendInviteAction} />\n            </Row>\n          </Popup>\n        </>\n      )}\n      <Row>\n        <Button title=\"Logout\" type=\"destructive\" onPress={logout} />\n      </Row>\n    </Page>\n  );\n};\n\nexport { ProfileScreen };\n","import {\n  Group,\n  NameValueInput,\n  Header,\n  Input,\n  Page,\n  Popup,\n  Row,\n  UserInput,\n  NameValueInputItem,\n  Button,\n  Cell,\n} from '#/components';\nimport {\n  useAddUserToFeed,\n  useFeed,\n  useRemoveUserFromFeed,\n} from '#/hooks/feeds';\nimport { UserModel } from '#/hooks/graphql';\nimport { useUsers } from '#/hooks/users';\nimport { FeedEditScreenNavigationProp } from '#/router/types';\nimport { useCallback, useState } from 'react';\nimport { PartialDeep } from 'type-fest';\n\nconst accessTypes = [\n  { key: 'Admin', value: 'admin' },\n  { key: 'Moderator', value: 'moderator' },\n  { key: 'Writer', value: 'writer' },\n  { key: 'Reader', value: 'reader' },\n];\n\nconst FeedEditScreen: React.FC<FeedEditScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const { feed, refetch } = useFeed(id);\n  const { users } = useUsers();\n  const removeUserFromFeed = useRemoveUserFromFeed();\n  const addUserToFeed = useAddUserToFeed();\n  const [addUserVisible, setAddUserVisible] = useState(false);\n  const [addUserSelected, setAddUserSelected] =\n    useState<PartialDeep<UserModel>>();\n  const [addUserAccessType, setAddUserAccessType] =\n    useState<NameValueInputItem>();\n\n  const addUser = useCallback(async () => {\n    await addUserToFeed(id, addUserSelected!.id!, addUserAccessType!.value);\n    setAddUserSelected(undefined);\n    setAddUserAccessType(undefined);\n    setAddUserVisible(false);\n    await refetch();\n  }, [id, addUserSelected, addUserAccessType]);\n\n  const removeUser = useCallback(\n    async (userId: string) => {\n      await removeUserFromFeed(id, userId);\n      await refetch();\n    },\n    [id, removeUserFromFeed, refetch]\n  );\n\n  if (!feed) {\n    return <></>;\n  }\n\n  return (\n    <Page>\n      <Header title=\"Feed\" />\n      <Row>\n        <Input label=\"Name\" value={feed.name} />\n      </Row>\n      <Group\n        title=\"Users\"\n        add={() => {\n          setAddUserVisible(true);\n        }}\n        items={feed.users}\n        getKey={relation => relation.user.id}\n        render={relation => (\n          <Row\n            overline={relation.accessType}\n            title={relation.user.name || relation.user.username}\n            right={\n              <Cell>\n                <Button\n                  title=\"Remove\"\n                  onPress={() => removeUser(relation.user.id)}\n                />\n              </Cell>\n            }\n          />\n        )}\n      />\n      <Popup visible={addUserVisible} onClose={() => setAddUserVisible(false)}>\n        <UserInput\n          label=\"User\"\n          selected={addUserSelected}\n          onSelect={user => setAddUserSelected(user!)}\n          users={users}\n        />\n        <NameValueInput\n          label=\"Access type\"\n          selected={addUserAccessType}\n          onSelect={accessType => setAddUserAccessType(accessType!)}\n          items={accessTypes}\n        />\n        {!!addUserAccessType && !!addUserSelected && (\n          <Row>\n            <Button title=\"Save\" onPress={addUser} />\n          </Row>\n        )}\n      </Popup>\n    </Page>\n  );\n};\n\nexport { FeedEditScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { ServerContext } from '#/context/server';\nimport { Header, Icon, Page } from '#/components';\nimport { LoginScreenNavigationProp } from '#/router/types';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background: ${({ theme }) => theme.colors.shade};\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\nconst Text = styled.Text``;\n\nconst LoginScreen: React.FC<LoginScreenNavigationProp> = ({ navigation }) => {\n  const { login } = useContext(ServerContext);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n  const [domain, setDomain] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const doLogin = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await login(domain, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [domain, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          {error && <Text>{error.toString()}</Text>}\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"server\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Domain\"\n              value={domain}\n              onChangeText={setDomain}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Secret\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doLogin} title=\"Login\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { LoginScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { AcceptInvitationScreenNavigationProp } from '#/router/types';\nimport { ServerContext } from '#/context/server';\nimport { Text } from 'react-native';\nimport { Header, Icon, Page } from '#/components';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  align-items: center;\n  justify-content: center;\n  padding: 0 20px;\n  flex: 1;\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\n\nconst AcceptInvitationScreen: React.FC<\n  AcceptInvitationScreenNavigationProp\n> = ({ route, navigation }) => {\n  const { inviteCode } = route.params;\n  const { acceptInvitation } = useContext(ServerContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n\n  const doAccept = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await acceptInvitation(inviteCode, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [inviteCode, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          <Row description=\"You are almost there! Just pick your username and password and off we go!\" />\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Password\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doAccept} title=\"Let's GO\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { AcceptInvitationScreen };\n","\nimport {\n  Header,\n  Input,\n  Page,\n  Row,\n  Button,\n  Cell,\n  Avatar,\n} from '#/components';\nimport { useCreateCommentMutation, usePostQuery } from '#/hooks/graphql';\nimport { CommentsScreenNavigationProp } from '#/router/types';\nimport { useCallback, useState } from 'react';\nimport { FlatList } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\n\nconst Content = styled.View`\n  flex: 1;\n`\n\nconst Wrapper = styled.View`\n  flex: 1;\n`\n\nconst CommentsScreen: React.FC<CommentsScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const insets = useSafeAreaInsets();\n  const [content, setContent] = useState('');\n  const [createCommentMutation] = useCreateCommentMutation();\n  const { data, refetch } = usePostQuery({\n    variables: {\n      postId: id,\n    },\n  });\n\n  const createComment = useCallback(\n    async () => {\n      await createCommentMutation({\n        variables: {\n          params: {\n            content,\n            post: id,\n          }\n        }\n      });\n      setContent('');\n      await refetch();\n    },\n    [content, id, createCommentMutation, refetch],\n  )\n  return (\n    <Page>\n      <Header title=\"Comments\" />\n      <Wrapper style={{ paddingBottom: insets.bottom + 20 }}>\n        <Content>\n          <FlatList\n            style={{ flex: 1 }}\n            inverted\n            keyExtractor={item => item.id}\n            renderItem={({ item }) => (\n              <Row\n                left={(\n                  <Cell>\n                    <Avatar mediaId={item.creator.avatar || undefined}/>\n                  </Cell>\n                )}\n                overline={item.creator.name || item.creator.username}\n                description={item.content}\n              />\n            )}\n            data={[...(data?.post.comments || [])].reverse()}\n          />\n        </Content> \n        <Row\n          right={(\n            <Button title=\"Send\" onPress={createComment} />\n          )}\n        >\n          <Input label=\" Say something...\" value={content} onChangeText={setContent} />\n        </Row>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { CommentsScreen };\n","import React, { useContext, useMemo } from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useTheme } from 'styled-components/native';\nimport { ProfileParamList, RootStackParamList, TabParamList } from './types';\nimport { linkingConfig } from './linking';\nimport { Icon, PushRegistation } from '#/components';\n\nimport { AddPostScreen } from '#/screens/posts/add';\nimport { FeedScreen } from '#/screens/posts/feed';\nimport { ProfileScreen } from '#/screens/profile';\nimport { FeedEditScreen } from '#/screens/feeds/edit';\nimport { ServerContext } from '#/context/server';\nimport { LoginScreen } from '#/screens/login/login';\nimport { useProfile } from '#/hooks/profile';\nimport { AcceptInvitationScreen } from '#/screens/login/accept-invitation';\nimport { CommentsScreen } from '#/screens/comments';\n\nconst RootStack = createNativeStackNavigator<RootStackParamList>();\nconst TabStack = createBottomTabNavigator<TabParamList>();\nconst ProfileStack = createNativeStackNavigator<ProfileParamList>();\n\nconst Profile = () => {\n  return (\n    <ProfileStack.Navigator screenOptions={{ headerShown: false }}>\n      <ProfileStack.Screen name=\"ProfileMain\" component={ProfileScreen} />\n    </ProfileStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const theme = useTheme();\n  const { profile } = useProfile();\n  const canCreate = useMemo(\n    () =>\n      profile?.feeds?.find(\n        f =>\n          f.accessType === 'admin' ||\n          f.accessType === 'moderator' ||\n          f.accessType === 'writer'\n      ),\n    [profile]\n  );\n  return (\n    <>\n      <PushRegistation />\n      <TabStack.Navigator\n        screenOptions={{\n          headerShown: false,\n          tabBarActiveTintColor: theme.colors.primary,\n        }}\n      >\n        <TabStack.Screen\n          name=\"Feed\"\n          component={FeedScreen}\n          options={{\n            title: 'Posts',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"home\"\n                size={28}\n              />\n            ),\n          }}\n        />\n        {canCreate && (\n          <TabStack.Screen\n            name=\"Add\"\n            component={AddPostScreen}\n            options={{\n              title: 'Add',\n              tabBarIcon: ({ focused }) => (\n                <Icon\n                  color={focused ? 'primary' : 'text'}\n                  name=\"plus-square\"\n                  size={28}\n                />\n              ),\n            }}\n          />\n        )}\n        <TabStack.Screen\n          name=\"Profile\"\n          component={Profile}\n          options={{\n            title: 'Profile',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"user\"\n                size={28}\n              />\n            ),\n          }}\n        />\n      </TabStack.Navigator>\n    </>\n  );\n};\n\nconst Root = () => {\n  const theme = useTheme();\n  const { domain } = useContext(ServerContext);\n  return (\n    <RootStack.Navigator screenOptions={{ headerShown: false }}>\n      {domain ? (\n        <>\n          <RootStack.Group>\n            <RootStack.Screen name=\"Main\" component={Tabs} />\n          </RootStack.Group>\n          <RootStack.Group\n            screenOptions={{\n              contentStyle: {\n                backgroundColor: theme.colors.shade,\n              },\n              presentation: 'modal',\n            }}\n          >\n            <RootStack.Screen name=\"FeedEdit\" component={FeedEditScreen} />\n            <RootStack.Screen name=\"Comments\" component={CommentsScreen} />\n          </RootStack.Group>\n        </>\n      ) : (\n        <RootStack.Group>\n          <RootStack.Screen name=\"Login\" component={LoginScreen} />\n          <RootStack.Screen\n            initialParams={{ inviteCode: '' }}\n            name=\"AcceptInvitation\"\n            component={AcceptInvitationScreen}\n          />\n        </RootStack.Group>\n      )}\n    </RootStack.Navigator>\n  );\n};\n\ninterface RouterProps {\n  colorScheme: string;\n}\n\nconst Router: React.FC<RouterProps> = ({ colorScheme }) => {\n  const theme = useTheme();\n  const baseTheme = useMemo(\n    () => (colorScheme === 'dark' ? DarkTheme : DefaultTheme),\n    [colorScheme]\n  );\n  const navigationTheme = useMemo(\n    () => ({\n      ...baseTheme,\n      colors: {\n        ...baseTheme.colors,\n        background: theme.colors.shade,\n        card: theme.colors.background,\n        text: theme.colors.text,\n      },\n    }),\n    [baseTheme, theme]\n  );\n  return (\n    <NavigationContainer linking={linkingConfig} theme={navigationTheme}>\n      <Root />\n    </NavigationContainer>\n  );\n};\n\nexport { Router };\n","import { Image } from 'react-native';\nimport * as Sentry from 'sentry-expo';\n\nSentry.init({\n  dsn: 'https://a13b4a62799a4225bf9072bedc4f41fa@o165705.ingest.sentry.io/6244307',\n  enableInExpoDevelopment: true,\n  debug: false,\n});\n\nif (!Image.getSizeWithHeaders) {\n  Image.getSizeWithHeaders = (uri, headers, success, failed) => {\n    success(100, 100);\n  };\n}\n\nimport App from './src/App';\n\nexport default App;\n","import React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { useColorScheme } from './hooks/colors';\nimport { ThemeProvider } from 'styled-components/native';\nimport { StatusBar } from 'expo-status-bar';\nimport { GraphQLProvider } from './context/graphql';\nimport { ServerProvider } from './context/server';\nimport { light, dark } from '#/theme';\nimport { Router } from '#/router';\nimport { NotificationProvider } from './context/notifications';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n  return (\n    <ThemeProvider theme={colorScheme === 'dark' ? dark : light}>\n      <SafeAreaProvider>\n        <NotificationProvider>\n          <ServerProvider>\n            <StatusBar style={colorScheme === 'dark' ? 'light' : 'dark'} />\n            <GraphQLProvider>\n              <Router colorScheme={colorScheme} />\n            </GraphQLProvider>\n          </ServerProvider>\n        </NotificationProvider>\n      </SafeAreaProvider>\n    </ThemeProvider>\n  );\n}\n","import {\n  ColorSchemeName,\n  useColorScheme as _useColorScheme,\n} from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import React, { createContext, useCallback, useEffect, useState } from 'react';\nimport { Buffer } from 'buffer';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { registerForPushNotificationsAsync } from './push';\nimport { useNotifications } from '#/hooks/notifications';\n\nconst STORAGE_KEY = '_/server';\ntype ServerContextValue = {\n  domain?: string;\n  pushToken: string | undefined;\n  token?: string;\n  logout: () => Promise<void>;\n  login: (domain: string, username: string, secret: string) => Promise<void>;\n  acceptInvitation: (\n    invitation: string,\n    username: string,\n    secret: string,\n    name?: string\n  ) => Promise<void>;\n};\n\nconst ServerContext = createContext<ServerContextValue>(undefined as any);\n\nconst ServerProvider: React.FC = ({ children }) => {\n  const [context, setContext] = useState<{ domain: string; token: string }>();\n  const { show, dismiss } = useNotifications();\n  const [pushToken, setPushToken] = useState<string>();\n  const [ready, setReady] = useState(false);\n  const logout = useCallback(async () => {\n    await AsyncStorage.removeItem(STORAGE_KEY);\n    setContext(undefined);\n  }, [setContext]);\n\n  useEffect(() => {\n    if (!context) {\n      return;\n    }\n    registerForPushNotificationsAsync().then(setPushToken);\n  }, [context]);\n\n  const login = useCallback(\n    async (domain: string, username: string, secret: string) => {\n      const authUrl = `${domain}/graphql`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: `\n            mutation CreateAuthToken($secret: String!, $username: String!) {\n              createAuthToken(secret: $secret, username: $username)\n            } \n          `,\n          variables: {\n            username,\n            secret,\n          },\n        }),\n      });\n      if (!response.ok) {\n        show({\n          type: 'error',\n          text: await response.text(),\n        });\n        throw new Error('failed');\n      }\n      const json = await response.json();\n      const context = {\n        token: json.data.createAuthToken,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    [show]\n  );\n\n  const acceptInvitation = useCallback(\n    async (\n      invitation: string,\n      username: string,\n      secret: string,\n      name?: string\n    ) => {\n      const rawInvite = Buffer.from(invitation, 'base64').toString('utf-8');\n      const { creationToken, domain } = JSON.parse(rawInvite);\n      const authUrl = `${domain}/api/accept-invitation`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n          secret,\n          creationToken,\n          name,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const json = await response.json();\n      const context = {\n        token: json.token,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    []\n  );\n\n  useEffect(() => {\n    const run = async () => {\n      const item = await AsyncStorage.getItem(STORAGE_KEY);\n      if (item) {\n        const nextContext = JSON.parse(item) as ServerContextValue;\n        try {\n          const configResponse = await fetch(`${nextContext.domain}/api/config`, {\n            headers: {\n              Authorization: `Bearer ${nextContext.token}`,\n            },\n          });\n          if (configResponse.ok) {\n            setContext(JSON.parse(item));\n          } else {\n            show({\n              type: 'error',\n              text: await configResponse.text(),\n            });     \n          }\n        } catch(err) {\n          show({\n            type: 'error',\n            text: err.message,\n          });     \n        }\n      }\n      setReady(true);\n    };\n    run().catch(() => {\n      setReady(true);\n    });\n  }, []);\n\n  if (!ready) {\n    return <></>;\n  }\n\n  return (\n    <ServerContext.Provider\n      value={{ ...context, pushToken, logout, login, acceptInvitation }}\n    >\n      {children}\n    </ServerContext.Provider>\n  );\n};\n\nexport { ServerContext, ServerProvider };\n","import * as Device from 'expo-device';\nimport { Platform } from 'react-native';\nimport * as Notifications from 'expo-notifications';\n\nexport const registerForPushNotificationsAsync = async () => {\n  if (Device.isDevice && Platform.OS !== 'web') {\n    const { status: existingStatus } =\n      await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n    return token;\n  };\n};\n","import React from 'react';\nimport { Feather } from '@expo/vector-icons';\nimport { useTheme } from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ntype Props = {\n  size?: number;\n  color?: keyof Theme['colors'];\n  name: keyof typeof Feather.glyphMap;\n};\n\nfunction Icon({ size, color, name }: Props) {\n  const theme = useTheme();\n  return (\n    <Feather\n      name={name}\n      color={color ? theme.colors[color] : theme.colors.icon}\n      size={size ?? theme.sizes.icons}\n    />\n  );\n}\n\nexport { Icon };\n","import styled from 'styled-components/native';\nimport Theme from '#/theme/Theme';\n\ninterface TextProps {\n  color?: keyof Theme['colors'];\n  bold?: boolean;\n  theme: Theme;\n}\n\nconst BaseText = styled.Text<TextProps>`\n  color: ${({ color, theme }) =>\n    color ? theme.colors[color] : theme.colors.text};\n  font-weight: ${({ bold }) => (bold ? 'bold' : 'normal')};\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n`;\n\nconst Jumbo = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 2.8}px;\n  font-weight: bold;\n`;\n\nconst Title2 = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 1.3}px;\n  font-weight: bold;\n`;\n\nconst Title1 = styled(BaseText)`\n  font-weight: bold;\n`;\n\nconst Body1 = styled(BaseText)``;\n\nconst Overline = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.6}px;\n  text-transform: uppercase;\n`;\n\nconst Caption = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.8}px;\n`;\n\nconst Link = styled(BaseText)`\n  text-transform: uppercase;\n`;\n\nexport type { TextProps };\nexport { Jumbo, Title2, Title1, Body1, Overline, Caption, Link };\n","import { ServerContext } from '#/context/server';\nimport styled from 'styled-components/native';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\n\nconst Wrapper = styled.View<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\nconst ImageWrapper = styled.Image`\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: #ccc;\n`;\n\ntype Props = {\n  media: DeepPartial<MediaModel>;\n};\nconst Image: React.FC<Props> = ({ media }) => {\n  const { domain, token } = useContext(ServerContext);\n  const [width, setWidth] = useState<number>(0);\n  const [url, setUrl] = useState<string>();\n  useEffect(() => {\n    const run = async () => {\n      const response = await fetch(`${domain}/api/thumb/${media.id!}`, {\n        headers: {\n          Authorization: `bearer ${token!}`,\n        },\n      });\n      const binaryData = await response.arrayBuffer();\n      const contentType = response.headers.get('content-type');\n      const base64 = Buffer.from(binaryData).toString('base64');\n      const dataUrl = `data:${contentType || 'image/jpeg'};base64,${base64}`;\n      setUrl(dataUrl);\n    };\n    run();\n  }, [domain, token, media.id]);\n  return (\n    <Wrapper\n      height={width / media.aspect!}\n      onLayout={evt => {\n        const currentWidth = evt.nativeEvent.layout.width;\n        if (currentWidth !== width) {\n          setWidth(currentWidth);\n        }\n      }}\n    >\n      <ImageWrapper source={{ uri: url }} />\n    </Wrapper>\n  );\n};\n\nexport { Image };\n"],"sourceRoot":""}