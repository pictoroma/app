{"version":3,"sources":["src/components/Row/Cell.tsx","src/components/Row/index.tsx","src/components/Row/PlaceholderIcon.tsx","src/hooks/notifications.ts","assets/images/tourist.png","src/components/notification/index.tsx","src/context/notifications/index.tsx","assets/images/error.png","src/hooks/graphql.tsx","src/hooks/utils.ts","src/context/profile/index.tsx","src/context/home/index.tsx","src/context/graphql/index.tsx","src/theme/light.ts","src/theme/dark.ts","src/router/linking.ts","src/components/loaders/overlay/index.tsx","src/components/avatar/index.tsx","src/components/Button/index.tsx","src/components/Modal/index.web.tsx","src/components/Page/index.tsx","src/components/Popup/index.tsx","src/components/posts/filter/index.tsx","src/components/Row/Header.tsx","src/components/Group/index.tsx","src/components/Input/index.tsx","src/components/Dialog/index.tsx","src/components/Header/index.tsx","src/components/gallery/index.tsx","src/components/gallery/save.ts","src/hooks/media.ts","src/hooks/posts.ts","src/components/rows/post/index.tsx","src/components/add-images/index.tsx","src/components/inputs/feed/index.tsx","src/components/inputs/user/index.tsx","src/components/inputs/name-value/index.tsx","src/components/utils/push-registration.tsx","src/hooks/profile.ts","src/screens/posts/add/index.tsx","src/screens/posts/feed/index.tsx","src/hooks/feeds.ts","src/hooks/users.ts","src/screens/profile/index.tsx","src/screens/feeds/edit/index.tsx","src/screens/login/login/index.tsx","src/screens/login/accept-invitation/index.tsx","src/screens/comments/index.tsx","src/screens/admin/users/index.tsx","src/screens/admin/feeds/index.tsx","src/router/index.tsx","App.tsx","src/App.tsx","src/hooks/colors.ts","src/context/server/index.tsx","src/context/server/push.ts","src/components/Icon/index.tsx","src/typography/index.ts","src/components/Image/index.web.tsx"],"names":["Wrapper","styled","View","theme","margins","medium","background","colors","flex","direction","align","Touch","TouchableOpacity","Cell","children","onPress","props","accessibilityLabel","accessibilityRole","accessibilityHint","others","node","accessible","Children","color","size","componentOrString","input","Component","Row","top","left","right","title","overline","description","Overline","Title1","Body1","useNotifications","useContext","NotificationContext","module","exports","destructive","Notification","notification","dismiss","Icon","name","text","createContext","undefined","nextId","NotificationProvider","useState","notifications","setNotifications","insets","useSafeAreaInsets","show","useCallback","id","current","filter","c","context","useMemo","Provider","value","length","map","index","defaultOptions","CreateCommentDocument","gql","FeedDocument","CreateFeedDocument","AddUserToFeedDocument","RemoveUserFromFeedDocument","PostDocument","PostsDocument","CreatePostDocument","RemovePostDocument","ProfileDocument","useProfileQuery","baseOptions","options","Apollo","SetProfileAvatarDocument","RegisterPushNotificationDocument","UsersDocument","useErrorNotification","error","useEffect","console","type","message","ProfileContext","ProfileProvider","variables","data","feeds","profile","HomeContext","HomeProvider","setFeeds","usePostsQuery","limit","offset","posts","GraphQLProvider","ServerContext","token","domain","apolloClient","link","createHttpLink","uri","authLink","setContext","_","headers","authorization","ApolloClient","cache","InMemoryCache","typePolicies","Query","fields","keyArgs","merge","existing","incoming","clone","slice","next","find","p","__ref","push","concat","ApolloProvider","client","lightTheme","primary","icon","destructiveAlt","header","shade","secondary","shadow","textShade","sizes","corners","icons","small","large","font","baseSize","darkTheme","light","linkingConfig","prefixes","screens","AcceptInvitation","BlurView","Activity","ActivityIndicator","OverlayLoader","intensity","Touchable","Avatar","mediaId","content","media","aspect","getColors","bg","fg","StyledLink","Link","Button","Modal","visible","elm","newElm","document","createElement","style","position","display","flexDirection","width","height","transition","transform","body","appendChild","removeChild","ReactDOM","createPortal","KeyboardAvoiding","KeyboardAvoidingView","Pressable","ErrorWrapper","ErrorImage","Image","ErrorBoundary","state","hasError","errorInfo","Sentry","captureException","extra","this","source","errorImage","toString","setState","React","Page","loading","keyboardShown","setKeyboardShown","Keyboard","addListener","hide","remove","disabled","behavior","Platform","OS","Top","Outer","Popup","onClose","transparent","animationType","paddingBottom","bottom","PostFilter","selected","onSelect","setVisible","feed","isSelected","includes","s","Header","add","Group","items","getKey","render","item","marginLeft","InputField","TextInput","Input","label","onChangeText","autoCorrect","secure","useTheme","keyboardType","autoCapitalize","secureTextEntry","placeholderTextColor","placeholder","Content","Dialog","renderSelect","search","create","allowClear","searchInput","setSeachInput","results","select","createItem","a","async","FlatList","keyExtractor","renderItem","back","actions","navigation","useNavigation","paddingTop","goBack","Ionicons","action","ScrollWrapper","ScrollView","ScrollContent","TouchableWithoutFeedback","ScrollPage","DotWrapper","Dot","Pager","total","dots","Array","fill","i","Gallery","setWidth","setOffset","saveImage","url","download","FileSystem","Authorization","downloadAsync","result","Error","MediaLibrary","Alert","alert","useSaveImage","currentIndex","Math","round","lightboxVisible","setLightboxVisible","lightboxImages","currentMedia","currentAspect","Lightbox","images","imageIndex","onRequestClose","FooterComponent","dark","horizontal","scrollEventThrottle","snapToInterval","showsHorizontalScrollIndicator","decelerationRate","snapToAlignment","disableIntervalMomentum","onScroll","evt","nativeEvent","contentOffset","x","onLayout","currentWidth","layout","useCreateMedia","ids","file","FormData","append","fetch","method","response","ok","json","useCreatePost","useCreatePostMutation","createPostMutation","createMedia","params","useRemovePost","setLoading","refetch","useFeed","useRemovePostMutation","removePostMutation","removePost","removePostId","fullWidth","PostRow","post","menuVisible","setMenuVisible","creator","avatar","navigate","commentCount","username","Spacer","Item","ImageWrapper","AddImages","files","onUpdate","pickImage","ImagePicker","mediaTypes","All","quality","base64","cancelled","split","filename","match","exec","f","m","FeedInput","UserInput","users","NameValueInput","key","PushRegistation","pushToken","useRegisterPushNotificationMutation","registerPushMutation","useSetAvatar","useSetProfileAvatarMutation","setAvatarMutation","useProfile","AddPostScreen","refetchPosts","profileLoading","selectedFeed","setSelectedFeed","setMedia","setBody","createPost","adminFeeds","accessType","submit","useFocusEffect","Seperator","FeedScreen","onEndReachedCalledDuringMomentum","setOnEndReachedCalledDuringMomentum","fetchMore","selectedFeeds","setSelectedFeeds","userFeeds","columns","ceil","Dimensions","get","onEndReachedThreshold","onEndReached","numColumns","ItemSeparatorComponent","onMomentumScrollBegin","refreshControl","RefreshControl","refreshing","onRefresh","useFeedQuery","feedId","useCreateFeed","useCreateFeedMutation","createFeedMutation","useAddUserToFeed","useAddUserToFeedMutation","addUserToFeedMutation","userId","useRemoveUserFromFeed","useRemoveUserFromFeedMutation","removeUserFromFeedMutation","useUsers","useUsersQuery","ProfileScreen","logout","createFeed","addFeedVisible","setAddFeedVisible","inviteVisible","setInviteVisible","inviteEmail","setInviteEmail","feedName","setFeedName","setAvatar","sendInvite","useInviteProfileMutation","sendInviteMutation","email","useSendInvite","saveAddFeed","sendInviteAction","admin","accessTypes","FeedEditScreen","route","removeUserFromFeed","addUserToFeed","addUserVisible","setAddUserVisible","addUserSelected","setAddUserSelected","addUserAccessType","setAddUserAccessType","addUser","removeUser","relation","user","Text","LoginScreen","login","setError","setDomain","setUsername","password","setPassword","doLogin","catch","err","image","AcceptInvitationScreen","inviteCode","acceptInvitation","doAccept","CommentsScreen","setContent","useCreateCommentMutation","createCommentMutation","usePostQuery","postId","createComment","inverted","comments","reverse","AdminUsersScreen","searchText","setSearchText","useRemoveUserMutation","removeUserMutation","useRemoveUser","toLowerCase","then","AdminFeedsScreen","removeFeed","useRemoveFeedMutation","removeFeedMutation","useRemoveFeed","useAllFeedsQuery","allFeeds","useAllFeeds","u","join","RootStack","createNativeStackNavigator","TabStack","createBottomTabNavigator","ProfileStack","Profile","Navigator","screenOptions","headerShown","Screen","component","Tabs","canCreate","tabBarActiveTintColor","tabBarIcon","focused","Root","contentStyle","backgroundColor","presentation","initialParams","Router","colorScheme","baseTheme","DarkTheme","DefaultTheme","navigationTheme","card","NavigationContainer","linking","dsn","enableInExpoDevelopment","debug","getSizeWithHeaders","success","failed","App","_useColorScheme","StatusBar","ServerProvider","config","setConfig","setPushToken","ready","setReady","AsyncStorage","removeItem","Device","Notifications","existingStatus","status","finalStatus","importance","MAX","vibrationPattern","lightColor","registerForPushNotificationsAsync","secret","authUrl","Accept","JSON","stringify","query","createAuthToken","setItem","invitation","rawInvite","Buffer","from","parse","creationToken","getItem","nextContext","configResponse","run","BaseText","bold","Jumbo","setUrl","arrayBuffer","binaryData","contentType"],"mappings":"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","file":"static/js/app.e4c73bad.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ninterface Props {\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  children?: ReactNode;\n  onPress?: () => any;\n  background?: keyof Theme['colors'];\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}\n\nconst Wrapper = styled.View<{\n  background?: keyof Theme['colors'];\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  theme: Theme;\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}>`\n  padding: ${({ theme }) => theme.margins.medium / 2}px\n    ${({ theme }) => theme.margins.medium / 2}px;\n  ${({ background, theme }) => (background ? `background: ${theme.colors[background]};` : '')}\n  ${({ flex }) => (flex ? `flex: ${flex};` : '')}\n  flex-direction: ${({ direction }) => (direction ? direction : 'row')};\n  align-items: ${({ align }) => (align ? align : 'center')};\n`;\n\nconst Touch = styled.TouchableOpacity``;\n\nconst Cell: React.FC<Props> = ({ children, onPress, ...props }) => {\n  const {\n    accessibilityLabel,\n    accessibilityRole,\n    accessibilityHint,\n    ...others\n  } = props;\n  const node = <Wrapper {...others}>{children}</Wrapper>;\n  if (onPress) {\n    return (\n      <Touch\n        accessible\n        accessibilityRole={accessibilityRole || 'button'}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        onPress={onPress}\n      >\n        {node}\n      </Touch>\n    );\n  }\n  return node;\n};\n\nexport { Cell };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { Title1, Body1, Overline } from '#/typography';\nimport { Cell } from './Cell';\nimport { PlaceholderIcon } from './PlaceholderIcon';\n\ninterface Props {\n  background?: string;\n  top?: ReactNode;\n  left?: ReactNode;\n  right?: ReactNode;\n  title?: ReactNode;\n  overline?: ReactNode;\n  description?: ReactNode;\n  children?: ReactNode;\n  onPress?: () => any;\n}\n\nconst Children = styled.View``;\n\nconst componentOrString = (\n  input: ReactNode,\n  Component: React.FC<{ children: ReactNode }>\n) => {\n  if (!input) {\n    return null;\n  }\n  if (typeof input === 'string') {\n    return <Component>{input}</Component>;\n  }\n  return input;\n};\n\nconst Row: React.FC<Props> = ({\n  background,\n  top,\n  left,\n  right,\n  title,\n  overline,\n  description,\n  children,\n  onPress,\n}) => (\n  <Cell background={background} onPress={onPress}>\n    {left}\n    <Cell flex={1} direction=\"column\" align=\"stretch\">\n      {!!top}\n      {componentOrString(overline, Overline)}\n      {componentOrString(title, Title1)}\n      {componentOrString(description, Body1)}\n      {!!children && <Children>{children}</Children>}\n    </Cell>\n    {right}\n  </Cell>\n);\n\nexport { Row, Cell, PlaceholderIcon };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { Cell } from './Cell';\n\ninterface Props {\n  color?: string;\n  size?: number;\n  onPress?: () => void;\n}\n\nconst Icon = styled.View<{ size: number; color: string }>`\n  background: ${({ color }) => color};\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  border-radius: ${({ size }) => size / 4}px;\n`;\n\nconst PlaceholderIcon: React.FC<Props> = ({\n  color = 'red',\n  size = 24,\n  onPress,\n}) => (\n  <Cell onPress={onPress}>\n    <Icon color={color} size={size} />\n  </Cell>\n);\n\nexport { PlaceholderIcon };\n","import { NotificationContext } from '#/context/notifications';\nimport { useContext } from 'react';\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  return context;\n};\n","module.exports = __webpack_public_path__ + \"static/media/tourist.e3fa36f8.png\";","import { NotificationInfo } from '#/context/notifications';\nimport { Cell, Row } from '#/components/Row';\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Icon } from '../Icon';\nimport { Body1 } from '#/typography';\n\ntype Props = {\n  notification: NotificationInfo;\n  dismiss: () => void;\n};\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.destructive};\n  margin: 5px;\n  border-radius: 5px;\n`;\n\nconst Notification: React.FC<Props> = ({ notification, dismiss }) => {\n  return (\n    <Wrapper>\n      <Row\n        left={(\n          <Cell><Icon name=\"alert-circle\" color=\"destructiveAlt\" /></Cell>\n        )}\n        right={\n          <Cell onPress={dismiss}>\n            <Icon name=\"x\" color=\"destructiveAlt\" />\n          </Cell>\n        }\n      >\n        <Body1 color=\"destructiveAlt\">{notification.text}</Body1>\n      </Row>\n    </Wrapper>\n  );\n};\n\nexport { Notification };\n","import { Notification } from '#/components/notification';\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\n\ntype NotificationInfo = {\n  type: 'info' | 'error';\n  text: string;\n  autoHideAfter?: number;\n  actions?: {\n    title: string;\n    onPress: () => void;\n    dismissOnPress: boolean;\n  };\n};\n\ntype InternalNotification = NotificationInfo & {\n  id: number;\n};\n\ntype NotificationContextValue = {\n  show: (notification: NotificationInfo) => number;\n  dismiss: (id: number) => void;\n};\n\nconst NotificationContext = createContext<NotificationContextValue>(\n  undefined as any\n);\n\nconst Wrapper = styled.View<{ top: number }>`\n  position: absolute;\n  top: ${({ top }) => top}px;\n  width: 100%;\n  z-index: 1000;\n`;\n\nlet nextId = 0;\n\nconst NotificationProvider: React.FC = ({ children }) => {\n  const [notifications, setNotifications] = useState<InternalNotification[]>(\n    []\n  );\n  const insets = useSafeAreaInsets();\n\n  const show = useCallback(\n    (notification: NotificationInfo) => {\n      const id = nextId++;\n      setNotifications(current => [...current, { ...notification, id }]);\n      return id;\n    },\n    [setNotifications]\n  );\n\n  const dismiss = useCallback(\n    (id: number) => {\n      setNotifications(current => current.filter(c => c.id !== id));\n    },\n    [setNotifications]\n  );\n\n  const context = useMemo(\n    () => ({\n      show,\n      dismiss,\n    }),\n    [show, dismiss]\n  );\n\n  return (\n    <NotificationContext.Provider value={context}>\n      {notifications.length > 0 && (\n        <Wrapper top={insets.top}>\n          {notifications.map((notification, index) => (\n            <Notification\n              dismiss={() => dismiss(notification.id)}\n              key={index}\n              notification={notification}\n            />\n          ))}\n        </Wrapper>\n      )}\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport type { NotificationInfo };\nexport { NotificationProvider, NotificationContext };\n","module.exports = __webpack_public_path__ + \"static/media/error.f81af091.png\";","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>;\n};\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>;\n};\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type CommentCreateParameters = {\n  content?: InputMaybe<Scalars['String']>;\n  post: Scalars['String'];\n};\n\nexport type CommentModel = {\n  __typename?: 'CommentModel';\n  content: Scalars['String'];\n  created: Scalars['DateTime'];\n  creator: UserModel;\n  id: Scalars['String'];\n  post: PostModel;\n};\n\nexport type FeedModel = {\n  __typename?: 'FeedModel';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  posts: Array<PostModel>;\n  users: Array<UserFeedRelationModel>;\n};\n\nexport type FeedModelPostsArgs = {\n  filter?: InputMaybe<PostFindParameters>;\n};\n\nexport type MediaModel = {\n  __typename?: 'MediaModel';\n  aspect?: Maybe<Scalars['Float']>;\n  contentType?: Maybe<Scalars['String']>;\n  created?: Maybe<Scalars['DateTime']>;\n  creator: UserModel;\n  filename?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  lowres?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Float']>;\n  size: Scalars['Float'];\n  type?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addUserToFeed: UserFeedRelationModel;\n  createAuthToken: Scalars['String'];\n  createComment: CommentModel;\n  createFeed: FeedModel;\n  createPost: PostModel;\n  inviteProfile: UserModel;\n  registerPushNotification: PushRegistrationModel;\n  removePost: Scalars['Boolean'];\n  removeUserFromFeed: Scalars['Boolean'];\n  setProfileAvatar: UserModel;\n};\n\nexport type MutationAddUserToFeedArgs = {\n  accessType: Scalars['String'];\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\nexport type MutationCreateAuthTokenArgs = {\n  secret: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type MutationCreateCommentArgs = {\n  params: CommentCreateParameters;\n};\n\nexport type MutationCreateFeedArgs = {\n  name: Scalars['String'];\n};\n\nexport type MutationCreatePostArgs = {\n  params: PostCreateParameters;\n};\n\nexport type MutationInviteProfileArgs = {\n  email: Scalars['String'];\n};\n\nexport type MutationRegisterPushNotificationArgs = {\n  token: Scalars['String'];\n};\n\nexport type MutationRemovePostArgs = {\n  id: Scalars['String'];\n};\n\nexport type MutationRemoveUserFromFeedArgs = {\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\nexport type MutationSetProfileAvatarArgs = {\n  mediaId?: InputMaybe<Scalars['String']>;\n};\n\nexport type PostCreateParameters = {\n  body?: InputMaybe<Scalars['String']>;\n  feed: Scalars['String'];\n  media: Array<Scalars['String']>;\n};\n\nexport type PostFindParameters = {\n  after?: InputMaybe<Scalars['DateTime']>;\n  feeds?: InputMaybe<Array<Scalars['String']>>;\n  limit?: InputMaybe<Scalars['Float']>;\n  offset?: InputMaybe<Scalars['Float']>;\n};\n\nexport type PostModel = {\n  __typename?: 'PostModel';\n  body?: Maybe<Scalars['String']>;\n  commentCount: Scalars['Float'];\n  comments: Array<CommentModel>;\n  created: Scalars['DateTime'];\n  creator?: Maybe<UserModel>;\n  feed: FeedModel;\n  id: Scalars['String'];\n  media: Array<MediaModel>;\n};\n\nexport type PushRegistrationModel = {\n  __typename?: 'PushRegistrationModel';\n  device?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  feed: FeedModel;\n  feeds: Array<FeedModel>;\n  post: PostModel;\n  posts: Array<PostModel>;\n  profile?: Maybe<UserModel>;\n  users: Array<UserModel>;\n};\n\nexport type QueryFeedArgs = {\n  id: Scalars['String'];\n};\n\nexport type QueryPostArgs = {\n  id: Scalars['String'];\n};\n\nexport type QueryPostsArgs = {\n  filter: PostFindParameters;\n};\n\nexport type UserFeedRelationModel = {\n  __typename?: 'UserFeedRelationModel';\n  accessType: Scalars['String'];\n  feed: FeedModel;\n  user: UserModel;\n};\n\nexport type UserModel = {\n  __typename?: 'UserModel';\n  admin: Scalars['Boolean'];\n  avatar?: Maybe<Scalars['String']>;\n  feeds: Array<UserFeedRelationModel>;\n  id: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  username: Scalars['String'];\n};\n\nexport type CreateCommentMutationVariables = Exact<{\n  params: CommentCreateParameters;\n}>;\n\nexport type CreateCommentMutation = {\n  __typename?: 'Mutation';\n  createComment: { __typename?: 'CommentModel'; id: string };\n};\n\nexport type FeedsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type FeedsQuery = {\n  __typename?: 'Query';\n  feeds: Array<{\n    __typename?: 'FeedModel';\n    id: string;\n    name: string;\n    posts: Array<{\n      __typename?: 'PostModel';\n      id: string;\n      body?: string | null;\n      media: Array<{ __typename?: 'MediaModel'; id: string }>;\n    }>;\n  }>;\n};\n\nexport type FeedQueryVariables = Exact<{\n  feedId: Scalars['String'];\n}>;\n\nexport type FeedQuery = {\n  __typename?: 'Query';\n  feed: {\n    __typename?: 'FeedModel';\n    id: string;\n    name: string;\n    users: Array<{\n      __typename?: 'UserFeedRelationModel';\n      accessType: string;\n      user: {\n        __typename?: 'UserModel';\n        id: string;\n        name?: string | null;\n        username: string;\n      };\n    }>;\n  };\n};\n\nexport type CreateFeedMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\nexport type CreateFeedMutation = {\n  __typename?: 'Mutation';\n  createFeed: { __typename?: 'FeedModel'; id: string };\n};\n\nexport type AddUserToFeedMutationVariables = Exact<{\n  accessType: Scalars['String'];\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\nexport type AddUserToFeedMutation = {\n  __typename?: 'Mutation';\n  addUserToFeed: { __typename?: 'UserFeedRelationModel'; accessType: string };\n};\n\nexport type RemoveUserFromFeedMutationVariables = Exact<{\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\nexport type RemoveUserFromFeedMutation = {\n  __typename?: 'Mutation';\n  removeUserFromFeed: boolean;\n};\n\nexport type PostQueryVariables = Exact<{\n  postId: Scalars['String'];\n}>;\n\nexport type PostQuery = {\n  __typename?: 'Query';\n  post: {\n    __typename?: 'PostModel';\n    id: string;\n    created: any;\n    creator?: {\n      __typename?: 'UserModel';\n      id: string;\n      name?: string | null;\n      avatar?: string | null;\n      username: string;\n    } | null;\n    comments: Array<{\n      __typename?: 'CommentModel';\n      id: string;\n      content: string;\n      created: any;\n      creator: {\n        __typename?: 'UserModel';\n        username: string;\n        name?: string | null;\n        id: string;\n        avatar?: string | null;\n      };\n    }>;\n    media: Array<{\n      __typename?: 'MediaModel';\n      id: string;\n      contentType?: string | null;\n      lowres?: string | null;\n      aspect?: number | null;\n      order?: number | null;\n      created?: any | null;\n      type?: string | null;\n    }>;\n  };\n};\n\nexport type PostsQueryVariables = Exact<{\n  filter: PostFindParameters;\n}>;\n\nexport type PostsQuery = {\n  __typename?: 'Query';\n  posts: Array<{\n    __typename?: 'PostModel';\n    id: string;\n    body?: string | null;\n    commentCount: number;\n    created: any;\n    creator?: {\n      __typename?: 'UserModel';\n      name?: string | null;\n      username: string;\n      avatar?: string | null;\n    } | null;\n    media: Array<{\n      __typename?: 'MediaModel';\n      id: string;\n      aspect?: number | null;\n      type?: string | null;\n    }>;\n  }>;\n};\n\nexport type CreatePostMutationVariables = Exact<{\n  params: PostCreateParameters;\n}>;\n\nexport type CreatePostMutation = {\n  __typename?: 'Mutation';\n  createPost: { __typename?: 'PostModel'; id: string };\n};\n\nexport type RemovePostMutationVariables = Exact<{\n  removePostId: Scalars['String'];\n}>;\n\nexport type RemovePostMutation = {\n  __typename?: 'Mutation';\n  removePost: boolean;\n};\n\nexport type ProfileQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type ProfileQuery = {\n  __typename?: 'Query';\n  profile?: {\n    __typename?: 'UserModel';\n    id: string;\n    username: string;\n    name?: string | null;\n    admin: boolean;\n    avatar?: string | null;\n    feeds: Array<{\n      __typename?: 'UserFeedRelationModel';\n      accessType: string;\n      feed: { __typename?: 'FeedModel'; id: string; name: string };\n    }>;\n  } | null;\n};\n\nexport type SetProfileAvatarMutationVariables = Exact<{\n  mediaId?: InputMaybe<Scalars['String']>;\n}>;\n\nexport type SetProfileAvatarMutation = {\n  __typename?: 'Mutation';\n  setProfileAvatar: { __typename?: 'UserModel'; id: string };\n};\n\nexport type RegisterPushNotificationMutationVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\nexport type RegisterPushNotificationMutation = {\n  __typename?: 'Mutation';\n  registerPushNotification: {\n    __typename?: 'PushRegistrationModel';\n    id: string;\n  };\n};\n\nexport type UsersQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type UsersQuery = {\n  __typename?: 'Query';\n  users: Array<{\n    __typename?: 'UserModel';\n    id: string;\n    name?: string | null;\n    username: string;\n    avatar?: string | null;\n  }>;\n};\n\nexport const CreateCommentDocument = gql`\n  mutation CreateComment($params: CommentCreateParameters!) {\n    createComment(params: $params) {\n      id\n    }\n  }\n`;\nexport type CreateCommentMutationFn = Apollo.MutationFunction<\n  CreateCommentMutation,\n  CreateCommentMutationVariables\n>;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreateCommentMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateCommentMutation,\n    CreateCommentMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    CreateCommentMutation,\n    CreateCommentMutationVariables\n  >(CreateCommentDocument, options);\n}\nexport type CreateCommentMutationHookResult = ReturnType<\n  typeof useCreateCommentMutation\n>;\nexport type CreateCommentMutationResult =\n  Apollo.MutationResult<CreateCommentMutation>;\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<\n  CreateCommentMutation,\n  CreateCommentMutationVariables\n>;\nexport const FeedsDocument = gql`\n  query Feeds {\n    feeds {\n      id\n      name\n      posts {\n        id\n        body\n        media {\n          id\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useFeedsQuery__\n *\n * To run a query within a React component, call `useFeedsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFeedsQuery(\n  baseOptions?: Apollo.QueryHookOptions<FeedsQuery, FeedsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<FeedsQuery, FeedsQueryVariables>(\n    FeedsDocument,\n    options\n  );\n}\nexport function useFeedsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<FeedsQuery, FeedsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<FeedsQuery, FeedsQueryVariables>(\n    FeedsDocument,\n    options\n  );\n}\nexport type FeedsQueryHookResult = ReturnType<typeof useFeedsQuery>;\nexport type FeedsLazyQueryHookResult = ReturnType<typeof useFeedsLazyQuery>;\nexport type FeedsQueryResult = Apollo.QueryResult<\n  FeedsQuery,\n  FeedsQueryVariables\n>;\nexport const FeedDocument = gql`\n  query Feed($feedId: String!) {\n    feed(id: $feedId) {\n      id\n      name\n      users {\n        accessType\n        user {\n          id\n          name\n          username\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useFeedQuery__\n *\n * To run a query within a React component, call `useFeedQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedQuery({\n *   variables: {\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useFeedQuery(\n  baseOptions: Apollo.QueryHookOptions<FeedQuery, FeedQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n}\nexport function useFeedLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<FeedQuery, FeedQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<FeedQuery, FeedQueryVariables>(\n    FeedDocument,\n    options\n  );\n}\nexport type FeedQueryHookResult = ReturnType<typeof useFeedQuery>;\nexport type FeedLazyQueryHookResult = ReturnType<typeof useFeedLazyQuery>;\nexport type FeedQueryResult = Apollo.QueryResult<FeedQuery, FeedQueryVariables>;\nexport const CreateFeedDocument = gql`\n  mutation CreateFeed($name: String!) {\n    createFeed(name: $name) {\n      id\n    }\n  }\n`;\nexport type CreateFeedMutationFn = Apollo.MutationFunction<\n  CreateFeedMutation,\n  CreateFeedMutationVariables\n>;\n\n/**\n * __useCreateFeedMutation__\n *\n * To run a mutation, you first call `useCreateFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createFeedMutation, { data, loading, error }] = useCreateFeedMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateFeedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateFeedMutation,\n    CreateFeedMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<CreateFeedMutation, CreateFeedMutationVariables>(\n    CreateFeedDocument,\n    options\n  );\n}\nexport type CreateFeedMutationHookResult = ReturnType<\n  typeof useCreateFeedMutation\n>;\nexport type CreateFeedMutationResult =\n  Apollo.MutationResult<CreateFeedMutation>;\nexport type CreateFeedMutationOptions = Apollo.BaseMutationOptions<\n  CreateFeedMutation,\n  CreateFeedMutationVariables\n>;\nexport const AddUserToFeedDocument = gql`\n  mutation AddUserToFeed(\n    $accessType: String!\n    $userId: String!\n    $feedId: String!\n  ) {\n    addUserToFeed(accessType: $accessType, userId: $userId, feedId: $feedId) {\n      accessType\n    }\n  }\n`;\nexport type AddUserToFeedMutationFn = Apollo.MutationFunction<\n  AddUserToFeedMutation,\n  AddUserToFeedMutationVariables\n>;\n\n/**\n * __useAddUserToFeedMutation__\n *\n * To run a mutation, you first call `useAddUserToFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddUserToFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addUserToFeedMutation, { data, loading, error }] = useAddUserToFeedMutation({\n *   variables: {\n *      accessType: // value for 'accessType'\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useAddUserToFeedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    AddUserToFeedMutation,\n    AddUserToFeedMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    AddUserToFeedMutation,\n    AddUserToFeedMutationVariables\n  >(AddUserToFeedDocument, options);\n}\nexport type AddUserToFeedMutationHookResult = ReturnType<\n  typeof useAddUserToFeedMutation\n>;\nexport type AddUserToFeedMutationResult =\n  Apollo.MutationResult<AddUserToFeedMutation>;\nexport type AddUserToFeedMutationOptions = Apollo.BaseMutationOptions<\n  AddUserToFeedMutation,\n  AddUserToFeedMutationVariables\n>;\nexport const RemoveUserFromFeedDocument = gql`\n  mutation RemoveUserFromFeed($userId: String!, $feedId: String!) {\n    removeUserFromFeed(userId: $userId, feedId: $feedId)\n  }\n`;\nexport type RemoveUserFromFeedMutationFn = Apollo.MutationFunction<\n  RemoveUserFromFeedMutation,\n  RemoveUserFromFeedMutationVariables\n>;\n\n/**\n * __useRemoveUserFromFeedMutation__\n *\n * To run a mutation, you first call `useRemoveUserFromFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveUserFromFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeUserFromFeedMutation, { data, loading, error }] = useRemoveUserFromFeedMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useRemoveUserFromFeedMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RemoveUserFromFeedMutation,\n    RemoveUserFromFeedMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    RemoveUserFromFeedMutation,\n    RemoveUserFromFeedMutationVariables\n  >(RemoveUserFromFeedDocument, options);\n}\nexport type RemoveUserFromFeedMutationHookResult = ReturnType<\n  typeof useRemoveUserFromFeedMutation\n>;\nexport type RemoveUserFromFeedMutationResult =\n  Apollo.MutationResult<RemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationOptions = Apollo.BaseMutationOptions<\n  RemoveUserFromFeedMutation,\n  RemoveUserFromFeedMutationVariables\n>;\nexport const PostDocument = gql`\n  query Post($postId: String!) {\n    post(id: $postId) {\n      id\n      creator {\n        id\n        name\n        avatar\n        username\n      }\n      created\n      comments {\n        id\n        creator {\n          username\n          name\n          id\n          avatar\n        }\n        content\n        created\n      }\n      media {\n        id\n        contentType\n        lowres\n        aspect\n        order\n        created\n        type\n      }\n    }\n  }\n`;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function usePostQuery(\n  baseOptions: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n}\nexport function usePostLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(\n    PostDocument,\n    options\n  );\n}\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n  query Posts($filter: PostFindParameters!) {\n    posts(filter: $filter) {\n      id\n      body\n      commentCount\n      creator {\n        name\n        username\n        avatar\n      }\n      created\n      media {\n        id\n        aspect\n        type\n      }\n    }\n  }\n`;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function usePostsQuery(\n  baseOptions: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<PostsQuery, PostsQueryVariables>(\n    PostsDocument,\n    options\n  );\n}\nexport function usePostsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(\n    PostsDocument,\n    options\n  );\n}\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<\n  PostsQuery,\n  PostsQueryVariables\n>;\nexport const CreatePostDocument = gql`\n  mutation CreatePost($params: PostCreateParameters!) {\n    createPost(params: $params) {\n      id\n    }\n  }\n`;\nexport type CreatePostMutationFn = Apollo.MutationFunction<\n  CreatePostMutation,\n  CreatePostMutationVariables\n>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreatePostMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreatePostMutation,\n    CreatePostMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(\n    CreatePostDocument,\n    options\n  );\n}\nexport type CreatePostMutationHookResult = ReturnType<\n  typeof useCreatePostMutation\n>;\nexport type CreatePostMutationResult =\n  Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<\n  CreatePostMutation,\n  CreatePostMutationVariables\n>;\nexport const RemovePostDocument = gql`\n  mutation RemovePost($removePostId: String!) {\n    removePost(id: $removePostId)\n  }\n`;\nexport type RemovePostMutationFn = Apollo.MutationFunction<\n  RemovePostMutation,\n  RemovePostMutationVariables\n>;\n\n/**\n * __useRemovePostMutation__\n *\n * To run a mutation, you first call `useRemovePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemovePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removePostMutation, { data, loading, error }] = useRemovePostMutation({\n *   variables: {\n *      removePostId: // value for 'removePostId'\n *   },\n * });\n */\nexport function useRemovePostMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RemovePostMutation,\n    RemovePostMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<RemovePostMutation, RemovePostMutationVariables>(\n    RemovePostDocument,\n    options\n  );\n}\nexport type RemovePostMutationHookResult = ReturnType<\n  typeof useRemovePostMutation\n>;\nexport type RemovePostMutationResult =\n  Apollo.MutationResult<RemovePostMutation>;\nexport type RemovePostMutationOptions = Apollo.BaseMutationOptions<\n  RemovePostMutation,\n  RemovePostMutationVariables\n>;\nexport const ProfileDocument = gql`\n  query Profile {\n    profile {\n      id\n      username\n      name\n      admin\n      avatar\n      feeds {\n        feed {\n          id\n          name\n        }\n        accessType\n      }\n    }\n  }\n`;\n\n/**\n * __useProfileQuery__\n *\n * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProfileQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProfileQuery(\n  baseOptions?: Apollo.QueryHookOptions<ProfileQuery, ProfileQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<ProfileQuery, ProfileQueryVariables>(\n    ProfileDocument,\n    options\n  );\n}\nexport function useProfileLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<ProfileQuery, ProfileQueryVariables>(\n    ProfileDocument,\n    options\n  );\n}\nexport type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;\nexport type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;\nexport type ProfileQueryResult = Apollo.QueryResult<\n  ProfileQuery,\n  ProfileQueryVariables\n>;\nexport const SetProfileAvatarDocument = gql`\n  mutation SetProfileAvatar($mediaId: String) {\n    setProfileAvatar(mediaId: $mediaId) {\n      id\n    }\n  }\n`;\nexport type SetProfileAvatarMutationFn = Apollo.MutationFunction<\n  SetProfileAvatarMutation,\n  SetProfileAvatarMutationVariables\n>;\n\n/**\n * __useSetProfileAvatarMutation__\n *\n * To run a mutation, you first call `useSetProfileAvatarMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProfileAvatarMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProfileAvatarMutation, { data, loading, error }] = useSetProfileAvatarMutation({\n *   variables: {\n *      mediaId: // value for 'mediaId'\n *   },\n * });\n */\nexport function useSetProfileAvatarMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SetProfileAvatarMutation,\n    SetProfileAvatarMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SetProfileAvatarMutation,\n    SetProfileAvatarMutationVariables\n  >(SetProfileAvatarDocument, options);\n}\nexport type SetProfileAvatarMutationHookResult = ReturnType<\n  typeof useSetProfileAvatarMutation\n>;\nexport type SetProfileAvatarMutationResult =\n  Apollo.MutationResult<SetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationOptions = Apollo.BaseMutationOptions<\n  SetProfileAvatarMutation,\n  SetProfileAvatarMutationVariables\n>;\nexport const RegisterPushNotificationDocument = gql`\n  mutation RegisterPushNotification($token: String!) {\n    registerPushNotification(token: $token) {\n      id\n    }\n  }\n`;\nexport type RegisterPushNotificationMutationFn = Apollo.MutationFunction<\n  RegisterPushNotificationMutation,\n  RegisterPushNotificationMutationVariables\n>;\n\n/**\n * __useRegisterPushNotificationMutation__\n *\n * To run a mutation, you first call `useRegisterPushNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterPushNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerPushNotificationMutation, { data, loading, error }] = useRegisterPushNotificationMutation({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useRegisterPushNotificationMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RegisterPushNotificationMutation,\n    RegisterPushNotificationMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    RegisterPushNotificationMutation,\n    RegisterPushNotificationMutationVariables\n  >(RegisterPushNotificationDocument, options);\n}\nexport type RegisterPushNotificationMutationHookResult = ReturnType<\n  typeof useRegisterPushNotificationMutation\n>;\nexport type RegisterPushNotificationMutationResult =\n  Apollo.MutationResult<RegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationOptions =\n  Apollo.BaseMutationOptions<\n    RegisterPushNotificationMutation,\n    RegisterPushNotificationMutationVariables\n  >;\nexport const UsersDocument = gql`\n  query Users {\n    users {\n      id\n      name\n      username\n      avatar\n    }\n  }\n`;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(\n  baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<UsersQuery, UsersQueryVariables>(\n    UsersDocument,\n    options\n  );\n}\nexport function useUsersLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(\n    UsersDocument,\n    options\n  );\n}\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = Apollo.QueryResult<\n  UsersQuery,\n  UsersQueryVariables\n>;\n","import { ApolloError } from '@apollo/client';\nimport { useEffect } from 'react';\nimport { useNotifications } from './notifications';\n\nexport const useErrorNotification = (error?: ApolloError) => {\n  const { show, dismiss } = useNotifications();\n\n  useEffect(() => {\n    if (!error) {\n      return;\n    }\n    console.error(error);\n    const id = show({\n      type: 'error',\n      text: error.message,\n    });\n\n    return () => {\n      dismiss(id);\n    };\n  }, [error, show, dismiss]);\n};\n","import { useProfileQuery } from '#/hooks/graphql';\nimport { useErrorNotification } from '#/hooks/utils';\nimport { createContext, useMemo, useState } from 'react';\n\ntype BaseType = ReturnType<typeof useProfileQuery>;\n\ntype ProfileContextValue = BaseType & {\n  profile: Exclude<BaseType['data'], undefined>['profile'];\n  feeds: Exclude<\n    Exclude<BaseType['data'], undefined>['profile'],\n    null | undefined\n  >['feeds'];\n};\n\nconst ProfileContext = createContext<ProfileContextValue>(undefined as any);\n\nconst ProfileProvider: React.FC = ({ children }) => {\n  const { data, ...props } = useProfileQuery({\n    variables: {},\n  });\n  useErrorNotification(props.error);\n\n  const feeds = useMemo(() => data?.profile?.feeds || [], [data]);\n  const profile = useMemo(() => data?.profile, [data]);\n\n  const context = useMemo(\n    () => ({\n      ...props,\n      data,\n      feeds,\n      profile,\n    }),\n    [props, data, feeds]\n  );\n\n  return (\n    <ProfileContext.Provider value={context}>\n      {children}\n    </ProfileContext.Provider>\n  );\n};\n\nexport { ProfileContext, ProfileProvider };\n","import React from 'react';\nimport { usePostsQuery } from '#/hooks/graphql';\nimport { useErrorNotification } from '#/hooks/utils';\nimport { createContext, useMemo, useState } from 'react';\n\ntype BaseType = ReturnType<typeof usePostsQuery>;\n\ntype HomeContextValue = BaseType & {\n  posts: Exclude<BaseType['data'], undefined>['posts'];\n  feeds: string[];\n  setFeeds: React.Dispatch<React.SetStateAction<string[]>>;\n};\n\nconst HomeContext = createContext<HomeContextValue>(undefined as any);\n\nconst HomeProvider: React.FC = ({ children }) => {\n  const [feeds, setFeeds] = useState<string[]>([]);\n  const { data, ...props } = usePostsQuery({\n    variables: {\n      filter: {\n        feeds: feeds.length > 0 ? feeds : undefined,\n        limit: 3,\n        offset: 0,\n      },\n    },\n  });\n  useErrorNotification(props.error);\n\n  const posts = useMemo(() => data?.posts || [], [data]);\n\n  const context = useMemo(\n    () => ({\n      ...props,\n      data,\n      feeds,\n      posts,\n      setFeeds,\n    }),\n    [props, data, feeds, setFeeds]\n  );\n\n  return (\n    <HomeContext.Provider value={context}>{children}</HomeContext.Provider>\n  );\n};\n\nexport { HomeContext, HomeProvider };\n","import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport React, { useContext, useMemo } from 'react';\nimport { ServerContext } from '../server';\nimport { ProfileProvider } from '../profile';\nimport { HomeProvider } from '../home';\n\nconst GraphQLProvider: React.FC = ({ children }) => {\n  const { token, domain } = useContext(ServerContext);\n  const apolloClient = useMemo(() => {\n    if (!domain) {\n      return undefined;\n    }\n    const link = createHttpLink({\n      uri: `${domain}/graphql`,\n    });\n    const authLink = setContext((_, { headers }) => {\n      return {\n        headers: {\n          ...headers,\n          authorization: `bearer ${token}`,\n        },\n      };\n    });\n    return new ApolloClient({\n      cache: new InMemoryCache({\n        typePolicies: {\n          Query: {\n            fields: {\n              posts: {\n                keyArgs: false,\n                merge(existing: any = [], incoming: any) {\n                  const clone = existing.slice();\n                  for (let next of incoming) {\n                    if (!clone.find((p: any) => p.__ref === next.__ref)) {\n                      clone.push(next);\n                    }\n                  }\n                  return clone;\n                },\n              },\n            },\n          },\n        },\n      }),\n      link: authLink.concat(link),\n    });\n  }, [token, domain]);\n\n  if (!apolloClient) {\n    return <>{children}</>;\n  }\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      <ProfileProvider>\n        <HomeProvider>{children}</HomeProvider>\n      </ProfileProvider>\n    </ApolloProvider>\n  );\n};\n\nexport { GraphQLProvider };\n","import Theme from './Theme';\n\nconst lightTheme: Theme = {\n  colors: {\n    primary: '#1abc9c',\n    icon: '#1abc9c',\n    destructive: '#e74c3c',\n    destructiveAlt: '#fff',\n    header: '#f9f9f9',\n    shade: '#ededed',\n    input: '#ddd',\n    secondary: 'blue',\n    shadow: '#000',\n    background: '#fff',\n    text: '#000',\n    textShade: '#999',\n  },\n  sizes: {\n    corners: 5,\n    icons: 24,\n  },\n  margins: {\n    small: 8,\n    medium: 16,\n    large: 24,\n  },\n  font: {\n    baseSize: 14,\n  },\n};\n\nexport default lightTheme;\n","import Theme from './Theme';\nimport light from './light';\n\nconst darkTheme: Theme = {\n  ...light,\n  colors: {\n    ...light.colors,\n    primary: '#e67e22',\n    input: '#333',\n    header: '#222',\n    icon: '#e67e22',\n    background: '#151515',\n    shadow: '#000',\n    secondary: 'blue',\n    shade: '#000',\n    text: '#fff',\n    textShade: '#666',\n  },\n};\n\nexport default darkTheme;\n","export const linkingConfig = {\n  prefixes: ['pictoroma://'],\n  screens: {\n    AcceptInvitation: 'login/accept-invite',\n  },\n};\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { BlurView } from 'expo-blur';\n\nconst Wrapper = styled(BlurView)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 100;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Activity = styled.ActivityIndicator``;\n\nconst OverlayLoader: React.FC<{}> = () => (\n  <Wrapper intensity={20}>\n    <Activity />\n  </Wrapper>\n);\n\nexport { OverlayLoader };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { Icon } from '../Icon';\nimport { Image } from '../Image';\n\ntype Props = {\n  mediaId?: string;\n  onPress?: () => void;\n};\n\nconst Touchable = styled.TouchableOpacity``;\nconst Wrapper = styled.View`\n  position: relative;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n\nconst Avatar: React.FC<Props> = ({ mediaId, onPress }) => {\n  const content = (\n    <Wrapper>\n      {mediaId ? (\n        <Image media={{ aspect: 1, id: mediaId }} />\n      ) : (\n        <Icon name=\"user\" />\n      )}\n    </Wrapper>\n  );\n\n  if (onPress) {\n    return <Touchable onPress={onPress}>{content}</Touchable>;\n  }\n  return content;\n};\n\nexport { Avatar };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native';\nimport { Theme } from '#/theme';\nimport { Link } from '#/typography';\n\ninterface Props {\n  title: string;\n  onPress?: () => any;\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  type?: 'primary' | 'secondary' | 'destructive';\n}\n\nconst Touch = styled.TouchableOpacity``;\n\nconst getColors = (type: Props['type'], theme: Theme) => {\n  if (type === 'secondary') {\n    return { bg: theme.colors.secondary, fg: '#fff' };\n  }\n  if (type === 'destructive') {\n    return { bg: 'transparent', fg: theme.colors.destructive };\n  }\n  return { bg: theme.colors.primary, fg: '#fff' };\n};\n\nconst Wrapper = styled.View<{\n  theme: Theme;\n  type: Props['type'];\n}>`\n  background: ${({ theme, type }) => getColors(type, theme).bg};\n  padding: ${({ theme }) => theme.margins.small}px;\n  border-radius: ${({ theme }) => theme.sizes.corners}px;\n  align-items: center;\n`;\n\nconst StyledLink = styled<{\n  theme: Theme;\n  type: Props['type'];\n}>(Link)`\n  color: ${({ theme, type }) => getColors(type, theme).fg};\n  font-weight: bold;\n`;\n\nconst Button: React.FC<Props> = ({\n  title,\n  onPress,\n  accessibilityHint,\n  accessibilityRole,\n  accessibilityLabel,\n  type,\n}) => (\n  <Touch\n    onPress={onPress}\n    accessible\n    accessibilityHint={accessibilityHint}\n    accessibilityRole={accessibilityRole}\n    accessibilityLabel={accessibilityLabel}\n  >\n    <Wrapper type={type}>\n      <StyledLink type={type}>{title}</StyledLink>\n    </Wrapper>\n  </Touch>\n);\n\nexport { Button };\n","import ReactDOM from 'react-dom';\nimport React, { useMemo, useEffect, ReactNode } from 'react';\n\ninterface Props {\n  visible: boolean;\n  children: ReactNode;\n}\n\nconst Modal: React.FC<Props> = ({ visible, children }) => {\n  const elm = useMemo(() => {\n    const newElm = document.createElement('div');\n    newElm.style.position = 'fixed';\n    newElm.style.display = 'flex';\n    newElm.style.flexDirection = 'column';\n    newElm.style.left = '0px';\n    newElm.style.top = '0px';\n    newElm.style.width = '100%';\n    newElm.style.height = '100%';\n    newElm.style.transition = 'transform 0.3s';\n    newElm.style.transform = 'translateY(100%)';\n    return newElm;\n  }, []);\n  useEffect(() => {\n    document.body.appendChild(elm);\n    return () => {\n      document.body.removeChild(elm);\n    };\n  }, [elm]);\n  useEffect(() => {\n    if (visible) {\n      elm.style.transform = 'translateY(0)';\n    } else {\n      elm.style.transform = 'translateY(100%)';\n    }\n  }, [elm, visible]);\n\n  return ReactDOM.createPortal(<>{children}</>, elm);\n};\n\nexport { Modal };\n","import React, { useState, useEffect, ReactNode } from 'react';\nimport * as Sentry from 'sentry-expo';\nimport styled from 'styled-components/native';\nimport { Keyboard, Platform } from 'react-native';\nimport { OverlayLoader } from '../loaders';\nimport errorImage from '#/../assets/images/error.png';\nimport { Body1, Overline } from '#/typography';\nimport { Button } from '../Button';\n\nconst KeyboardAvoiding = styled.KeyboardAvoidingView`\n  flex: 1;\n`;\n\nconst Pressable = styled.Pressable`\n  flex: 1;\n`;\n\nconst ErrorWrapper = styled.View`\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n`;\n\nconst ErrorImage = styled.Image`\n  width: 150px;\n  height: 150px;\n`;\n\ntype Props = {\n  children: ReactNode;\n  loading?: boolean;\n};\n\ntype ErrorBoundState = {\n  hasError: boolean;\n  error?: any;\n};\n\ntype ErrorBoundProps = {\n  children: ReactNode;\n};\n\nclass ErrorBoundary extends React.Component<ErrorBoundProps, ErrorBoundState> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    Sentry.Native.captureException(error, {\n      extra: errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <ErrorWrapper>\n          <ErrorImage source={errorImage} />\n          <Body1>An error has occured</Body1>\n          <Overline>{this.state.error?.toString()}</Overline>\n          <Button\n            onPress={() => this.setState({ hasError: false, error: undefined })}\n            title=\"Retry\"\n          />\n        </ErrorWrapper>\n      );\n    }\n    return <>{this.props.children}</>;\n  }\n}\n\nconst Page: React.FC<Props> = ({ children, loading }) => {\n  const [keyboardShown, setKeyboardShown] = useState(false);\n  useEffect(() => {\n    const keyboardDidShow = () => setKeyboardShown(true);\n    const keyboardDidHide = () => setKeyboardShown(false);\n    const show = Keyboard.addListener('keyboardDidShow', keyboardDidShow);\n    const hide = Keyboard.addListener('keyboardDidHide', keyboardDidHide);\n\n    return () => {\n      show.remove();\n      hide.remove();\n    };\n  }, []);\n  return (\n    <Pressable disabled={!keyboardShown} onPress={() => Keyboard.dismiss()}>\n      <KeyboardAvoiding behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        {loading && <OverlayLoader />}\n        <ErrorBoundary>{children}</ErrorBoundary>\n      </KeyboardAvoiding>\n    </Pressable>\n  );\n};\n\nexport { Page };\n","import React, { ReactNode } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\nimport { Icon } from '#/components/Icon';\nimport { Modal } from '#/components/Modal';\nimport { Row, Cell } from '#/components/Row';\nimport { Page } from '#/components/Page';\n\ninterface Props {\n  visible: boolean;\n  onClose?: () => void;\n  children: ReactNode;\n}\n\nconst Top = styled.Pressable`\n  flex: 1;\n`;\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.background};\n  width: 100%;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-offset: 0 0;\n  shadow-opacity: 1;\n  shadow-radius: 200px;\n  border-radius: 12px;\n  margin-bottom: -12px;\n`;\n\nconst Outer = styled.View`\n  flex: 1;\n`;\n\nconst Popup: React.FC<Props> = ({ visible, children, onClose }) => {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Modal visible={visible} transparent animationType=\"slide\">\n      <Page>\n        <Outer>\n          <Top onPress={onClose} />\n          <Wrapper style={{ paddingBottom: insets.bottom + 12 }}>\n            <Row\n              right={\n                <Cell onPress={onClose}>\n                  <Icon name=\"x-circle\" />\n                </Cell>\n              }\n            />\n            {children}\n          </Wrapper>\n        </Outer>\n      </Page>\n    </Modal>\n  );\n};\n\nexport { Popup };\n","import React, { useState } from 'react';\nimport { Button } from '#/components/Button';\nimport { Icon } from '#/components/Icon';\nimport { Popup } from '#/components/Popup';\nimport { Cell, Row } from '#/components/Row';\n\ninterface PostFilterProps {\n  selected?: string[];\n  feeds?: {\n    id: string;\n    name: string;\n  }[];\n  onSelect: (ids: string[]) => void;\n}\nconst PostFilter: React.FC<PostFilterProps> = ({\n  selected = [],\n  feeds = [],\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Cell onPress={() => setVisible(true)}>\n        <Icon name=\"filter\" color={selected.length > 0 ? 'primary' : 'text'} />\n      </Cell>\n      <Popup visible={visible} onClose={() => setVisible(false)}>\n        {feeds.map(feed => {\n          const isSelected = selected.includes(feed.id);\n          return (\n            <Row\n              key={feed.id}\n              onPress={\n                isSelected\n                  ? () => onSelect(selected.filter(s => s !== feed.id))\n                  : () => onSelect([...selected, feed.id])\n              }\n              left={\n                <Cell>\n                  <Icon name={isSelected ? 'check-circle' : 'circle'} />\n                </Cell>\n              }\n              title={feed.name}\n            />\n          );\n        })}\n        {selected.length > 0 && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => onSelect([])} />\n          </Row>\n        )}\n      </Popup>\n    </>\n  );\n};\n\nexport { PostFilter };\n","import React, { ReactNode } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Row, Cell } from './index';\n\ninterface Props {\n  title: string;\n  add?: () => void;\n  onPress?: () => void;\n  left?: ReactNode;\n}\n\nfunction Header({ title, add, onPress, left }: Props) {\n  return (\n    <Row\n      onPress={onPress}\n      left={left}\n      title={title}\n      background=\"header\"\n      right={\n        add && (\n          <Cell onPress={add}>\n            <Icon name=\"plus-circle\" size={18} />\n          </Cell>\n        )\n      }\n    />\n  );\n}\n\nexport { Header };\n","import React, { Fragment, ReactNode, useState } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Header } from '#/components/Row/Header';\nimport styled from 'styled-components/native';\nimport { Row, Cell } from '#/components/Row';\nimport { Body1 } from '#/typography';\n\ninterface ListProps<T> {\n  title: string;\n  items: T[];\n  getKey: (item: T) => any;\n  render: (item: T) => ReactNode;\n  add?: () => void;\n}\n\ninterface ChildProps {\n  title: string;\n  add?: () => void;\n  children?: ReactNode;\n}\n\nconst Wrapper = styled.View`\n  border-radius: 7px;\n  background: ${({ theme }) => theme.colors.background};\n  shadow-offset: 0px;\n  shadow-opacity: 0.1;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-radius: 5px;\n  overflow: hidden;\n`;\n\nfunction Group<T = any>(props: ListProps<T> | ChildProps) {\n  const [visible, setVisible] = useState(true);\n  const { title, items, getKey, render, add, children } =\n    props as ListProps<T> & ChildProps;\n  return (\n    <Row>\n      <Wrapper>\n        <Header\n          left={\n            <Cell><Icon name={visible ? 'chevron-down' : 'chevron-up'} size={18} /></Cell>\n          }\n          title={title}\n          add={add}\n          onPress={() => setVisible(!visible)}\n        />\n        {visible &&\n          items &&\n          items.map(item => (\n            <Fragment key={getKey(item)}>{render(item)}</Fragment>\n          ))}\n        {visible && children}\n        {visible && !children && (!items || items.length === 0) && (\n          <Row\n            left={\n              <Cell>\n                <Icon color=\"textShade\" name=\"maximize\" />\n              </Cell>\n            }\n          >\n            <Body1 style={{ marginLeft: 10 }} color=\"textShade\">\n              Empty\n            </Body1>\n          </Row>\n        )}\n      </Wrapper>\n    </Row>\n  );\n}\n\nexport { Group };\n","import React from 'react';\nimport { KeyboardType } from 'react-native';\nimport styled, { useTheme } from 'styled-components/native';\n\ninterface Props {\n  label: string;\n  value: string;\n  onChangeText?: (text: string) => any;\n  type?: KeyboardType;\n  autoCorrect?: boolean;\n  secure?: boolean;\n}\n\nconst InputField = styled.TextInput`\n  color: ${({ theme }) => theme.colors.text};\n  padding: ${({ theme }) => theme.margins.small}px 0;\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n  width: 100%;\n`;\n\nconst Input: React.FC<Props> = ({\n  label,\n  value,\n  onChangeText,\n  type,\n  autoCorrect,\n  secure,\n}) => {\n  const theme = useTheme();\n  return (\n    <InputField\n      value={value}\n      keyboardType={type}\n      autoCapitalize={'none'}\n      autoCorrect={autoCorrect}\n      secureTextEntry={secure}\n      placeholderTextColor={theme.colors.textShade}\n      placeholder={label}\n      onChangeText={onChangeText}\n    />\n  );\n};\n\nexport { Input };\n","import React, { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { Popup } from '#/components/Popup';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Row } from '#/components/Row';\nimport { Button } from '#/components/Button';\n\ninterface Props<T> {\n  visible: boolean;\n  onClose: () => void;\n  selected?: T;\n  allowClear?: boolean;\n  items: T[];\n  onSelect: (item?: T) => void;\n  renderSelect: (item: T) => ReactNode;\n  getKey: (item: T) => any;\n  search?: (term: string, items: T[]) => T[];\n  create?: (term: string) => Promise<T>;\n}\n\nconst Touch = styled.TouchableOpacity``;\nconst Content = styled.View`\n  min-height: 40%;\n`;\n\nfunction Dialog<T>({\n  visible,\n  onClose,\n  items,\n  onSelect,\n  renderSelect,\n  getKey,\n  search,\n  create,\n  allowClear,\n}: Props<T>) {\n  const [searchInput, setSeachInput] = useState('');\n  const results = useMemo(() => {\n    if (!search || !searchInput) {\n      return items;\n    }\n    return search(searchInput, items);\n  }, [items, searchInput, search]);\n  const hide = useCallback(() => {\n    setSeachInput('');\n    onClose();\n  }, [setSeachInput, onClose]);\n\n  const select = useCallback(\n    (item: T) => {\n      onSelect(item);\n      hide();\n    },\n    [onSelect, hide]\n  );\n  const createItem = useCallback(async () => {\n    if (!create) {\n      return;\n    }\n    const item = await create(searchInput);\n    onSelect(item);\n    hide();\n  }, [create, searchInput, hide]);\n  return (\n    <Popup visible={visible} onClose={hide}>\n      {search && (\n        <Row>\n          <Input\n            label=\"Search\"\n            value={searchInput}\n            onChangeText={setSeachInput}\n          />\n        </Row>\n      )}\n      <Content>\n        {create && results.length === 0 && searchInput && (\n          <Row>\n            <Button title={`Create ${searchInput}`} onPress={createItem} />\n          </Row>\n        )}\n        {results.length > 0 && (\n          <FlatList\n            data={results}\n            keyExtractor={getKey}\n            style={{ flex: 1 }}\n            renderItem={({ item }) => (\n              <Touch onPress={() => select(item)}>{renderSelect(item)}</Touch>\n            )}\n          />\n        )}\n        {allowClear && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => select(undefined)} />\n          </Row>\n        )}\n      </Content>\n    </Popup>\n  );\n}\n\nexport { Dialog };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Row, Cell } from '#/components/Row';\nimport { Button } from '#/components/Button';\nimport { Jumbo } from '#/typography';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\ninterface Props {\n  title: string;\n  back?: boolean;\n  actions?: {\n    title: string;\n    onPress?: () => any;\n  }[];\n  right?: ReactNode;\n}\n\nconst Wrapper = styled.View``;\n\nconst Header: React.FC<Props> = ({ title, back, actions, right }) => {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Wrapper style={{ paddingTop: insets.top }}>\n      <Row\n        left={\n          !!back && (\n            <Cell onPress={() => navigation.goBack()}>\n              <Ionicons name=\"arrow-back-circle\" size={26} />\n            </Cell>\n          )\n        }\n        right={\n          (actions || right) && (\n            <>\n              {actions &&\n                actions.map(action => (\n                  <Button\n                    key={action.title}\n                    title={action.title}\n                    onPress={action.onPress}\n                  />\n                ))}\n              {right}\n            </>\n          )\n        }\n      >\n        <Jumbo>{title}</Jumbo>\n      </Row>\n    </Wrapper>\n  );\n};\n\nexport { Header };\n","import styled, { ThemeProvider } from 'styled-components/native';\nimport ImageView from 'react-native-image-viewing';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\nimport { Image } from '../Image';\nimport { Cell, Row } from '../Row';\nimport React, { useContext, useMemo, useState } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Icon } from '../Icon';\nimport { dark } from '#/theme';\nimport { useSaveImage } from './save';\n\nconst ScrollWrapper = styled.ScrollView<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\n\nconst ScrollContent = styled.View`\n  flex-direction: row;\n`;\n\nconst Touchable = styled.TouchableWithoutFeedback``;\n\nconst ScrollPage = styled.View<{\n  width: number;\n}>`\n  width: ${({ width }) => width}px;\n`;\n\nconst Wrapper = styled.View`\n  border-radius: 5px;\n  overflow: hidden;\n`;\n\ntype PagerProps = {\n  current: number;\n  total: number;\n};\n\nconst DotWrapper = styled.View`\n  margin-top: 10px;\n  flex-direction: row;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Dot = styled.View<{\n  selected: boolean;\n}>`\n  width: 6px;\n  height: 6px;\n  background: ${({ selected, theme }) =>\n    selected ? theme.colors.primary : '#ccc'};\n  margin: 0 5px;\n  border-radius: 3px;\n`;\n\nconst Pager: React.FC<PagerProps> = ({ current, total }) => {\n  const dots = useMemo(\n    () => new Array(total).fill(undefined).map((_, i) => i),\n    [total]\n  );\n\n  return (\n    <DotWrapper>\n      {dots.map(i => (\n        <Dot key={i} selected={i === current} />\n      ))}\n    </DotWrapper>\n  );\n};\n\ntype GalleryProps = {\n  media: DeepPartial<MediaModel[]>;\n};\n\nconst Gallery: React.FC<GalleryProps> = ({ media }) => {\n  const [width, setWidth] = useState(0);\n  const [offset, setOffset] = useState(0);\n  const saveImage = useSaveImage();\n  const { domain, token } = useContext(ServerContext);\n  const currentIndex = useMemo(\n    () => Math.round(offset / width) || 0,\n    [offset, width]\n  );\n  const [lightboxVisible, setLightboxVisible] = useState(false);\n  const lightboxImages = useMemo(\n    () =>\n      media.map(item => ({\n        uri: `${domain}/api/media/${item?.id}`,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })),\n    [domain, token, media]\n  );\n  const currentMedia = useMemo(\n    () => media[currentIndex],\n    [media, currentIndex]\n  );\n  const currentAspect = useMemo(\n    () => currentMedia?.aspect || 1, // use current media aspect\n    [currentMedia]\n  );\n\n  if (media.length === 0) {\n    return <></>;\n  }\n  const Lightbox = () => (\n    <ImageView\n      images={lightboxImages}\n      imageIndex={currentIndex}\n      visible={lightboxVisible}\n      onRequestClose={() => setLightboxVisible(false)}\n      FooterComponent={() => (\n        <ThemeProvider theme={dark}>\n          <Row\n            right={\n              <Cell onPress={() => saveImage(lightboxImages[currentIndex].uri)}>\n                <Icon name=\"download\" />\n              </Cell>\n            }\n          />\n          <Row />\n        </ThemeProvider>\n      )}\n    />\n  );\n  if (media.length === 1) {\n    return (\n      <Row>\n        <Lightbox />\n        <Touchable onPress={() => setLightboxVisible(true)}>\n          <Wrapper>\n            <Image media={media[0]!} />\n          </Wrapper>\n        </Touchable>\n      </Row>\n    );\n  }\n\n  return (\n    <Row>\n      <Lightbox />\n      <Wrapper>\n        <ScrollWrapper\n          horizontal\n          scrollEventThrottle={16}\n          snapToInterval={width}\n          showsHorizontalScrollIndicator={false}\n          decelerationRate={0}\n          snapToAlignment=\"center\"\n          disableIntervalMomentum\n          height={width / currentAspect}\n          onScroll={evt => {\n            const offset = evt.nativeEvent.contentOffset.x;\n            setOffset(offset);\n          }}\n          onLayout={evt => {\n            const currentWidth = evt.nativeEvent.layout.width;\n            if (currentWidth !== width) {\n              setWidth(currentWidth);\n            }\n          }}\n        >\n          <Touchable onPress={() => setLightboxVisible(true)}>\n            <ScrollContent>\n              {media.map(item => (\n                <ScrollPage key={item!.id} width={width}>\n                  <Image media={item!} />\n                </ScrollPage>\n              ))}\n            </ScrollContent>\n          </Touchable>\n        </ScrollWrapper>\n      </Wrapper>\n      <Pager current={currentIndex} total={media.length} />\n    </Row>\n  );\n};\n\nexport { Gallery };\n","import * as MediaLibrary from 'expo-media-library';\nimport * as FileSystem from 'expo-file-system';\nimport { useCallback, useContext } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Alert } from 'react-native';\n\nexport const useSaveImage = () => {\n  const { token } = useContext(ServerContext);\n  const saveImage = useCallback(\n    async (url: string) => {\n      try {\n        const download = FileSystem.createDownloadResumable(\n          url,\n          FileSystem.cacheDirectory + 'download.jpeg',\n          { headers: { Authorization: `bearer: ${token}` } }\n        );\n        const result = await download.downloadAsync();\n        if (!result) {\n          throw new Error('failed');\n        }\n        MediaLibrary.saveToLibraryAsync(result.uri);\n        Alert.alert('Image saved');\n      } catch (err) {\n        Alert.alert(`Failed: ${err.toString()}`);\n      }\n    },\n    [token]\n  );\n\n  return saveImage;\n};\n","import { ServerContext } from '#/context/server';\nimport { useCallback, useContext } from 'react';\nimport { UploadFile } from './posts';\n\nexport const useCreateMedia = () => {\n  const { domain, token } = useContext(ServerContext);\n  const createMedia = useCallback(\n    async (media: UploadFile[]) => {\n      const ids: string[] = [];\n      for (let file of media) {\n        const data = new FormData();\n        data.append('media', file as any);\n        const response = await fetch(`${domain}/api/media`, {\n          method: 'POST',\n          body: data,\n          headers: {\n            'content-type': 'multipart/form-data',\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        if (!response.ok) {\n          console.error(await response.text());\n          throw new Error('Could not upload image');\n        }\n        const json = await response.json();\n        ids.push(json.ids[0]);\n      }\n      return ids;\n    },\n    [token, domain]\n  );\n  return createMedia;\n};\n","import { HomeContext } from '#/context/home';\nimport { ServerContext } from '#/context/server';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport {\n  useCreatePostMutation,\n  useProfileQuery,\n  useRemovePostMutation,\n} from './graphql';\nimport { useCreateMedia } from './media';\nimport { useErrorNotification } from './utils';\n\nexport type UploadFile = {\n  uri: string;\n  name: string;\n  type: string;\n};\n\nexport const useCreatePostData = () => {\n  const { data, refetch, loading, error } = useProfileQuery();\n  useErrorNotification(error);\n  const feeds = useMemo(\n    () => data?.profile?.feeds.filter(f => f.accessType === 'admin'),\n    [data]\n  );\n\n  return {\n    feeds,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nexport const useCreatePost = () => {\n  const { domain, token } = useContext(ServerContext);\n  const [createPostMutation, { error }] = useCreatePostMutation();\n  useErrorNotification(error);\n  const createMedia = useCreateMedia();\n  const createPost = useCallback(\n    async (feed: string, body: string, media: UploadFile[]) => {\n      const ids = await createMedia(media);\n      await createPostMutation({\n        variables: {\n          params: {\n            feed,\n            body,\n            media: ids,\n          },\n        },\n      });\n    },\n    [createPostMutation, token, domain]\n  );\n\n  return createPost;\n};\n\nexport const useRemovePost = () => {\n  const [loading, setLoading] = useState(false);\n  const { refetch } = useFeed();\n  const [removePostMutation, { error }] = useRemovePostMutation();\n  useErrorNotification(error);\n  const removePost = useCallback(\n    async (id: string) => {\n      setLoading(true);\n      try {\n        await removePostMutation({\n          variables: { removePostId: id },\n        });\n        await refetch();\n      } finally {\n        setLoading(false);\n      }\n    },\n    [removePostMutation]\n  );\n\n  return { removePost, loading };\n};\n\nexport const useFeed = () => {\n  const context = useContext(HomeContext);\n  return context;\n};\n","import { PostModel } from '#/hooks/graphql';\nimport styled from 'styled-components/native';\nimport { DeepPartial } from '#/helpers/types';\nimport { Cell, Row } from '#/components/Row';\nimport { Icon } from '#/components/Icon';\nimport { Gallery } from '#/components/gallery';\nimport { Body1 } from '#/typography';\nimport { Avatar } from '#/components/avatar';\nimport { useNavigation } from '@react-navigation/native';\nimport { Popup } from '#/components/Popup';\nimport React, { useState } from 'react';\nimport { useRemovePost } from '#/hooks/posts';\nimport { Button } from '#/components/Button';\nimport { OverlayLoader } from '#/components/loaders';\n\ntype PostRowProps = {\n  post: DeepPartial<PostModel>;\n  fullWidth: boolean;\n};\n\nconst Wrapper = styled.View<{\n  fullWidth: boolean;\n}>`\n  ${({ fullWidth, theme }) =>\n    fullWidth\n      ? `\n    border-top-width: 7px; \n    border-color: ${theme.colors.shade};\n  `\n      : `\n    background-color: ${theme.colors.shade};\n    margin: 7px;\n    border-radius: 7px;\n  `}\n`;\n\nconst PostRow: React.FC<PostRowProps> = ({ post, fullWidth }) => {\n  const navigation = useNavigation();\n  const { removePost, loading } = useRemovePost();\n  const [menuVisible, setMenuVisible] = useState(false);\n  return (\n    <Wrapper fullWidth={fullWidth}>\n      {loading && <OverlayLoader />}\n      <Row\n        left={\n          <Cell>\n            <Avatar mediaId={post?.creator?.avatar!} />\n          </Cell>\n        }\n        right={\n          <>\n            <Cell\n              onPress={() => navigation.navigate('Comments', { id: post.id })}\n            >\n              <Icon name=\"message-circle\" color=\"text\" size={20} />\n              <Body1>{post.commentCount}</Body1>\n            </Cell>\n            <Cell onPress={() => setMenuVisible(true)}>\n              <Icon name=\"more-horizontal\" color=\"text\" size={20} />\n            </Cell>\n          </>\n        }\n        description={post.body}\n        overline={post.creator?.name || post.creator?.username}\n      />\n      {post.media && <Gallery media={post!.media} />}\n      <Popup onClose={() => setMenuVisible(false)} visible={menuVisible}>\n        <Button\n          onPress={() => removePost(post.id!)}\n          title=\"Remove\"\n          type=\"destructive\"\n        />\n      </Popup>\n    </Wrapper>\n  );\n};\n\nexport { PostRow };\n","import React, { useCallback } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport styled from 'styled-components/native';\nimport { UploadFile } from '#/hooks/posts';\nimport { Icon } from '../Icon';\nimport { Row } from '../Row';\n\ntype Props = {\n  files: UploadFile[];\n  onUpdate: (files: UploadFile[]) => void;\n};\n\nconst Image = styled.Image`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 5px;\n`;\n\nconst Spacer = styled.View`\n  padding-bottom: 100%;\n`;\n\nconst Item = styled.View`\n  width: 33%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Wrapper = styled.View`\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst Button = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n  justify-content: center;\n  align-items: center;\n  background: #ddd;\n  border-radius: 5px;\n`;\n\nconst ImageWrapper = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n`;\n\nconst AddImages: React.FC<Props> = ({ files, onUpdate }) => {\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    onUpdate([...files, file]);\n  }, [files, onUpdate]);\n\n  const remove = useCallback(\n    (file: UploadFile) => {\n      onUpdate(files.filter(f => f !== file));\n    },\n    [files, onUpdate]\n  );\n\n  return (\n    <Row>\n      <Wrapper>\n        {files.map(m => (\n          <Item key={m.uri}>\n            <Spacer />\n            <ImageWrapper onPress={() => remove(m)}>\n              <Image source={{ uri: m.uri }} />\n            </ImageWrapper>\n          </Item>\n        ))}\n        <Item>\n          <Spacer />\n          <Button onPress={pickImage}>\n            <Icon name=\"plus-circle\" size={40} />\n          </Button>\n        </Item>\n      </Wrapper>\n    </Row>\n  );\n};\n\nexport { AddImages };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { DeepPartial } from '#/helpers/types';\nimport { FeedModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport React, { useState } from 'react';\n\ntype FeedInputProps = {\n  label: string;\n  feeds: DeepPartial<FeedModel>[];\n  selected?: DeepPartial<FeedModel>;\n  onSelect: (feed?: DeepPartial<FeedModel>) => void;\n};\n\nconst FeedInput: React.FC<FeedInputProps> = ({\n  label,\n  feeds,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={feeds || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name} />}\n      />\n    </>\n  );\n};\n\nexport { FeedInput };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { PartialDeep } from 'type-fest';\nimport { UserModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport React, { useState } from 'react';\n\ntype UserInputProps = {\n  label: string;\n  users: PartialDeep<UserModel>[];\n  selected?: PartialDeep<UserModel>;\n  onSelect: (user?: PartialDeep<UserModel>) => void;\n};\n\nconst UserInput: React.FC<UserInputProps> = ({\n  label,\n  users,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || selected?.username || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={users || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name || item.username} />}\n      />\n    </>\n  );\n};\n\nexport { UserInput };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { Body1 } from '#/typography';\nimport React, { useState } from 'react';\n\ntype NameValueInputItem = {\n  key: string;\n  value: any;\n};\n\ntype NameValueInputProps = {\n  label: string;\n  items: NameValueInputItem[];\n  selected?: NameValueInputItem;\n  onSelect: (item?: NameValueInputItem) => void;\n};\n\nconst NameValueInput: React.FC<NameValueInputProps> = ({\n  label,\n  items,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.key || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={items}\n        getKey={item => item.key}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.key} />}\n      />\n    </>\n  );\n};\n\nexport { NameValueInputItem, NameValueInput };\n","import { ServerContext } from '#/context/server';\nimport { useRegisterPushNotificationMutation } from '#/hooks/graphql';\nimport React, { useContext, useEffect } from 'react';\n\nconst PushRegistation: React.FC<{}> = () => {\n  const { pushToken } = useContext(ServerContext);\n  const [registerPushMutation] = useRegisterPushNotificationMutation();\n\n  useEffect(() => {\n    if (!pushToken) {\n      return;\n    }\n    registerPushMutation({\n      variables: {\n        token: pushToken,\n      },\n    });\n  }, [pushToken]);\n\n  return <></>;\n};\n\nexport { PushRegistation };\n","import { ProfileContext } from '#/context/profile';\nimport { useCallback, useContext } from 'react';\nimport { useSetProfileAvatarMutation } from './graphql';\nimport { useCreateMedia } from './media';\nimport { UploadFile } from './posts';\n\nexport const useSetAvatar = () => {\n  const createMedia = useCreateMedia();\n  const [setAvatarMutation] = useSetProfileAvatarMutation();\n\n  const setAvatar = useCallback(async (media?: UploadFile) => {\n    const [id] = media ? await createMedia([media]) : [];\n    await setAvatarMutation({\n      variables: {\n        mediaId: id,\n      },\n    });\n  }, []);\n\n  return setAvatar;\n};\n\nexport const useProfile = () => {\n  const context = useContext(ProfileContext);\n  return context;\n};\n","import React, { useCallback, useState, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { UploadFile, useCreatePost } from '#/hooks/posts';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { Page, FeedInput, AddImages, Row, Input, Button } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\nimport { useFeed } from '#/hooks/posts';\n\nconst Wrapper = styled.ScrollView`\n  flex: 1;\n`;\nconst Outer = styled.View`\n  flex: 1;\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n\nconst AddPostScreen: React.FC<AddScreenNavigationProp> = ({ navigation }) => {\n  const [loading, setLoading] = useState(false);\n  const { refetch: refetchPosts } = useFeed();\n  const { feeds, refetch, loading: profileLoading } = useProfile();\n  const [selectedFeed, setSelectedFeed] = useState<any>();\n  const [media, setMedia] = useState<UploadFile[]>([]);\n  const [body, setBody] = useState('');\n  const createPost = useCreatePost();\n  const adminFeeds = useMemo(\n    () => feeds?.filter(f => f.accessType === 'admin').map(f => f.feed) || [],\n    [feeds]\n  );\n\n  const submit = useCallback(async () => {\n    setLoading(true);\n    await createPost(selectedFeed.id, body, media);\n    await refetchPosts();\n    setLoading(false);\n    setSelectedFeed(undefined);\n    setMedia([]);\n    setBody('');\n    navigation.navigate('Feed', {});\n  }, [selectedFeed, body, media]);\n  useFocusEffect(\n    useCallback(() => {\n      refetch();\n    }, [refetch])\n  );\n\n  if (!feeds) {\n    return <></>;\n  }\n\n  return (\n    <Page loading={profileLoading || loading}>\n      <Outer>\n        <Header title=\"Create post\" />\n        <Wrapper>\n          <AddImages files={media} onUpdate={setMedia} />\n          <FeedInput\n            label=\"Feed\"\n            feeds={adminFeeds}\n            selected={selectedFeed}\n            onSelect={setSelectedFeed}\n          />\n          <Row overline=\"Content\">\n            <Input\n              label=\"Tell your story...\"\n              value={body}\n              onChangeText={setBody}\n            />\n          </Row>\n        </Wrapper>\n        <Row>\n          {!!selectedFeed && media.length > 0 && (\n            <Button onPress={submit} title=\"Create\" />\n          )}\n        </Row>\n      </Outer>\n    </Page>\n  );\n};\n\nexport { AddPostScreen };\n","import React, { useCallback, useMemo, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { ListRenderItem, RefreshControl, Dimensions } from 'react-native';\nimport MasonryList from '@react-native-seoul/masonry-list';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { useFeed } from '#/hooks/posts';\nimport { Page } from '#/components/Page';\nimport { PostFilter, PostRow } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\n\nconst Seperator = styled.View`\n  margin-top: 15px;\n  border-bottom-width: 5px;\n  margin-bottom: 15px;\n  border-color: ${({ theme }) => theme.colors.shade};\n`;\nconst Wrapper = styled.View`\n  background-color: ${({ theme }) => theme.colors.background};\n  flex: 1;\n`;\n\nconst onlyOnce = (fn: () => Promise<any>) => {\n  let running = false;\n  console.log('setup');\n  return () => {\n    if (running) {\n      return;\n    }\n    console.log('run', running);\n    running = true;\n    fn()\n      .then(() => {\n        running = false;\n      })\n      .catch(() => {\n        running = false;\n      });\n  };\n};\n\nconst FeedScreen: React.FC<AddScreenNavigationProp> = () => {\n  const [\n    onEndReachedCalledDuringMomentum,\n    setOnEndReachedCalledDuringMomentum,\n  ] = useState(false);\n  const {\n    posts,\n    loading,\n    refetch,\n    fetchMore,\n    feeds: selectedFeeds,\n    setFeeds: setSelectedFeeds,\n  } = useFeed();\n  const { feeds } = useProfile();\n\n  const userFeeds = useMemo(() => feeds.map(f => f.feed), [feeds]);\n  const columns = useMemo(\n    () => Math.ceil(Dimensions.get('window').width / 500),\n    []\n  );\n\n  const renderItem: ListRenderItem<typeof posts[0]> = useCallback(\n    ({ item }) => (\n      <PostRow fullWidth={columns <= 1} key={item.id} post={item} />\n    ),\n    [columns]\n  );\n\n  return (\n    <Page>\n      <Wrapper>\n        <Header\n          key=\"test\"\n          title=\"All posts\"\n          right={\n            <>\n              {userFeeds.length > 1 && (\n                <PostFilter\n                  feeds={userFeeds}\n                  selected={selectedFeeds}\n                  onSelect={setSelectedFeeds}\n                />\n              )}\n            </>\n          }\n        />\n        <MasonryList\n          data={posts}\n          keyExtractor={(item: any) => item.id}\n          renderItem={renderItem}\n          onEndReachedThreshold={0.3}\n          onEndReached={() => {\n            if (!onEndReachedCalledDuringMomentum) {\n              fetchMore({\n                variables: {\n                  filter: {\n                    offset: posts.length,\n                  },\n                },\n              });\n              setOnEndReachedCalledDuringMomentum(true);\n            }\n          }}\n          numColumns={columns}\n          ItemSeparatorComponent={Seperator}\n          onMomentumScrollBegin={() => {\n            setOnEndReachedCalledDuringMomentum(false);\n          }}\n          refreshControl={\n            <RefreshControl refreshing={loading} onRefresh={refetch} />\n          }\n        />\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { FeedScreen };\n","import {\n  useAddUserToFeedMutation,\n  useCreateFeedMutation,\n  useRemoveUserFromFeedMutation,\n  useFeedQuery,\n  useAllFeedsQuery,\n  useRemoveFeedMutation,\n} from '#/hooks/graphql';\nimport { useCallback, useMemo } from 'react';\nimport { useErrorNotification } from './utils';\n\nconst useFeed = (id: string) => {\n  const { data, refetch, loading, error } = useFeedQuery({\n    variables: { feedId: id },\n  });\n  useErrorNotification(error);\n  const feed = useMemo(() => data?.feed, [data]);\n  return {\n    feed,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nconst useAllFeeds = () => {\n  const { data, refetch, loading, error } = useAllFeedsQuery();\n  useErrorNotification(error);\n  const feeds = useMemo(() => data?.allFeeds || [], [data]);\n  return {\n    feeds,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nconst useCreateFeed = () => {\n  const [createFeedMutation, { error }] = useCreateFeedMutation();\n  useErrorNotification(error);\n  const createFeed = useCallback(\n    async (name: string) => {\n      await createFeedMutation({\n        variables: {\n          name,\n        },\n      });\n    },\n    [createFeedMutation]\n  );\n\n  return createFeed;\n};\n\nconst useAddUserToFeed = () => {\n  const [addUserToFeedMutation, { error }] = useAddUserToFeedMutation();\n  useErrorNotification(error);\n  const addUserToFeed = useCallback(\n    async (feedId: string, userId: string, accessType: string) => {\n      await addUserToFeedMutation({\n        variables: {\n          feedId,\n          userId,\n          accessType,\n        },\n      });\n    },\n    [addUserToFeedMutation]\n  );\n\n  return addUserToFeed;\n};\n\nconst useRemoveUserFromFeed = () => {\n  const [removeUserFromFeedMutation, { error }] =\n    useRemoveUserFromFeedMutation();\n  useErrorNotification(error);\n  const removeUserFromFeed = useCallback(\n    async (feedId: string, userId: string) => {\n      await removeUserFromFeedMutation({\n        variables: {\n          feedId,\n          userId,\n        },\n      });\n    },\n    [removeUserFromFeedMutation]\n  );\n\n  return removeUserFromFeed;\n};\n\nexport const useRemoveFeed = () => {\n  const [removeFeedMutation, { error }] = useRemoveFeedMutation();\n  useErrorNotification(error);\n  const removeFeed = useCallback(\n    async (id: string) => {\n      await removeFeedMutation({\n        variables: { feedId: id },\n      });\n    },\n    [removeFeedMutation],\n  );\n\n  return removeFeed;\n};\n\nexport { useAllFeeds, useFeed, useCreateFeed, useAddUserToFeed, useRemoveUserFromFeed };\n","import { useCallback, useMemo } from 'react';\nimport { useInviteProfileMutation, useRemoveUserMutation, useUsersQuery } from './graphql';\nimport { useErrorNotification } from './utils';\n\nexport const useUsers = () => {\n  const { data, refetch, loading, error } = useUsersQuery();\n  useErrorNotification(error);\n  const users = useMemo(() => data?.users, [data]);\n  return {\n    users,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nexport const useSendInvite = () => {\n  const [sendInviteMutation, { error }] = useInviteProfileMutation();\n  useErrorNotification(error);\n  const sendInvite = useCallback(\n    async (email: string) => {\n      await sendInviteMutation({\n        variables: { email },\n      });\n    },\n    [sendInviteMutation],\n  );\n\n  return sendInvite;\n};\n\nexport const useRemoveUser = () => {\n  const [removeUserMutation, { error }] = useRemoveUserMutation();\n  useErrorNotification(error);\n  const removeUser = useCallback(\n    async (id: string) => {\n      await removeUserMutation({\n        variables: { userId: id },\n      });\n    },\n    [removeUserMutation],\n  );\n\n  return removeUser;\n};\n","import React, { useCallback, useContext, useState } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport {\n  Avatar,\n  Button,\n  Cell,\n  Group,\n  Header,\n  Icon,\n  Input,\n  Page,\n  Popup,\n  Row,\n} from '#/components';\nimport { useProfile, useSetAvatar } from '#/hooks/profile';\nimport { ProfileMainScreenNavigationProp } from '#/router/types';\nimport { useCreateFeed } from '#/hooks/feeds';\nimport { ServerContext } from '#/context/server';\nimport { useSendInvite } from '#/hooks/users';\nimport styled from 'styled-components/native';\n\nconst Wrapper = styled.ScrollView`\n  flex: 1;\n`\n\nconst ProfileScreen: React.FC<ProfileMainScreenNavigationProp> = ({\n  navigation,\n}) => {\n  const { profile, feeds, refetch } = useProfile();\n  const { logout } = useContext(ServerContext);\n  const createFeed = useCreateFeed();\n  const [addFeedVisible, setAddFeedVisible] = useState(false);\n  const [inviteVisible, setInviteVisible] = useState(false);\n  const [inviteEmail, setInviteEmail] = useState('');\n  const [feedName, setFeedName] = useState('');\n  const setAvatar = useSetAvatar();\n  const sendInvite = useSendInvite();\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    await setAvatar(file);\n    await refetch();\n  }, []);\n\n  const saveAddFeed = useCallback(async () => {\n    await createFeed(feedName);\n    setFeedName('');\n    setAddFeedVisible(false);\n    await refetch();\n  }, [feedName, createFeed]);\n\n  const sendInviteAction = useCallback(async () => {\n    await sendInvite(inviteEmail);\n    setInviteEmail('');\n    setInviteVisible(false);\n    await refetch();\n  }, [inviteEmail, sendInvite]);\n\n  return (\n    <Page>\n      <Wrapper>\n        <Header title=\"Profile\" />\n        <Row\n          left={\n            <Cell>\n              <Avatar\n                mediaId={profile?.avatar || undefined}\n                onPress={pickImage}\n              />\n            </Cell>\n          }\n          title={profile?.name || profile?.username}\n        />\n        <Popup visible={addFeedVisible} onClose={() => setAddFeedVisible(false)}>\n          <Row>\n            <Input label=\"Name\" value={feedName} onChangeText={setFeedName} />\n          </Row>\n          <Row>\n            <Button title=\"Save\" onPress={saveAddFeed} />\n          </Row>\n        </Popup>\n        <Group\n          title=\"My feeds\"\n          items={feeds}\n          getKey={item => item.feed.id}\n          add={\n            profile?.admin\n              ? () => {\n                  setAddFeedVisible(true);\n                }\n              : undefined\n          }\n          render={item => (\n            <Row\n              title={item.feed.name}\n              overline={item.accessType}\n              right={\n                <Cell>\n                  <Button title=\"Leave\" type=\"destructive\" />\n                </Cell>\n              }\n              onPress={() => {\n                navigation.navigate('FeedEdit', { id: item.feed.id });\n              }}\n            />\n          )}\n        />\n        {profile?.admin && (\n          <Group title=\"Admin\">\n            <Row\n              title=\"Invite\"\n              onPress={() => setInviteVisible(true)}\n              left={(\n                <Cell><Icon name=\"user-plus\" color=\"text\" /></Cell>\n              )}\n            />\n            <Row\n              title=\"Users\"\n              onPress={() => navigation.navigate('AdminUsers', {})}\n              left={(\n                <Cell><Icon name=\"users\" color=\"text\" /></Cell>\n              )}\n              right={(\n                <Cell><Icon name=\"chevron-right\" color=\"text\" /></Cell>\n              )}\n            />\n            <Row\n              title=\"Feeds\"\n              onPress={() => navigation.navigate('AdminFeeds', {})}\n              left={(\n                <Cell><Icon name=\"layers\" color=\"text\" /></Cell>\n              )}\n              right={(\n                <Cell><Icon name=\"chevron-right\" color=\"text\" /></Cell>\n              )}\n            />\n            <Popup visible={inviteVisible} onClose={() => setInviteVisible(false)}>\n              <Row>\n                <Input label=\"Email\" value={inviteEmail} onChangeText={setInviteEmail} />\n              </Row>\n              <Row>\n                <Button title=\"Send\" onPress={sendInviteAction} />\n              </Row>\n            </Popup>\n          </Group>\n        )}\n        <Row>\n          <Button title=\"Logout\" type=\"destructive\" onPress={logout} />\n        </Row>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { ProfileScreen };\n","import {\n  Group,\n  NameValueInput,\n  Header,\n  Input,\n  Page,\n  Popup,\n  Row,\n  UserInput,\n  NameValueInputItem,\n  Button,\n  Cell,\n} from '#/components';\nimport {\n  useAddUserToFeed,\n  useFeed,\n  useRemoveUserFromFeed,\n} from '#/hooks/feeds';\nimport { UserModel } from '#/hooks/graphql';\nimport { useUsers } from '#/hooks/users';\nimport { FeedEditScreenNavigationProp } from '#/router/types';\nimport React, { useCallback, useState } from 'react';\nimport { PartialDeep } from 'type-fest';\n\nconst accessTypes = [\n  { key: 'Admin', value: 'admin' },\n  { key: 'Moderator', value: 'moderator' },\n  { key: 'Writer', value: 'writer' },\n  { key: 'Reader', value: 'reader' },\n];\n\nconst FeedEditScreen: React.FC<FeedEditScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const { feed, refetch } = useFeed(id);\n  const { users } = useUsers();\n  const removeUserFromFeed = useRemoveUserFromFeed();\n  const addUserToFeed = useAddUserToFeed();\n  const [addUserVisible, setAddUserVisible] = useState(false);\n  const [addUserSelected, setAddUserSelected] =\n    useState<PartialDeep<UserModel>>();\n  const [addUserAccessType, setAddUserAccessType] =\n    useState<NameValueInputItem>();\n\n  const addUser = useCallback(async () => {\n    await addUserToFeed(id, addUserSelected!.id!, addUserAccessType!.value);\n    setAddUserSelected(undefined);\n    setAddUserAccessType(undefined);\n    setAddUserVisible(false);\n    await refetch();\n  }, [id, addUserSelected, addUserAccessType]);\n\n  const removeUser = useCallback(\n    async (userId: string) => {\n      await removeUserFromFeed(id, userId);\n      await refetch();\n    },\n    [id, removeUserFromFeed, refetch]\n  );\n\n  if (!feed) {\n    return <></>;\n  }\n\n  return (\n    <Page>\n      <Header back title=\"Feed\" />\n      <Row>\n        <Input label=\"Name\" value={feed.name} />\n      </Row>\n      <Group\n        title=\"Users\"\n        add={() => {\n          setAddUserVisible(true);\n        }}\n        items={feed.users}\n        getKey={relation => relation.user.id}\n        render={relation => (\n          <Row\n            overline={relation.accessType}\n            title={relation.user.name || relation.user.username}\n            right={\n              <Cell>\n                <Button\n                  title=\"Remove\"\n                  onPress={() => removeUser(relation.user.id)}\n                />\n              </Cell>\n            }\n          />\n        )}\n      />\n      <Popup visible={addUserVisible} onClose={() => setAddUserVisible(false)}>\n        <UserInput\n          label=\"User\"\n          selected={addUserSelected}\n          onSelect={user => setAddUserSelected(user!)}\n          users={users}\n        />\n        <NameValueInput\n          label=\"Access type\"\n          selected={addUserAccessType}\n          onSelect={accessType => setAddUserAccessType(accessType!)}\n          items={accessTypes}\n        />\n        {!!addUserAccessType && !!addUserSelected && (\n          <Row>\n            <Button title=\"Save\" onPress={addUser} />\n          </Row>\n        )}\n      </Popup>\n    </Page>\n  );\n};\n\nexport { FeedEditScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { ServerContext } from '#/context/server';\nimport { Header, Icon, Page } from '#/components';\nimport { LoginScreenNavigationProp } from '#/router/types';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background: ${({ theme }) => theme.colors.shade};\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\nconst Text = styled.Text``;\n\nconst LoginScreen: React.FC<LoginScreenNavigationProp> = ({ navigation }) => {\n  const { login } = useContext(ServerContext);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n  const [domain, setDomain] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const doLogin = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await login(domain, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [domain, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          {error && <Text>{error.toString()}</Text>}\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"server\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Domain\"\n              value={domain}\n              onChangeText={setDomain}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Secret\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doLogin} title=\"Login\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { LoginScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { AcceptInvitationScreenNavigationProp } from '#/router/types';\nimport { ServerContext } from '#/context/server';\nimport { Text } from 'react-native';\nimport { Header, Icon, Page } from '#/components';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  align-items: center;\n  justify-content: center;\n  padding: 0 20px;\n  flex: 1;\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\n\nconst AcceptInvitationScreen: React.FC<\n  AcceptInvitationScreenNavigationProp\n> = ({ route, navigation }) => {\n  const { inviteCode } = route.params;\n  const { acceptInvitation } = useContext(ServerContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n\n  const doAccept = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await acceptInvitation(inviteCode, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [inviteCode, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          <Row description=\"You are almost there! Just pick your username and password and off we go!\" />\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Password\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doAccept} title=\"Let's GO\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { AcceptInvitationScreen };\n","import { Header, Input, Page, Row, Button, Cell, Avatar } from '#/components';\nimport { useCreateCommentMutation, usePostQuery } from '#/hooks/graphql';\nimport { CommentsScreenNavigationProp } from '#/router/types';\nimport React, { useCallback, useState } from 'react';\nimport { FlatList } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\n\nconst Content = styled.View`\n  flex: 1;\n`;\n\nconst Wrapper = styled.View`\n  flex: 1;\n`;\n\nconst CommentsScreen: React.FC<CommentsScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const insets = useSafeAreaInsets();\n  const [content, setContent] = useState('');\n  const [createCommentMutation] = useCreateCommentMutation();\n  const { data, refetch } = usePostQuery({\n    variables: {\n      postId: id,\n    },\n  });\n\n  const createComment = useCallback(async () => {\n    await createCommentMutation({\n      variables: {\n        params: {\n          content,\n          post: id,\n        },\n      },\n    });\n    setContent('');\n    await refetch();\n  }, [content, id, createCommentMutation, refetch]);\n  return (\n    <Page>\n      <Header title=\"Comments\" />\n      <Wrapper style={{ paddingBottom: insets.bottom + 20 }}>\n        <Content>\n          <FlatList\n            style={{ flex: 1 }}\n            inverted\n            keyExtractor={item => item.id}\n            renderItem={({ item }) => (\n              <Row\n                left={\n                  <Cell>\n                    <Avatar mediaId={item.creator.avatar || undefined} />\n                  </Cell>\n                }\n                overline={item.creator.name || item.creator.username}\n                description={item.content}\n              />\n            )}\n            data={[...(data?.post.comments || [])].reverse()}\n          />\n        </Content>\n        <Row right={<Button title=\"Send\" onPress={createComment} />}>\n          <Input\n            label=\" Say something...\"\n            value={content}\n            onChangeText={setContent}\n          />\n        </Row>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { CommentsScreen };\n","import { Avatar, Cell, Header, Icon, Input, Page, Row } from '#/components';\nimport { useRemoveUser, useUsers } from '#/hooks/users';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Alert, FlatList } from 'react-native';\n\nconst AdminUsersScreen = () => {\n  const [searchText, setSearchText] = useState('');\n  const removeUser = useRemoveUser();\n  const { users, refetch } = useUsers();\n  const result = useMemo(\n    () => users?.filter(user => !searchText || user?.username.toLowerCase().includes(searchText.toLowerCase())) || [],\n    [users, searchText],\n  );\n  const remove = useCallback(\n    async (id: string) => {\n      Alert.alert(\n        'Are you sure?',\n        undefined,\n        [\n          { text: 'Yes', onPress: () => removeUser(id).then(() => refetch()) },\n          { text: 'Cancel', style: 'cancel' },\n        ]\n      )\n    },\n    []\n  )\n  return (\n    <Page>\n      <Header title=\"Users\" back />\n      <Row\n        left={(\n          <Cell><Icon name=\"search\" /></Cell>\n        )}\n      >\n        <Input label=\"Search\" value={searchText} onChangeText={setSearchText} />\n      </Row>\n      <FlatList\n        data={result}\n        keyExtractor={user => user.id}\n        renderItem={({ item }) => (\n          <Row\n            overline={item.username}\n            title={item.name || item.username}\n            left={(\n              <Cell><Avatar mediaId={item.avatar || undefined} /></Cell>\n            )}\n            right={(\n              <>\n                <Cell><Icon name=\"edit\" /></Cell>\n                <Cell onPress={() => remove(item.id)}><Icon name=\"trash-2\" color=\"destructive\" /></Cell>\n              </>\n            )}\n          />\n        )}\n      />\n    </Page>\n  )\n}\n\nexport { AdminUsersScreen };\n","import { Avatar, Cell, Header, Icon, Input, Page, Row } from '#/components';\nimport { useAllFeeds, useRemoveFeed } from '#/hooks/feeds';\nimport { ProfileMainScreenNavigationProp } from '#/router/types';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Alert, FlatList } from 'react-native';\n\nconst AdminFeedsScreen: React.FC<ProfileMainScreenNavigationProp> = ({\n  navigation,\n}) => {\n  const [searchText, setSearchText] = useState('');\n  const removeFeed = useRemoveFeed();\n  const { feeds, refetch } = useAllFeeds();\n  const result = useMemo(\n    () => feeds?.filter(feed => !searchText || feed?.name.toLowerCase().includes(searchText.toLowerCase())) || [],\n    [feeds, searchText],\n  );\n  const remove = useCallback(\n    async (id: string) => {\n      Alert.alert(\n        'Are you sure?',\n        undefined,\n        [\n          { text: 'Yes', onPress: () => removeFeed(id).then(() => refetch()) },\n          { text: 'Cancel', style: 'cancel' },\n        ]\n      )\n    },\n    []\n  )\n  return (\n    <Page>\n      <Header title=\"Feeds\" back />\n      <Row\n        left={(\n          <Cell><Icon name=\"search\" /></Cell>\n        )}\n      >\n        <Input label=\"Search\" value={searchText} onChangeText={setSearchText} />\n      </Row>\n      <FlatList\n        data={result}\n        keyExtractor={feed => feed.id}\n        renderItem={({ item }) => (\n          <Row\n            title={item.name}\n            overline={`${item.users.length} user(s), admins: ${item.users.filter(user => user.accessType === 'admin').map(u => u.user.username).join(', ')}`}\n            left={(\n              <Cell><Icon color=\"text\" name=\"layers\" /></Cell>\n            )}\n            right={(\n              <>\n                <Cell\n                  onPress={() => navigation.navigate('FeedEdit', { id: item.id })}\n                >\n                  <Icon name=\"edit\" />\n                </Cell>\n                <Cell onPress={() => remove(item.id)}><Icon name=\"trash-2\" color=\"destructive\" /></Cell>\n              </>\n            )}\n          />\n        )}\n      />\n    </Page>\n  )\n}\n\nexport { AdminFeedsScreen };\n","import React, { useContext, useMemo } from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useTheme } from 'styled-components/native';\nimport { ProfileParamList, RootStackParamList, TabParamList } from './types';\nimport { linkingConfig } from './linking';\nimport { Icon, PushRegistation } from '#/components';\n\nimport { AddPostScreen } from '#/screens/posts/add';\nimport { FeedScreen } from '#/screens/posts/feed';\nimport { ProfileScreen } from '#/screens/profile';\nimport { FeedEditScreen } from '#/screens/feeds/edit';\nimport { ServerContext } from '#/context/server';\nimport { LoginScreen } from '#/screens/login/login';\nimport { useProfile } from '#/hooks/profile';\nimport { AcceptInvitationScreen } from '#/screens/login/accept-invitation';\nimport { CommentsScreen } from '#/screens/comments';\nimport { AdminUsersScreen } from '#/screens/admin/users';\nimport { AdminFeedsScreen } from '#/screens/admin/feeds';\n\nconst RootStack = createNativeStackNavigator<RootStackParamList>();\nconst TabStack = createBottomTabNavigator<TabParamList>();\nconst ProfileStack = createNativeStackNavigator<ProfileParamList>();\n\nconst Profile = () => {\n  return (\n    <ProfileStack.Navigator screenOptions={{ headerShown: false }}>\n      <ProfileStack.Screen name=\"ProfileMain\" component={ProfileScreen} />\n      <ProfileStack.Screen name=\"AdminUsers\" component={AdminUsersScreen} />\n      <ProfileStack.Screen name=\"AdminFeeds\" component={AdminFeedsScreen} />\n      <ProfileStack.Screen name=\"FeedEdit\" component={FeedEditScreen} />\n    </ProfileStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const theme = useTheme();\n  const { profile } = useProfile();\n  const canCreate = useMemo(\n    () =>\n      profile?.feeds?.find(\n        f =>\n          f.accessType === 'admin' ||\n          f.accessType === 'moderator' ||\n          f.accessType === 'writer'\n      ),\n    [profile]\n  );\n  return (\n    <>\n      <PushRegistation />\n      <TabStack.Navigator\n        screenOptions={{\n          headerShown: false,\n          tabBarActiveTintColor: theme.colors.primary,\n        }}\n      >\n        <TabStack.Screen\n          name=\"Feed\"\n          component={FeedScreen}\n          options={{\n            title: 'Posts',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"home\"\n                size={28}\n              />\n            ),\n          }}\n        />\n        {canCreate && (\n          <TabStack.Screen\n            name=\"Add\"\n            component={AddPostScreen}\n            options={{\n              title: 'Add',\n              tabBarIcon: ({ focused }) => (\n                <Icon\n                  color={focused ? 'primary' : 'text'}\n                  name=\"plus-square\"\n                  size={28}\n                />\n              ),\n            }}\n          />\n        )}\n        <TabStack.Screen\n          name=\"Profile\"\n          component={Profile}\n          options={{\n            title: 'Profile',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"user\"\n                size={28}\n              />\n            ),\n          }}\n        />\n      </TabStack.Navigator>\n    </>\n  );\n};\n\nconst Root = () => {\n  const theme = useTheme();\n  const { domain } = useContext(ServerContext);\n  return (\n    <RootStack.Navigator screenOptions={{ headerShown: false }}>\n      {domain ? (\n        <>\n          <RootStack.Group>\n            <RootStack.Screen name=\"Main\" component={Tabs} />\n          </RootStack.Group>\n          <RootStack.Group\n            screenOptions={{\n              contentStyle: {\n                backgroundColor: theme.colors.shade,\n              },\n              presentation: 'modal',\n            }}\n          >\n            <RootStack.Screen name=\"Comments\" component={CommentsScreen} />\n          </RootStack.Group>\n        </>\n      ) : (\n        <RootStack.Group>\n          <RootStack.Screen name=\"Login\" component={LoginScreen} />\n          <RootStack.Screen\n            initialParams={{ inviteCode: '' }}\n            name=\"AcceptInvitation\"\n            component={AcceptInvitationScreen}\n          />\n        </RootStack.Group>\n      )}\n    </RootStack.Navigator>\n  );\n};\n\ninterface RouterProps {\n  colorScheme: string;\n}\n\nconst Router: React.FC<RouterProps> = ({ colorScheme }) => {\n  const theme = useTheme();\n  const baseTheme = useMemo(\n    () => (colorScheme === 'dark' ? DarkTheme : DefaultTheme),\n    [colorScheme]\n  );\n  const navigationTheme = useMemo(\n    () => ({\n      ...baseTheme,\n      colors: {\n        ...baseTheme.colors,\n        background: theme.colors.shade,\n        card: theme.colors.background,\n        text: theme.colors.text,\n      },\n    }),\n    [baseTheme, theme]\n  );\n  return (\n    <NavigationContainer linking={linkingConfig} theme={navigationTheme}>\n      <Root />\n    </NavigationContainer>\n  );\n};\n\nexport { Router };\n","import { Image } from 'react-native';\nimport * as Sentry from 'sentry-expo';\n\nSentry.init({\n  dsn: 'https://a13b4a62799a4225bf9072bedc4f41fa@o165705.ingest.sentry.io/6244307',\n  enableInExpoDevelopment: true,\n  debug: false,\n});\n\nif (!Image.getSizeWithHeaders) {\n  Image.getSizeWithHeaders = (uri, headers, success, failed) => {\n    success(100, 100);\n  };\n}\n\nimport App from './src/App';\n\nexport default App;\n","import React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { useColorScheme } from './hooks/colors';\nimport { ThemeProvider } from 'styled-components/native';\nimport { StatusBar } from 'expo-status-bar';\nimport { GraphQLProvider } from './context/graphql';\nimport { ServerProvider } from './context/server';\nimport { light, dark } from '#/theme';\nimport { Router } from '#/router';\nimport { NotificationProvider } from './context/notifications';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n  return (\n    <ThemeProvider theme={colorScheme === 'dark' ? dark : light}>\n      <SafeAreaProvider>\n        <NotificationProvider>\n          <ServerProvider>\n            <StatusBar style={colorScheme === 'dark' ? 'light' : 'dark'} />\n            <GraphQLProvider>\n              <Router colorScheme={colorScheme} />\n            </GraphQLProvider>\n          </ServerProvider>\n        </NotificationProvider>\n      </SafeAreaProvider>\n    </ThemeProvider>\n  );\n}\n","import {\n  ColorSchemeName,\n  useColorScheme as _useColorScheme,\n} from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import React, { createContext, useCallback, useEffect, useState } from 'react';\nimport { Buffer } from 'buffer';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { registerForPushNotificationsAsync } from './push';\nimport { useNotifications } from '#/hooks/notifications';\n\nconst STORAGE_KEY = '_/server';\ntype ServerContextValue = {\n  domain?: string;\n  pushToken: string | undefined;\n  token?: string;\n  logout: () => Promise<void>;\n  login: (domain: string, username: string, secret: string) => Promise<void>;\n  config?: {\n    notifications: {\n      push: boolean;\n    };\n  };\n  acceptInvitation: (\n    invitation: string,\n    username: string,\n    secret: string,\n    name?: string\n  ) => Promise<void>;\n};\n\nconst ServerContext = createContext<ServerContextValue>(undefined as any);\n\nconst ServerProvider: React.FC = ({ children }) => {\n  const [context, setContext] = useState<{ domain: string; token: string }>();\n  const { show, dismiss } = useNotifications();\n  const [config, setConfig] = useState<ServerContextValue['config']>();\n  const [pushToken, setPushToken] = useState<string>();\n  const [ready, setReady] = useState(false);\n  const logout = useCallback(async () => {\n    await AsyncStorage.removeItem(STORAGE_KEY);\n    setContext(undefined);\n  }, [setContext]);\n\n  useEffect(() => {\n    if (!context || !config?.notifications.push) {\n      return;\n    }\n    registerForPushNotificationsAsync().then(setPushToken);\n  }, [context, config]);\n\n  const login = useCallback(\n    async (domain: string, username: string, secret: string) => {\n      const authUrl = `${domain}/graphql`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: `\n            mutation CreateAuthToken($secret: String!, $username: String!) {\n              createAuthToken(secret: $secret, username: $username)\n            } \n          `,\n          variables: {\n            username,\n            secret,\n          },\n        }),\n      });\n      if (!response.ok) {\n        show({\n          type: 'error',\n          text: await response.text(),\n        });\n        throw new Error('failed');\n      }\n      const json = await response.json();\n      const context = {\n        token: json.data.createAuthToken,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    [show]\n  );\n\n  const acceptInvitation = useCallback(\n    async (\n      invitation: string,\n      username: string,\n      secret: string,\n      name?: string\n    ) => {\n      const rawInvite = Buffer.from(invitation, 'base64').toString('utf-8');\n      const { creationToken, domain } = JSON.parse(rawInvite);\n      const authUrl = `${domain}/api/accept-invitation`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n          secret,\n          creationToken,\n          name,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const json = await response.json();\n      const context = {\n        token: json.token,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    []\n  );\n\n  useEffect(() => {\n    const run = async () => {\n      const item = await AsyncStorage.getItem(STORAGE_KEY);\n      if (item) {\n        const nextContext = JSON.parse(item) as ServerContextValue;\n        try {\n          const configResponse = await fetch(\n            `${nextContext.domain}/api/config`,\n            {\n              headers: {\n                Authorization: `Bearer ${nextContext.token}`,\n              },\n            }\n          );\n          if (configResponse.ok) {\n            setConfig(await configResponse.json());\n            setContext(JSON.parse(item));\n          } else {\n            show({\n              type: 'error',\n              text: await configResponse.text(),\n            });\n          }\n        } catch (err) {\n          show({\n            type: 'error',\n            text: err.message,\n          });\n        }\n      }\n      setReady(true);\n    };\n    run().catch(() => {\n      setReady(true);\n    });\n  }, []);\n\n  if (!ready) {\n    return <></>;\n  }\n\n  return (\n    <ServerContext.Provider\n      value={{ ...context, config, pushToken, logout, login, acceptInvitation }}\n    >\n      {children}\n    </ServerContext.Provider>\n  );\n};\n\nexport { ServerContext, ServerProvider };\n","import * as Device from 'expo-device';\nimport { Platform } from 'react-native';\nimport * as Notifications from 'expo-notifications';\n\nexport const registerForPushNotificationsAsync = async () => {\n  if (Device.isDevice && Platform.OS !== 'web') {\n    const { status: existingStatus } =\n      await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      return;\n    }\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n    return token;\n  }\n};\n","import React from 'react';\nimport { Feather } from '@expo/vector-icons';\nimport { useTheme } from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ntype Props = {\n  size?: number;\n  color?: keyof Theme['colors'];\n  name: keyof typeof Feather.glyphMap;\n};\n\nfunction Icon({ size, color, name }: Props) {\n  const theme = useTheme();\n  return (\n    <Feather\n      name={name}\n      color={color ? theme.colors[color] : theme.colors.icon}\n      size={size ?? theme.sizes.icons}\n    />\n  );\n}\n\nexport { Icon };\n","import styled from 'styled-components/native';\nimport Theme from '#/theme/Theme';\n\ninterface TextProps {\n  color?: keyof Theme['colors'];\n  bold?: boolean;\n  theme: Theme;\n}\n\nconst BaseText = styled.Text<TextProps>`\n  color: ${({ color, theme }) =>\n    color ? theme.colors[color] : theme.colors.text};\n  font-weight: ${({ bold }) => (bold ? 'bold' : 'normal')};\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n`;\n\nconst Jumbo = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 2.8}px;\n  font-weight: bold;\n`;\n\nconst Title2 = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 1.3}px;\n  font-weight: bold;\n`;\n\nconst Title1 = styled(BaseText)`\n  font-weight: bold;\n`;\n\nconst Body1 = styled(BaseText)``;\n\nconst Overline = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.6}px;\n  text-transform: uppercase;\n`;\n\nconst Caption = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.8}px;\n`;\n\nconst Link = styled(BaseText)`\n  text-transform: uppercase;\n`;\n\nexport type { TextProps };\nexport { Jumbo, Title2, Title1, Body1, Overline, Caption, Link };\n","import { ServerContext } from '#/context/server';\nimport styled from 'styled-components/native';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\n\nconst Wrapper = styled.View<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\nconst ImageWrapper = styled.Image`\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: #ccc;\n`;\n\ntype Props = {\n  media: DeepPartial<MediaModel>;\n};\nconst Image: React.FC<Props> = ({ media }) => {\n  const { domain, token } = useContext(ServerContext);\n  const [width, setWidth] = useState<number>(0);\n  const [url, setUrl] = useState<string>();\n  useEffect(() => {\n    const run = async () => {\n      const response = await fetch(`${domain}/api/thumb/${media.id!}`, {\n        headers: {\n          Authorization: `bearer ${token!}`,\n        },\n      });\n      const binaryData = await response.arrayBuffer();\n      const contentType = response.headers.get('content-type');\n      const base64 = Buffer.from(binaryData).toString('base64');\n      const dataUrl = `data:${contentType || 'image/jpeg'};base64,${base64}`;\n      setUrl(dataUrl);\n    };\n    run();\n  }, [domain, token, media.id]);\n  return (\n    <Wrapper\n      height={width / media.aspect!}\n      onLayout={evt => {\n        const currentWidth = evt.nativeEvent.layout.width;\n        if (currentWidth !== width) {\n          setWidth(currentWidth);\n        }\n      }}\n    >\n      <ImageWrapper source={{ uri: url }} />\n    </Wrapper>\n  );\n};\n\nexport { Image };\n"],"sourceRoot":""}