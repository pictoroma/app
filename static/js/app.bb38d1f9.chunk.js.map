{"version":3,"sources":["src/components/Row/Cell.tsx","src/components/Row/index.tsx","src/components/Row/PlaceholderIcon.tsx","src/hooks/notifications.ts","assets/images/tourist.png","src/components/notification/index.tsx","src/context/notifications/index.tsx","assets/images/error.png","src/context/graphql/index.tsx","src/theme/light.ts","src/theme/dark.ts","src/router/linking.ts","src/components/loaders/overlay/index.tsx","src/components/avatar/index.tsx","src/components/Button/index.tsx","src/components/Modal/index.web.tsx","src/components/Page/index.tsx","src/components/Popup/index.tsx","src/components/posts/filter/index.tsx","src/components/Row/Header.tsx","src/components/Group/index.tsx","src/components/Input/index.tsx","src/components/Dialog/index.tsx","src/components/Header/index.tsx","src/components/gallery/index.tsx","src/components/gallery/save.ts","src/hooks/graphql.tsx","src/hooks/utils.ts","src/context/home/index.tsx","src/hooks/media.ts","src/hooks/posts.ts","src/components/rows/post/index.tsx","src/components/add-images/index.tsx","src/components/inputs/feed/index.tsx","src/components/inputs/user/index.tsx","src/components/inputs/name-value/index.tsx","src/components/utils/push-registration.tsx","src/context/profile/index.tsx","src/hooks/profile.ts","src/screens/posts/add/index.tsx","src/screens/posts/feed/index.tsx","src/hooks/feeds.ts","src/screens/profile/index.tsx","src/hooks/users.ts","src/screens/feeds/edit/index.tsx","src/screens/login/login/index.tsx","src/screens/login/accept-invitation/index.tsx","src/screens/comments/index.tsx","src/router/index.tsx","App.tsx","src/App.tsx","src/hooks/colors.ts","src/context/server/index.tsx","src/context/server/push.ts","src/components/Icon/index.tsx","src/typography/index.ts","src/components/Image/index.web.tsx"],"names":["Wrapper","styled","View","theme","margins","medium","background","flex","direction","align","Touch","TouchableOpacity","Cell","children","onPress","props","accessibilityLabel","accessibilityRole","accessibilityHint","others","node","accessible","Children","color","size","componentOrString","input","Component","Row","top","left","right","title","overline","description","Overline","Title1","Body1","useNotifications","useContext","NotificationContext","module","exports","colors","destructive","Notification","notification","dismiss","text","Icon","name","createContext","undefined","nextId","NotificationProvider","useState","notifications","setNotifications","insets","useSafeAreaInsets","show","useCallback","id","current","filter","c","context","useMemo","Provider","value","length","map","index","GraphQLProvider","ServerContext","token","domain","apolloClient","link","createHttpLink","uri","authLink","setContext","_","headers","authorization","ApolloClient","cache","InMemoryCache","concat","ApolloProvider","client","lightTheme","primary","icon","shade","secondary","shadow","textShade","sizes","corners","icons","small","large","font","baseSize","darkTheme","light","linkingConfig","prefixes","screens","AcceptInvitation","BlurView","Activity","ActivityIndicator","OverlayLoader","intensity","Touchable","Avatar","mediaId","content","media","aspect","getColors","type","bg","fg","StyledLink","Link","Button","Modal","visible","elm","newElm","document","createElement","style","position","display","flexDirection","width","height","transition","transform","useEffect","body","appendChild","removeChild","ReactDOM","createPortal","KeyboardAvoiding","KeyboardAvoidingView","Pressable","ErrorWrapper","ErrorImage","Image","ErrorBoundary","state","hasError","error","errorInfo","Sentry","captureException","this","source","errorImage","toString","setState","React","Page","loading","keyboardShown","setKeyboardShown","Keyboard","addListener","hide","remove","disabled","behavior","Platform","OS","Top","Outer","Popup","onClose","transparent","animationType","paddingBottom","bottom","PostFilter","selected","feeds","onSelect","setVisible","feed","isSelected","includes","s","Header","add","Group","items","getKey","render","item","marginLeft","InputField","TextInput","Input","label","onChangeText","autoCorrect","secure","useTheme","keyboardType","autoCapitalize","secureTextEntry","placeholderTextColor","placeholder","Content","Dialog","renderSelect","search","create","allowClear","searchInput","setSeachInput","results","select","createItem","a","async","FlatList","data","keyExtractor","renderItem","back","actions","navigation","useNavigation","paddingTop","goBack","Ionicons","action","ScrollWrapper","ScrollView","ScrollContent","TouchableWithoutFeedback","ScrollPage","DotWrapper","Dot","Pager","total","dots","Array","fill","i","Gallery","setWidth","offset","setOffset","saveImage","url","download","FileSystem","Authorization","downloadAsync","result","Error","MediaLibrary","Alert","alert","useSaveImage","currentIndex","Math","round","lightboxVisible","setLightboxVisible","lightboxImages","currentMedia","currentAspect","Lightbox","images","imageIndex","onRequestClose","FooterComponent","dark","horizontal","scrollEventThrottle","snapToInterval","showsHorizontalScrollIndicator","decelerationRate","snapToAlignment","disableIntervalMomentum","onScroll","evt","nativeEvent","contentOffset","x","onLayout","currentWidth","layout","defaultOptions","CreateCommentDocument","gql","CreateFeedDocument","AddUserToFeedDocument","RemoveUserFromFeedDocument","PostDocument","PostsDocument","CreatePostDocument","RemovePostDocument","ProfileDocument","useProfileQuery","baseOptions","options","Apollo","SetProfileAvatarDocument","RegisterPushNotificationDocument","UsersDocument","useErrorNotification","message","HomeContext","HomeProvider","setFeeds","usePostsQuery","variables","posts","useCreateMedia","ids","file","FormData","append","fetch","method","response","ok","console","json","push","useCreatePost","useCreatePostMutation","createPostMutation","createMedia","params","useRemovePost","setLoading","refetch","useFeed","useRemovePostMutation","removePostMutation","removePost","removePostId","fullWidth","PostRow","post","menuVisible","setMenuVisible","creator","avatar","navigate","commentCount","username","Spacer","Item","ImageWrapper","AddImages","files","onUpdate","pickImage","ImagePicker","mediaTypes","All","quality","base64","cancelled","split","filename","match","exec","f","m","FeedInput","UserInput","users","NameValueInput","key","PushRegistation","pushToken","useRegisterPushNotificationMutation","registerPushMutation","ProfileContext","ProfileProvider","profile","useSetAvatar","useSetProfileAvatarMutation","setAvatarMutation","useProfile","AddPostScreen","refetchPosts","profileLoading","selectedFeed","setSelectedFeed","setMedia","setBody","createPost","adminFeeds","accessType","submit","useFocusEffect","Seperator","FeedScreen","selectedFeeds","setSelectedFeeds","userFeeds","columns","ceil","Dimensions","get","numColumns","ItemSeparatorComponent","refreshControl","RefreshControl","refreshing","onRefresh","useCreateFeed","useCreateFeedMutation","createFeedMutation","useAddUserToFeed","useAddUserToFeedMutation","addUserToFeedMutation","feedId","userId","useRemoveUserFromFeed","useRemoveUserFromFeedMutation","removeUserFromFeedMutation","ProfileScreen","logout","createFeed","addFeedVisible","setAddFeedVisible","feedName","setFeedName","setAvatar","saveAddFeed","admin","useUsers","useUsersQuery","accessTypes","FeedEditScreen","route","removeUserFromFeed","addUserToFeed","addUserVisible","setAddUserVisible","addUserSelected","setAddUserSelected","addUserAccessType","setAddUserAccessType","addUser","removeUser","relation","user","Text","LoginScreen","login","setError","setDomain","setUsername","password","setPassword","doLogin","catch","err","image","AcceptInvitationScreen","inviteCode","acceptInvitation","doAccept","CommentsScreen","setContent","useCreateCommentMutation","createCommentMutation","usePostQuery","postId","createComment","inverted","comments","reverse","RootStack","createNativeStackNavigator","TabStack","createBottomTabNavigator","ProfileStack","Profile","Navigator","screenOptions","headerShown","Screen","component","Tabs","canCreate","find","tabBarActiveTintColor","tabBarIcon","focused","Root","contentStyle","backgroundColor","presentation","initialParams","Router","colorScheme","baseTheme","DarkTheme","DefaultTheme","navigationTheme","card","NavigationContainer","linking","dsn","enableInExpoDevelopment","debug","getSizeWithHeaders","success","failed","App","_useColorScheme","StatusBar","ServerProvider","setPushToken","ready","setReady","AsyncStorage","removeItem","Device","Notifications","existingStatus","status","finalStatus","importance","MAX","vibrationPattern","lightColor","registerForPushNotificationsAsync","then","secret","authUrl","Accept","JSON","stringify","query","createAuthToken","setItem","invitation","rawInvite","Buffer","from","parse","creationToken","getItem","nextContext","configResponse","run","BaseText","bold","Jumbo","setUrl","arrayBuffer","binaryData","contentType"],"mappings":"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","file":"static/js/app.bb38d1f9.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ninterface Props {\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  children?: ReactNode;\n  onPress?: () => any;\n  background?: string;\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}\n\nconst Wrapper = styled.View<{\n  background?: string;\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  theme: Theme;\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}>`\n  padding: ${({ theme }) => theme.margins.medium / 2}px\n    ${({ theme }) => theme.margins.medium / 2}px;\n  ${({ background }) => (background ? `background: ${background};` : '')}\n  ${({ flex }) => (flex ? `flex: ${flex};` : '')}\n  flex-direction: ${({ direction }) => (direction ? direction : 'row')};\n  align-items: ${({ align }) => (align ? align : 'center')};\n`;\n\nconst Touch = styled.TouchableOpacity``;\n\nconst Cell: React.FC<Props> = ({ children, onPress, ...props }) => {\n  const {\n    accessibilityLabel,\n    accessibilityRole,\n    accessibilityHint,\n    ...others\n  } = props;\n  const node = <Wrapper {...others}>{children}</Wrapper>;\n  if (onPress) {\n    return (\n      <Touch\n        accessible\n        accessibilityRole={accessibilityRole || 'button'}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        onPress={onPress}\n      >\n        {node}\n      </Touch>\n    );\n  }\n  return node;\n};\n\nexport { Cell };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { Title1, Body1, Overline } from '#/typography';\nimport { Cell } from './Cell';\nimport { PlaceholderIcon } from './PlaceholderIcon';\n\ninterface Props {\n  background?: string;\n  top?: ReactNode;\n  left?: ReactNode;\n  right?: ReactNode;\n  title?: ReactNode;\n  overline?: ReactNode;\n  description?: ReactNode;\n  children?: ReactNode;\n  onPress?: () => any;\n}\n\nconst Children = styled.View``;\n\nconst componentOrString = (\n  input: ReactNode,\n  Component: React.FC<{ children: ReactNode }>\n) => {\n  if (!input) {\n    return null;\n  }\n  if (typeof input === 'string') {\n    return <Component>{input}</Component>;\n  }\n  return input;\n};\n\nconst Row: React.FC<Props> = ({\n  background,\n  top,\n  left,\n  right,\n  title,\n  overline,\n  description,\n  children,\n  onPress,\n}) => (\n  <Cell background={background} onPress={onPress}>\n    {left}\n    <Cell flex={1} direction=\"column\" align=\"stretch\">\n      {!!top}\n      {componentOrString(overline, Overline)}\n      {componentOrString(title, Title1)}\n      {componentOrString(description, Body1)}\n      {!!children && <Children>{children}</Children>}\n    </Cell>\n    {right}\n  </Cell>\n);\n\nexport { Row, Cell, PlaceholderIcon };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { Cell } from './Cell';\n\ninterface Props {\n  color?: string;\n  size?: number;\n  onPress?: () => void;\n}\n\nconst Icon = styled.View<{ size: number; color: string }>`\n  background: ${({ color }) => color};\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  border-radius: ${({ size }) => size / 4}px;\n`;\n\nconst PlaceholderIcon: React.FC<Props> = ({\n  color = 'red',\n  size = 24,\n  onPress,\n}) => (\n  <Cell onPress={onPress}>\n    <Icon color={color} size={size} />\n  </Cell>\n);\n\nexport { PlaceholderIcon };\n","import { NotificationContext } from \"#/context/notifications\"\nimport { useContext } from \"react\"\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  return context;\n};\n","module.exports = __webpack_public_path__ + \"static/media/tourist.e3fa36f8.png\";","import { NotificationInfo } from '#/context/notifications';\nimport { Cell, Row } from '#/components/Row';\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Icon } from '../Icon';\n\ntype Props = {\n  notification: NotificationInfo;\n  dismiss: () => void;\n}\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.destructive};\n  margin: 5px;\n  border-radius: 5px;\n`\n\nconst Notification: React.FC<Props> = ({ notification, dismiss }) => {\n  return (\n    <Wrapper>\n      <Row\n        description={notification.text}\n        right={\n          <Cell onPress={dismiss}>\n            <Icon name=\"x\" color=\"text\" />\n          </Cell>\n        }\n      />\n    </Wrapper>\n  );\n}\n\nexport { Notification };\n\n\n","import { Notification } from '#/components/notification';\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\n\ntype NotificationInfo = {\n  type: 'info' | 'error',\n  text: string;\n  autoHideAfter?: number;\n  actions?: {\n    title: string;\n    onPress: () => void;\n    dismissOnPress: boolean;\n  };\n}\n\ntype InternalNotification = NotificationInfo & {\n  id: number;\n}\n\ntype NotificationContextValue = {\n  show: (notification: NotificationInfo) => number;\n  dismiss: (id: number) => void;\n}\n\nconst NotificationContext = createContext<NotificationContextValue>(undefined as any);\n\nconst Wrapper = styled.View<{ top: number }>`\n  position: absolute;\n  top: ${({ top }) => top}px;\n  width: 100%;\n  z-index: 1000;\n`;\n\nlet nextId = 0;\n\nconst NotificationProvider: React.FC = ({ children }) => {\n  const [notifications, setNotifications] = useState<InternalNotification[]>([]);\n  const insets = useSafeAreaInsets();\n\n  const show = useCallback(\n    (notification: NotificationInfo) => {\n      const id = nextId++;\n      setNotifications(current => [...current, {...notification, id}]);\n      return id;\n    },\n    [setNotifications]\n  );\n\n  const dismiss = useCallback(\n    (id: number) => {\n      setNotifications(current => current.filter(c => c.id !== id));\n    },\n    [setNotifications],\n  );\n\n  const context = useMemo(\n    () => ({\n      show,\n      dismiss,\n    }),\n    [show, dismiss],\n  );\n\n  return (\n    <NotificationContext.Provider value={context}>\n      {notifications.length > 0 && (\n        <Wrapper top={insets.top}>\n          {notifications.map((notification, index) => (\n            <Notification dismiss={() => dismiss(notification.id)} key={index} notification={notification} />\n          ))}\n        </Wrapper>\n      )}\n      {children}\n    </NotificationContext.Provider>\n  )\n}\n\nexport type { NotificationInfo };\nexport { NotificationProvider, NotificationContext };\n","module.exports = __webpack_public_path__ + \"static/media/error.f81af091.png\";","import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport React, { useContext, useMemo } from 'react';\nimport { ServerContext } from '../server';\n\nconst GraphQLProvider: React.FC = ({ children }) => {\n  const { token, domain } = useContext(ServerContext);\n  const apolloClient = useMemo(() => {\n    const link = createHttpLink({\n      uri: `${domain}/graphql`,\n    });\n    const authLink = setContext((_, { headers }) => {\n      return {\n        headers: {\n          ...headers,\n          authorization: `bearer ${token}`,\n        },\n      };\n    });\n    return new ApolloClient({\n      cache: new InMemoryCache(),\n      link: authLink.concat(link),\n    });\n  }, [token, domain]);\n\n  return <ApolloProvider client={apolloClient}>{children}</ApolloProvider>;\n};\n\nexport { GraphQLProvider };\n","import Theme from './Theme';\n\nconst lightTheme: Theme = {\n  colors: {\n    primary: '#1abc9c',\n    icon: '#1abc9c',\n    destructive: '#e74c3c',\n    shade: '#ededed',\n    input: '#ddd',\n    secondary: 'blue',\n    shadow: '#000',\n    background: '#fff',\n    text: '#000',\n    textShade: '#999',\n  },\n  sizes: {\n    corners: 5,\n    icons: 24,\n  },\n  margins: {\n    small: 8,\n    medium: 16,\n    large: 24,\n  },\n  font: {\n    baseSize: 14,\n  },\n};\n\nexport default lightTheme;\n","import Theme from './Theme';\nimport light from './light';\n\nconst darkTheme: Theme = {\n  ...light,\n  colors: {\n    ...light.colors,\n    primary: '#e67e22',\n    input: '#333',\n    icon: '#e67e22',\n    background: '#151515',\n    shadow: '#000',\n    secondary: 'blue',\n    shade: '#000',\n    text: '#fff',\n    textShade: '#666',\n  },\n};\n\nexport default darkTheme;\n","export const linkingConfig = {\n  prefixes: ['pictoroma://'],\n  screens: {\n    AcceptInvitation: 'login/accept-invite',\n  },\n};\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { BlurView } from 'expo-blur';\n\nconst Wrapper = styled(BlurView)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 100;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Activity = styled.ActivityIndicator`\n  \n`\n\n\nconst OverlayLoader: React.FC<{}> = () => (\n  <Wrapper intensity={20}>\n    <Activity /> \n  </Wrapper>\n);\n\nexport { OverlayLoader };\n","import styled from 'styled-components/native';\nimport { Icon } from '../Icon';\nimport { Image } from '../Image';\n\ntype Props = {\n  mediaId?: string;\n  onPress?: () => void;\n};\n\nconst Touchable = styled.TouchableOpacity``;\nconst Wrapper = styled.View`\n  position: relative;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Avatar: React.FC<Props> = ({ mediaId, onPress }) => {\n  const content = (\n    <Wrapper>\n      {mediaId ? (\n        <Image media={{ aspect: 1, id: mediaId }} />\n      ) : (\n        <Icon name=\"user\" />\n      )}\n    </Wrapper>\n  );\n\n  if (onPress) {\n    return <Touchable onPress={onPress}>{content}</Touchable>;\n  }\n  return content;\n};\n\nexport { Avatar };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native';\nimport { Theme } from '#/theme';\nimport { Link } from '#/typography';\n\ninterface Props {\n  title: string;\n  onPress?: () => any;\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  type?: 'primary' | 'secondary' | 'destructive';\n}\n\nconst Touch = styled.TouchableOpacity``;\n\nconst getColors = (type: Props['type'], theme: Theme) => {\n  if (type === 'secondary') {\n    return { bg: theme.colors.secondary, fg: '#fff' };\n  }\n  if (type === 'destructive') {\n    return { bg: 'transparent', fg: theme.colors.destructive };\n  }\n  return { bg: theme.colors.primary, fg: '#fff' };\n};\n\nconst Wrapper = styled.View<{\n  theme: Theme;\n  type: Props['type'];\n}>`\n  background: ${({ theme, type }) => getColors(type, theme).bg};\n  padding: ${({ theme }) => theme.margins.small}px;\n  border-radius: ${({ theme }) => theme.sizes.corners}px;\n  align-items: center;\n`;\n\nconst StyledLink = styled<{\n  theme: Theme;\n  type: Props['type'];\n}>(Link)`\n  color: ${({ theme, type }) => getColors(type, theme).fg};\n  font-weight: bold;\n`;\n\nconst Button: React.FC<Props> = ({\n  title,\n  onPress,\n  accessibilityHint,\n  accessibilityRole,\n  accessibilityLabel,\n  type,\n}) => (\n  <Touch\n    onPress={onPress}\n    accessible\n    accessibilityHint={accessibilityHint}\n    accessibilityRole={accessibilityRole}\n    accessibilityLabel={accessibilityLabel}\n  >\n    <Wrapper type={type}>\n      <StyledLink type={type}>{title}</StyledLink>\n    </Wrapper>\n  </Touch>\n);\n\nexport { Button };\n","import ReactDOM from 'react-dom';\nimport React, { useMemo, useEffect, ReactNode } from 'react';\n\ninterface Props {\n  visible: boolean;\n  children: ReactNode;\n}\n\nconst Modal: React.FC<Props> = ({ visible, children }) => {\n  const elm = useMemo(() => {\n    const newElm = document.createElement('div');\n    newElm.style.position = 'fixed';\n    newElm.style.display = 'flex';\n    newElm.style.flexDirection = 'column';\n    newElm.style.left = '0px';\n    newElm.style.top = '0px';\n    newElm.style.width = '100%';\n    newElm.style.height = '100%';\n    newElm.style.transition = 'transform 0.3s';\n    newElm.style.transform = 'translateY(100%)';\n    return newElm;\n  }, []);\n  useEffect(() => {\n    document.body.appendChild(elm);\n    return () => {\n      document.body.removeChild(elm);\n    };\n  }, [elm]);\n  useEffect(() => {\n    if (visible) {\n      elm.style.transform = 'translateY(0)';\n    } else {\n      elm.style.transform = 'translateY(100%)';\n    }\n  }, [elm, visible]);\n\n  return ReactDOM.createPortal(<>{children}</>, elm);\n};\n\nexport { Modal };\n","import React, { useState, useEffect, ReactNode } from 'react';\nimport * as Sentry from 'sentry-expo';\nimport styled from 'styled-components/native';\nimport { Keyboard, Platform } from 'react-native';\nimport { OverlayLoader } from '../loaders';\nimport errorImage from '#/../assets/images/error.png';\nimport { Body1, Overline } from '#/typography';\nimport { Button } from '../Button';\n\nconst KeyboardAvoiding = styled.KeyboardAvoidingView`\n  flex: 1;\n`;\n\nconst Pressable = styled.Pressable`\n  flex: 1;\n`;\n\nconst ErrorWrapper = styled.View`\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n`;\n\nconst ErrorImage = styled.Image`\n  width: 150px;\n  height: 150px;\n`;\n\ntype Props = {\n  children: ReactNode;\n  loading?: boolean;\n};\n\ntype ErrorBoundState = {\n  hasError: boolean;\n  error?: any;\n};\n\ntype ErrorBoundProps = {\n  children: ReactNode;\n};\n\nclass ErrorBoundary extends React.Component<ErrorBoundProps, ErrorBoundState> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    Sentry.Native.captureException(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <ErrorWrapper>\n          <ErrorImage source={errorImage} />\n          <Body1>An error has occured</Body1>\n          <Overline>{this.state.error?.toString()}</Overline>\n          <Button\n            onPress={() => this.setState({ hasError: false, error: undefined })}\n            title=\"Retry\"\n          />\n        </ErrorWrapper>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nconst Page: React.FC<Props> = ({ children, loading }) => {\n  const [keyboardShown, setKeyboardShown] = useState(false);\n  useEffect(() => {\n    const keyboardDidShow = () => setKeyboardShown(true);\n    const keyboardDidHide = () => setKeyboardShown(false);\n    const show = Keyboard.addListener('keyboardDidShow', keyboardDidShow);\n    const hide = Keyboard.addListener('keyboardDidHide', keyboardDidHide);\n\n    return () => {\n      show.remove();\n      hide.remove();\n    };\n  }, []);\n  return (\n    <Pressable disabled={!keyboardShown} onPress={() => Keyboard.dismiss()}>\n      <KeyboardAvoiding behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        {loading && <OverlayLoader />}\n        <ErrorBoundary>{children}</ErrorBoundary>\n      </KeyboardAvoiding>\n    </Pressable>\n  );\n};\n\nexport { Page };\n","import React, { ReactNode } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\nimport { Icon } from '#/components/Icon';\nimport { Modal } from '#/components/Modal';\nimport { Row, Cell } from '#/components/Row';\nimport { Page } from '#/components/Page';\n\ninterface Props {\n  visible: boolean;\n  onClose?: () => void;\n  children: ReactNode;\n}\n\nconst Top = styled.Pressable`\n  flex: 1;\n`;\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.background};\n  width: 100%;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-offset: 0 0;\n  shadow-opacity: 1;\n  shadow-radius: 200px;\n  border-radius: 12px;\n  margin-bottom: -12px;\n`;\n\nconst Outer = styled.View`\n  flex: 1;\n`;\n\nconst Popup: React.FC<Props> = ({ visible, children, onClose }) => {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Modal visible={visible} transparent animationType=\"slide\">\n      <Page>\n        <Outer>\n          <Top onPress={onClose} />\n          <Wrapper style={{ paddingBottom: insets.bottom + 12 }}>\n            <Row\n              right={\n                <Cell onPress={onClose}>\n                  <Icon name=\"x-circle\" />\n                </Cell>\n              }\n            />\n            {children}\n          </Wrapper>\n        </Outer>\n      </Page>\n    </Modal>\n  );\n};\n\nexport { Popup };\n","import React, { useState } from 'react';\nimport { Button } from '#/components/Button';\nimport { Icon } from '#/components/Icon';\nimport { Popup } from '#/components/Popup';\nimport { Cell, Row } from '#/components/Row';\n\ninterface PostFilterProps {\n  selected?: string[];\n  feeds?: {\n    id: string;\n    name: string;\n  }[];\n  onSelect: (ids: string[]) => void;\n}\nconst PostFilter: React.FC<PostFilterProps> = ({\n  selected = [],\n  feeds = [],\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Cell onPress={() => setVisible(true)}>\n        <Icon name=\"filter\" color={selected.length > 0 ? 'primary' : 'text'} />\n      </Cell>\n      <Popup visible={visible} onClose={() => setVisible(false)}>\n        {feeds.map(feed => {\n          const isSelected = selected.includes(feed.id);\n          return (\n            <Row\n              key={feed.id}\n              onPress={\n                isSelected\n                  ? () => onSelect(selected.filter(s => s !== feed.id))\n                  : () => onSelect([...selected, feed.id])\n              }\n              left={\n                <Cell>\n                  <Icon name={isSelected ? 'check-circle' : 'circle'} />\n                </Cell>\n              }\n              title={feed.name}\n            />\n          );\n        })}\n        {selected.length > 0 && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => onSelect([])} />\n          </Row>\n        )}\n      </Popup>\n    </>\n  );\n};\n\nexport { PostFilter };\n","import React, { ReactNode } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Row, Cell } from './index';\n\ninterface Props {\n  title: string;\n  add?: () => void;\n  onPress?: () => void;\n  left?: ReactNode;\n}\n\nfunction Header({ title, add, onPress, left }: Props) {\n  return (\n    <Row\n      onPress={onPress}\n      left={left}\n      title={title}\n      right={\n        add && (\n          <Cell onPress={add}>\n            <Icon name=\"plus-circle\" size={18} />\n          </Cell>\n        )\n      }\n    />\n  );\n}\n\nexport { Header };\n","import React, { Fragment, ReactNode, useState } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Header } from '#/components/Row/Header';\nimport styled from 'styled-components/native';\nimport { Row, Cell } from '#/components/Row';\nimport { Body1 } from '#/typography';\n\ninterface ListProps<T> {\n  title: string;\n  items: T[];\n  getKey: (item: T) => any;\n  render: (item: T) => ReactNode;\n  add?: () => void;\n}\n\ninterface ChildProps {\n  title: string;\n  add?: () => void;\n  children?: ReactNode;\n}\n\nconst Wrapper = styled.View`\n  border-radius: 7px;\n  background: ${({ theme }) => theme.colors.background};\n  shadow-offset: 0px;\n  shadow-opacity: 0.1;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-radius: 5px;\n`;\n\nfunction Group<T = any>(props: ListProps<T> | ChildProps) {\n  const [visible, setVisible] = useState(true);\n  const { title, items, getKey, render, add, children } =\n    props as ListProps<T> & ChildProps;\n  return (\n    <Row>\n      <Wrapper>\n        <Header\n          left={\n            <Icon name={visible ? 'chevron-down' : 'chevron-up'} size={18} />\n          }\n          title={title}\n          add={add}\n          onPress={() => setVisible(!visible)}\n        />\n        {visible &&\n          items &&\n          items.map(item => (\n            <Fragment key={getKey(item)}>{render(item)}</Fragment>\n          ))}\n        {visible && children}\n        {visible && !children && (!items || items.length === 0) && (\n          <Row\n            left={\n              <Cell>\n                <Icon color=\"textShade\" name=\"maximize\" />\n              </Cell>\n            }\n          >\n            <Body1 style={{ marginLeft: 10 }} color=\"textShade\">\n              Empty\n            </Body1>\n          </Row>\n        )}\n      </Wrapper>\n    </Row>\n  );\n}\n\nexport { Group };\n","import React from 'react';\nimport { KeyboardType } from 'react-native';\nimport styled, { useTheme } from 'styled-components/native';\n\ninterface Props {\n  label: string;\n  value: string;\n  onChangeText?: (text: string) => any;\n  type?: KeyboardType;\n  autoCorrect?: boolean;\n  secure?: boolean;\n}\n\nconst InputField = styled.TextInput`\n  color: ${({ theme }) => theme.colors.text};\n  padding: ${({ theme }) => theme.margins.small}px 0;\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n  width: 100%;\n`;\n\nconst Input: React.FC<Props> = ({\n  label,\n  value,\n  onChangeText,\n  type,\n  autoCorrect,\n  secure,\n}) => {\n  const theme = useTheme();\n  return (\n    <InputField\n      value={value}\n      keyboardType={type}\n      autoCapitalize={'none'}\n      autoCorrect={autoCorrect}\n      secureTextEntry={secure}\n      placeholderTextColor={theme.colors.textShade}\n      placeholder={label}\n      onChangeText={onChangeText}\n    />\n  );\n};\n\nexport { Input };\n","import React, { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { Popup } from '#/components/Popup';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Row } from '#/components/Row';\nimport { Button } from '#/components/Button';\n\ninterface Props<T> {\n  visible: boolean;\n  onClose: () => void;\n  selected?: T;\n  allowClear?: boolean;\n  items: T[];\n  onSelect: (item?: T) => void;\n  renderSelect: (item: T) => ReactNode;\n  getKey: (item: T) => any;\n  search?: (term: string, items: T[]) => T[];\n  create?: (term: string) => Promise<T>;\n}\n\nconst Touch = styled.TouchableOpacity``;\nconst Content = styled.View`\n  min-height: 40%;\n`;\n\nfunction Dialog<T>({\n  visible,\n  onClose,\n  items,\n  onSelect,\n  renderSelect,\n  getKey,\n  search,\n  create,\n  allowClear,\n}: Props<T>) {\n  const [searchInput, setSeachInput] = useState('');\n  const results = useMemo(() => {\n    if (!search || !searchInput) {\n      return items;\n    }\n    return search(searchInput, items);\n  }, [items, searchInput, search]);\n  const hide = useCallback(() => {\n    setSeachInput('');\n    onClose();\n  }, [setSeachInput, onClose]);\n\n  const select = useCallback(\n    (item: T) => {\n      onSelect(item);\n      hide();\n    },\n    [onSelect, hide]\n  );\n  const createItem = useCallback(async () => {\n    if (!create) {\n      return;\n    }\n    const item = await create(searchInput);\n    onSelect(item);\n    hide();\n  }, [create, searchInput, hide]);\n  return (\n    <Popup visible={visible} onClose={hide}>\n      {search && (\n        <Row>\n          <Input\n            label=\"Search\"\n            value={searchInput}\n            onChangeText={setSeachInput}\n          />\n        </Row>\n      )}\n      <Content>\n        {create && results.length === 0 && searchInput && (\n          <Row>\n            <Button title={`Create ${searchInput}`} onPress={createItem} />\n          </Row>\n        )}\n        {results.length > 0 && (\n          <FlatList\n            data={results}\n            keyExtractor={getKey}\n            style={{ flex: 1 }}\n            renderItem={({ item }) => (\n              <Touch onPress={() => select(item)}>{renderSelect(item)}</Touch>\n            )}\n          />\n        )}\n        {allowClear && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => select(undefined)} />\n          </Row>\n        )}\n      </Content>\n    </Popup>\n  );\n}\n\nexport { Dialog };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Row, Cell } from '#/components/Row';\nimport { Button } from '#/components/Button';\nimport { Jumbo } from '#/typography';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\ninterface Props {\n  title: string;\n  back?: boolean;\n  actions?: {\n    title: string;\n    onPress?: () => any;\n  }[];\n  right?: ReactNode;\n}\n\nconst Wrapper = styled.View``;\n\nconst Header: React.FC<Props> = ({ title, back, actions, right }) => {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Wrapper style={{ paddingTop: insets.top }}>\n      <Row\n        left={\n          !!back && (\n            <Cell onPress={() => navigation.goBack()}>\n              <Ionicons name=\"arrow-back-circle\" size={26} />\n            </Cell>\n          )\n        }\n        right={\n          (actions || right) && (\n            <>\n              {actions &&\n                actions.map(action => (\n                  <Button\n                    key={action.title}\n                    title={action.title}\n                    onPress={action.onPress}\n                  />\n                ))}\n              {right}\n            </>\n          )\n        }\n      >\n        <Jumbo>{title}</Jumbo>\n      </Row>\n    </Wrapper>\n  );\n};\n\nexport { Header };\n","import styled, { ThemeProvider } from 'styled-components/native';\nimport ImageView from 'react-native-image-viewing';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\nimport { Image } from '../Image';\nimport { Cell, Row } from '../Row';\nimport { useContext, useMemo, useState } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Icon } from '../Icon';\nimport { dark } from '#/theme';\nimport { useSaveImage } from './save';\n\nconst ScrollWrapper = styled.ScrollView<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\n\nconst ScrollContent = styled.View`\n  flex-direction: row;\n`;\n\nconst Touchable = styled.TouchableWithoutFeedback``;\n\nconst ScrollPage = styled.View<{\n  width: number;\n}>`\n  width: ${({ width }) => width}px;\n`;\n\nconst Wrapper = styled.View`\n  border-radius: 5px;\n  overflow: hidden;\n`;\n\ntype PagerProps = {\n  current: number;\n  total: number;\n};\n\nconst DotWrapper = styled.View`\n  margin-top: 10px;\n  flex-direction: row;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Dot = styled.View<{\n  selected: boolean;\n}>`\n  width: 6px;\n  height: 6px;\n  background: ${({ selected, theme }) => (selected ? theme.colors.primary : '#ccc')};\n  margin: 0 5px;\n  border-radius: 3px;\n`;\n\nconst Pager: React.FC<PagerProps> = ({ current, total }) => {\n  const dots = useMemo(\n    () => new Array(total).fill(undefined).map((_, i) => i),\n    [total]\n  );\n\n  return (\n    <DotWrapper>\n      {dots.map(i => (\n        <Dot key={i} selected={i === current} />\n      ))}\n    </DotWrapper>\n  );\n};\n\ntype GalleryProps = {\n  media: DeepPartial<MediaModel[]>;\n};\n\nconst Gallery: React.FC<GalleryProps> = ({ media }) => {\n  const [width, setWidth] = useState(0);\n  const [offset, setOffset] = useState(0);\n  const saveImage = useSaveImage();\n  const { domain, token } = useContext(ServerContext);\n  const currentIndex = useMemo(\n    () => Math.round(offset / width) || 0,\n    [offset, width]\n  );\n  const [lightboxVisible, setLightboxVisible] = useState(false);\n  const lightboxImages = useMemo(\n    () =>\n      media.map(item => ({\n        uri: `${domain}/api/media/${item?.id}`,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })),\n    [domain, token, media]\n  );\n  const currentMedia = useMemo(\n    () => media[currentIndex],\n    [media, currentIndex]\n  );\n  const currentAspect = useMemo(\n    () => currentMedia?.aspect || 1, // use current media aspect\n    [currentMedia]\n  );\n\n  if (media.length === 0) {\n    return <></>;\n  }\n  const Lightbox = () => (\n    <ImageView\n      images={lightboxImages}\n      imageIndex={currentIndex}\n      visible={lightboxVisible}\n      onRequestClose={() => setLightboxVisible(false)}\n      FooterComponent={() => (\n        <ThemeProvider theme={dark}>\n          <Row\n            right={\n              <Cell onPress={() => saveImage(lightboxImages[currentIndex].uri)}>\n                <Icon name=\"download\" />\n              </Cell>\n            }\n          />\n          <Row />\n        </ThemeProvider>\n      )}\n    />\n  );\n  if (media.length === 1) {\n    return (\n      <Row>\n        <Lightbox />\n        <Touchable onPress={() => setLightboxVisible(true)}>\n          <Wrapper>\n            <Image media={media[0]!} />\n          </Wrapper>\n        </Touchable>\n      </Row>\n    );\n  }\n\n  return (\n    <Row>\n      <Lightbox />\n      <Wrapper>\n        <ScrollWrapper\n          horizontal\n          scrollEventThrottle={16}\n          snapToInterval={width}\n          showsHorizontalScrollIndicator={false}\n          decelerationRate={0}\n          snapToAlignment=\"center\"\n          disableIntervalMomentum\n          height={width / currentAspect}\n          onScroll={evt => {\n            const offset = evt.nativeEvent.contentOffset.x;\n            setOffset(offset);\n          }}\n          onLayout={evt => {\n            const currentWidth = evt.nativeEvent.layout.width;\n            if (currentWidth !== width) {\n              setWidth(currentWidth);\n            }\n          }}\n        >\n          <Touchable onPress={() => setLightboxVisible(true)}>\n            <ScrollContent>\n              {media.map(item => (\n                <ScrollPage key={item!.id} width={width}>\n                  <Image media={item!} />\n                </ScrollPage>\n              ))}\n            </ScrollContent>\n          </Touchable>\n        </ScrollWrapper>\n      </Wrapper>\n      <Pager current={currentIndex} total={media.length} />\n    </Row>\n  );\n};\n\nexport { Gallery };\n","import * as MediaLibrary from 'expo-media-library';\nimport * as FileSystem from 'expo-file-system';\nimport { useCallback, useContext } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Alert } from 'react-native';\n\nexport const useSaveImage = () => {\n  const { token } = useContext(ServerContext);\n  const saveImage = useCallback(\n    async (url: string) => {\n      try {\n        const download = FileSystem.createDownloadResumable(\n          url,\n          FileSystem.cacheDirectory + 'download.jpeg',\n          { headers: { Authorization: `bearer: ${token}`}},\n        );\n        const result = await download.downloadAsync();\n        if (!result) {\n          throw new Error('failed');\n        }\n        MediaLibrary.saveToLibraryAsync(result.uri);\n        Alert.alert('Image saved');\n      } catch (err) {\n        Alert.alert(`Failed: ${err.toString()}`)\n      }\n    },\n    [token]\n  );\n\n  return saveImage;\n};\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type CommentCreateParameters = {\n  content?: InputMaybe<Scalars['String']>;\n  post: Scalars['String'];\n};\n\nexport type CommentModel = {\n  __typename?: 'CommentModel';\n  content: Scalars['String'];\n  created: Scalars['DateTime'];\n  creator: UserModel;\n  id: Scalars['String'];\n  post: PostModel;\n};\n\nexport type FeedModel = {\n  __typename?: 'FeedModel';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  posts: Array<PostModel>;\n  users: Array<UserFeedRelationModel>;\n};\n\n\nexport type FeedModelPostsArgs = {\n  filter?: InputMaybe<PostFindParameters>;\n};\n\nexport type MediaModel = {\n  __typename?: 'MediaModel';\n  aspect?: Maybe<Scalars['Float']>;\n  contentType?: Maybe<Scalars['String']>;\n  created?: Maybe<Scalars['DateTime']>;\n  creator: UserModel;\n  filename?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  lowres?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Float']>;\n  size: Scalars['Float'];\n  type?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addUserToFeed: UserFeedRelationModel;\n  createAuthToken: Scalars['String'];\n  createComment: CommentModel;\n  createFeed: FeedModel;\n  createPost: PostModel;\n  inviteProfile: UserModel;\n  registerPushNotification: PushRegistrationModel;\n  removePost: Scalars['Boolean'];\n  removeUserFromFeed: Scalars['Boolean'];\n  setProfileAvatar: UserModel;\n};\n\n\nexport type MutationAddUserToFeedArgs = {\n  accessType: Scalars['String'];\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationCreateAuthTokenArgs = {\n  secret: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationCreateCommentArgs = {\n  params: CommentCreateParameters;\n};\n\n\nexport type MutationCreateFeedArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  params: PostCreateParameters;\n};\n\n\nexport type MutationInviteProfileArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterPushNotificationArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type MutationRemovePostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationRemoveUserFromFeedArgs = {\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationSetProfileAvatarArgs = {\n  mediaId?: InputMaybe<Scalars['String']>;\n};\n\nexport type PostCreateParameters = {\n  body?: InputMaybe<Scalars['String']>;\n  feed: Scalars['String'];\n  media: Array<Scalars['String']>;\n};\n\nexport type PostFindParameters = {\n  after?: InputMaybe<Scalars['DateTime']>;\n  feeds?: InputMaybe<Array<Scalars['String']>>;\n  limit?: InputMaybe<Scalars['Float']>;\n  offset?: InputMaybe<Scalars['Float']>;\n};\n\nexport type PostModel = {\n  __typename?: 'PostModel';\n  body?: Maybe<Scalars['String']>;\n  commentCount: Scalars['Float'];\n  comments: Array<CommentModel>;\n  created: Scalars['DateTime'];\n  creator?: Maybe<UserModel>;\n  feed: FeedModel;\n  id: Scalars['String'];\n  media: Array<MediaModel>;\n};\n\nexport type PushRegistrationModel = {\n  __typename?: 'PushRegistrationModel';\n  device?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  feed: FeedModel;\n  feeds: Array<FeedModel>;\n  post: PostModel;\n  posts: Array<PostModel>;\n  profile?: Maybe<UserModel>;\n  users: Array<UserModel>;\n};\n\n\nexport type QueryFeedArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostsArgs = {\n  filter: PostFindParameters;\n};\n\nexport type UserFeedRelationModel = {\n  __typename?: 'UserFeedRelationModel';\n  accessType: Scalars['String'];\n  feed: FeedModel;\n  user: UserModel;\n};\n\nexport type UserModel = {\n  __typename?: 'UserModel';\n  admin: Scalars['Boolean'];\n  avatar?: Maybe<Scalars['String']>;\n  feeds: Array<UserFeedRelationModel>;\n  id: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  username: Scalars['String'];\n};\n\nexport type CreateCommentMutationVariables = Exact<{\n  params: CommentCreateParameters;\n}>;\n\n\nexport type CreateCommentMutation = { __typename?: 'Mutation', createComment: { __typename?: 'CommentModel', id: string } };\n\nexport type FeedsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FeedsQuery = { __typename?: 'Query', feeds: Array<{ __typename?: 'FeedModel', id: string, name: string, posts: Array<{ __typename?: 'PostModel', id: string, body?: string | null, media: Array<{ __typename?: 'MediaModel', id: string }> }> }> };\n\nexport type FeedQueryVariables = Exact<{\n  feedId: Scalars['String'];\n}>;\n\n\nexport type FeedQuery = { __typename?: 'Query', feed: { __typename?: 'FeedModel', id: string, name: string, users: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, user: { __typename?: 'UserModel', id: string, name?: string | null, username: string } }> } };\n\nexport type CreateFeedMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateFeedMutation = { __typename?: 'Mutation', createFeed: { __typename?: 'FeedModel', id: string } };\n\nexport type AddUserToFeedMutationVariables = Exact<{\n  accessType: Scalars['String'];\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\n\nexport type AddUserToFeedMutation = { __typename?: 'Mutation', addUserToFeed: { __typename?: 'UserFeedRelationModel', accessType: string } };\n\nexport type RemoveUserFromFeedMutationVariables = Exact<{\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\n\nexport type RemoveUserFromFeedMutation = { __typename?: 'Mutation', removeUserFromFeed: boolean };\n\nexport type PostQueryVariables = Exact<{\n  postId: Scalars['String'];\n}>;\n\n\nexport type PostQuery = { __typename?: 'Query', post: { __typename?: 'PostModel', id: string, created: any, creator?: { __typename?: 'UserModel', id: string, name?: string | null, avatar?: string | null, username: string } | null, comments: Array<{ __typename?: 'CommentModel', id: string, content: string, created: any, creator: { __typename?: 'UserModel', username: string, name?: string | null, id: string, avatar?: string | null } }>, media: Array<{ __typename?: 'MediaModel', id: string, contentType?: string | null, lowres?: string | null, aspect?: number | null, order?: number | null, created?: any | null, type?: string | null }> } };\n\nexport type PostsQueryVariables = Exact<{\n  filter: PostFindParameters;\n}>;\n\n\nexport type PostsQuery = { __typename?: 'Query', posts: Array<{ __typename?: 'PostModel', id: string, body?: string | null, commentCount: number, created: any, creator?: { __typename?: 'UserModel', name?: string | null, username: string, avatar?: string | null } | null, media: Array<{ __typename?: 'MediaModel', id: string, aspect?: number | null, type?: string | null }> }> };\n\nexport type CreatePostMutationVariables = Exact<{\n  params: PostCreateParameters;\n}>;\n\n\nexport type CreatePostMutation = { __typename?: 'Mutation', createPost: { __typename?: 'PostModel', id: string } };\n\nexport type RemovePostMutationVariables = Exact<{\n  removePostId: Scalars['String'];\n}>;\n\n\nexport type RemovePostMutation = { __typename?: 'Mutation', removePost: boolean };\n\nexport type ProfileQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProfileQuery = { __typename?: 'Query', profile?: { __typename?: 'UserModel', id: string, username: string, name?: string | null, admin: boolean, avatar?: string | null, feeds: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, feed: { __typename?: 'FeedModel', id: string, name: string } }> } | null };\n\nexport type SetProfileAvatarMutationVariables = Exact<{\n  mediaId?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type SetProfileAvatarMutation = { __typename?: 'Mutation', setProfileAvatar: { __typename?: 'UserModel', id: string } };\n\nexport type RegisterPushNotificationMutationVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type RegisterPushNotificationMutation = { __typename?: 'Mutation', registerPushNotification: { __typename?: 'PushRegistrationModel', id: string } };\n\nexport type UsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'UserModel', id: string, name?: string | null, username: string, avatar?: string | null }> };\n\n\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($params: CommentCreateParameters!) {\n  createComment(params: $params) {\n    id\n  }\n}\n    `;\nexport type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, options);\n      }\nexport type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;\nexport type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;\nexport const FeedsDocument = gql`\n    query Feeds {\n  feeds {\n    id\n    name\n    posts {\n      id\n      body\n      media {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedsQuery__\n *\n * To run a query within a React component, call `useFeedsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFeedsQuery(baseOptions?: Apollo.QueryHookOptions<FeedsQuery, FeedsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FeedsQuery, FeedsQueryVariables>(FeedsDocument, options);\n      }\nexport function useFeedsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedsQuery, FeedsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FeedsQuery, FeedsQueryVariables>(FeedsDocument, options);\n        }\nexport type FeedsQueryHookResult = ReturnType<typeof useFeedsQuery>;\nexport type FeedsLazyQueryHookResult = ReturnType<typeof useFeedsLazyQuery>;\nexport type FeedsQueryResult = Apollo.QueryResult<FeedsQuery, FeedsQueryVariables>;\nexport const FeedDocument = gql`\n    query Feed($feedId: String!) {\n  feed(id: $feedId) {\n    id\n    name\n    users {\n      accessType\n      user {\n        id\n        name\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedQuery__\n *\n * To run a query within a React component, call `useFeedQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedQuery({\n *   variables: {\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useFeedQuery(baseOptions: Apollo.QueryHookOptions<FeedQuery, FeedQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n      }\nexport function useFeedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedQuery, FeedQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n        }\nexport type FeedQueryHookResult = ReturnType<typeof useFeedQuery>;\nexport type FeedLazyQueryHookResult = ReturnType<typeof useFeedLazyQuery>;\nexport type FeedQueryResult = Apollo.QueryResult<FeedQuery, FeedQueryVariables>;\nexport const CreateFeedDocument = gql`\n    mutation CreateFeed($name: String!) {\n  createFeed(name: $name) {\n    id\n  }\n}\n    `;\nexport type CreateFeedMutationFn = Apollo.MutationFunction<CreateFeedMutation, CreateFeedMutationVariables>;\n\n/**\n * __useCreateFeedMutation__\n *\n * To run a mutation, you first call `useCreateFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createFeedMutation, { data, loading, error }] = useCreateFeedMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateFeedMutation(baseOptions?: Apollo.MutationHookOptions<CreateFeedMutation, CreateFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateFeedMutation, CreateFeedMutationVariables>(CreateFeedDocument, options);\n      }\nexport type CreateFeedMutationHookResult = ReturnType<typeof useCreateFeedMutation>;\nexport type CreateFeedMutationResult = Apollo.MutationResult<CreateFeedMutation>;\nexport type CreateFeedMutationOptions = Apollo.BaseMutationOptions<CreateFeedMutation, CreateFeedMutationVariables>;\nexport const AddUserToFeedDocument = gql`\n    mutation AddUserToFeed($accessType: String!, $userId: String!, $feedId: String!) {\n  addUserToFeed(accessType: $accessType, userId: $userId, feedId: $feedId) {\n    accessType\n  }\n}\n    `;\nexport type AddUserToFeedMutationFn = Apollo.MutationFunction<AddUserToFeedMutation, AddUserToFeedMutationVariables>;\n\n/**\n * __useAddUserToFeedMutation__\n *\n * To run a mutation, you first call `useAddUserToFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddUserToFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addUserToFeedMutation, { data, loading, error }] = useAddUserToFeedMutation({\n *   variables: {\n *      accessType: // value for 'accessType'\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useAddUserToFeedMutation(baseOptions?: Apollo.MutationHookOptions<AddUserToFeedMutation, AddUserToFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddUserToFeedMutation, AddUserToFeedMutationVariables>(AddUserToFeedDocument, options);\n      }\nexport type AddUserToFeedMutationHookResult = ReturnType<typeof useAddUserToFeedMutation>;\nexport type AddUserToFeedMutationResult = Apollo.MutationResult<AddUserToFeedMutation>;\nexport type AddUserToFeedMutationOptions = Apollo.BaseMutationOptions<AddUserToFeedMutation, AddUserToFeedMutationVariables>;\nexport const RemoveUserFromFeedDocument = gql`\n    mutation RemoveUserFromFeed($userId: String!, $feedId: String!) {\n  removeUserFromFeed(userId: $userId, feedId: $feedId)\n}\n    `;\nexport type RemoveUserFromFeedMutationFn = Apollo.MutationFunction<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>;\n\n/**\n * __useRemoveUserFromFeedMutation__\n *\n * To run a mutation, you first call `useRemoveUserFromFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveUserFromFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeUserFromFeedMutation, { data, loading, error }] = useRemoveUserFromFeedMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useRemoveUserFromFeedMutation(baseOptions?: Apollo.MutationHookOptions<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>(RemoveUserFromFeedDocument, options);\n      }\nexport type RemoveUserFromFeedMutationHookResult = ReturnType<typeof useRemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationResult = Apollo.MutationResult<RemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationOptions = Apollo.BaseMutationOptions<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>;\nexport const PostDocument = gql`\n    query Post($postId: String!) {\n  post(id: $postId) {\n    id\n    creator {\n      id\n      name\n      avatar\n      username\n    }\n    created\n    comments {\n      id\n      creator {\n        username\n        name\n        id\n        avatar\n      }\n      content\n      created\n    }\n    media {\n      id\n      contentType\n      lowres\n      aspect\n      order\n      created\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts($filter: PostFindParameters!) {\n  posts(filter: $filter) {\n    id\n    body\n    commentCount\n    creator {\n      name\n      username\n      avatar\n    }\n    created\n    media {\n      id\n      aspect\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const CreatePostDocument = gql`\n    mutation CreatePost($params: PostCreateParameters!) {\n  createPost(params: $params) {\n    id\n  }\n}\n    `;\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, options);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const RemovePostDocument = gql`\n    mutation RemovePost($removePostId: String!) {\n  removePost(id: $removePostId)\n}\n    `;\nexport type RemovePostMutationFn = Apollo.MutationFunction<RemovePostMutation, RemovePostMutationVariables>;\n\n/**\n * __useRemovePostMutation__\n *\n * To run a mutation, you first call `useRemovePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemovePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removePostMutation, { data, loading, error }] = useRemovePostMutation({\n *   variables: {\n *      removePostId: // value for 'removePostId'\n *   },\n * });\n */\nexport function useRemovePostMutation(baseOptions?: Apollo.MutationHookOptions<RemovePostMutation, RemovePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemovePostMutation, RemovePostMutationVariables>(RemovePostDocument, options);\n      }\nexport type RemovePostMutationHookResult = ReturnType<typeof useRemovePostMutation>;\nexport type RemovePostMutationResult = Apollo.MutationResult<RemovePostMutation>;\nexport type RemovePostMutationOptions = Apollo.BaseMutationOptions<RemovePostMutation, RemovePostMutationVariables>;\nexport const ProfileDocument = gql`\n    query Profile {\n  profile {\n    id\n    username\n    name\n    admin\n    avatar\n    feeds {\n      feed {\n        id\n        name\n      }\n      accessType\n    }\n  }\n}\n    `;\n\n/**\n * __useProfileQuery__\n *\n * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProfileQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProfileQuery(baseOptions?: Apollo.QueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n      }\nexport function useProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n        }\nexport type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;\nexport type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;\nexport type ProfileQueryResult = Apollo.QueryResult<ProfileQuery, ProfileQueryVariables>;\nexport const SetProfileAvatarDocument = gql`\n    mutation SetProfileAvatar($mediaId: String) {\n  setProfileAvatar(mediaId: $mediaId) {\n    id\n  }\n}\n    `;\nexport type SetProfileAvatarMutationFn = Apollo.MutationFunction<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>;\n\n/**\n * __useSetProfileAvatarMutation__\n *\n * To run a mutation, you first call `useSetProfileAvatarMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProfileAvatarMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProfileAvatarMutation, { data, loading, error }] = useSetProfileAvatarMutation({\n *   variables: {\n *      mediaId: // value for 'mediaId'\n *   },\n * });\n */\nexport function useSetProfileAvatarMutation(baseOptions?: Apollo.MutationHookOptions<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>(SetProfileAvatarDocument, options);\n      }\nexport type SetProfileAvatarMutationHookResult = ReturnType<typeof useSetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationResult = Apollo.MutationResult<SetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationOptions = Apollo.BaseMutationOptions<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>;\nexport const RegisterPushNotificationDocument = gql`\n    mutation RegisterPushNotification($token: String!) {\n  registerPushNotification(token: $token) {\n    id\n  }\n}\n    `;\nexport type RegisterPushNotificationMutationFn = Apollo.MutationFunction<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>;\n\n/**\n * __useRegisterPushNotificationMutation__\n *\n * To run a mutation, you first call `useRegisterPushNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterPushNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerPushNotificationMutation, { data, loading, error }] = useRegisterPushNotificationMutation({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useRegisterPushNotificationMutation(baseOptions?: Apollo.MutationHookOptions<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>(RegisterPushNotificationDocument, options);\n      }\nexport type RegisterPushNotificationMutationHookResult = ReturnType<typeof useRegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationResult = Apollo.MutationResult<RegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationOptions = Apollo.BaseMutationOptions<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    name\n    username\n    avatar\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n      }\nexport function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;","import { ApolloError } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { useNotifications } from \"./notifications\";\n\nexport const useErrorNotification = (error?: ApolloError) => {\n  const { show, dismiss } = useNotifications();\n\n  useEffect(\n    () => {\n      if (!error) {\n        return;\n      }\n      const id = show({\n        type: 'error',\n        text: error.message,\n      });\n\n      return () => {\n        dismiss(id);\n      };\n    },\n    [error, show, dismiss],\n  )\n}\n","import { usePostsQuery } from '#/hooks/graphql';\nimport { useErrorNotification } from '#/hooks/utils';\nimport { createContext, useMemo, useState } from 'react';\n\ntype BaseType = ReturnType<typeof usePostsQuery>;\n\ntype HomeContextValue = BaseType & {\n  posts: Exclude<BaseType['data'], undefined>['posts'];\n  feeds: string[];\n  setFeeds: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nconst HomeContext = createContext<HomeContextValue>(undefined as any);\n\nconst HomeProvider: React.FC = ({ children }) => {\n  const [feeds, setFeeds] = useState<string[]>([]);\n  const { data, ...props } = usePostsQuery({\n    variables: {\n      filter: {\n        feeds: feeds.length > 0 ? feeds : undefined,\n      },\n    },\n  });\n  useErrorNotification(props.error);\n\n  const posts = useMemo(() => data?.posts || [], [data]);\n\n  const context = useMemo(\n    () => ({\n      ...props,\n      data,\n      feeds,\n      posts,\n      setFeeds,\n    }),\n    [props, data, feeds, setFeeds],\n  )\n\n  return (\n    <HomeContext.Provider value={context}>\n      {children}\n    </HomeContext.Provider>\n  );\n}\n\nexport { HomeContext, HomeProvider };\n","import { ServerContext } from '#/context/server';\nimport { useCallback, useContext } from 'react';\nimport { UploadFile } from './posts';\n\nexport const useCreateMedia = () => {\n  const { domain, token } = useContext(ServerContext);\n  const createMedia = useCallback(\n    async (media: UploadFile[]) => {\n      const ids: string[] = [];\n      for (let file of media) {\n        const data = new FormData();\n        data.append('media', file as any);\n        const response = await fetch(`${domain}/api/media`, {\n          method: 'POST',\n          body: data,\n          headers: {\n            'content-type': 'multipart/form-data',\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        if (!response.ok) {\n          console.error(await response.text());\n          throw new Error('Could not upload image');\n        }\n        const json = await response.json();\n        ids.push(json.ids[0]);\n      };\n      return ids;\n    },\n    [token, domain]\n  );\n  return createMedia;\n};\n","import { HomeContext } from '#/context/home';\nimport { ServerContext } from '#/context/server';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport {\n  useCreatePostMutation,\n  useProfileQuery,\n  useRemovePostMutation,\n} from './graphql';\nimport { useCreateMedia } from './media';\nimport { useErrorNotification } from './utils';\n\nexport type UploadFile = {\n  uri: string;\n  name: string;\n  type: string;\n};\n\nexport const useCreatePostData = () => {\n  const { data, refetch, loading, error } = useProfileQuery();\n  useErrorNotification(error);\n  const feeds = useMemo(\n    () => data?.profile?.feeds.filter(f => f.accessType === 'admin'),\n    [data]\n  );\n\n  return {\n    feeds,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nexport const useCreatePost = () => {\n  const { domain, token } = useContext(ServerContext);\n  const [createPostMutation, { error }] = useCreatePostMutation();\n  useErrorNotification(error);\n  const createMedia = useCreateMedia();\n  const createPost = useCallback(\n    async (feed: string, body: string, media: UploadFile[]) => {\n      const ids = await createMedia(media);\n      await createPostMutation({\n        variables: {\n          params: {\n            feed,\n            body,\n            media: ids,\n          },\n        },\n      });\n    },\n    [createPostMutation, token, domain]\n  );\n\n  return createPost;\n};\n\nexport const useRemovePost = () => {\n  const [loading, setLoading] = useState(false);\n  const { refetch } = useFeed();\n  const [removePostMutation, { error }] = useRemovePostMutation();\n  useErrorNotification(error);\n  const removePost = useCallback(\n    async (id: string) => {\n      setLoading(true);\n      try {\n        await removePostMutation({\n          variables: { removePostId: id },\n        });\n        await refetch();\n      } finally {\n        setLoading(false);\n      }\n    },\n    [removePostMutation],\n  )\n\n  return { removePost, loading };\n};\n\nexport const useFeed = () => {\n  const context = useContext(HomeContext);\n  return context;\n};\n","import { PostModel, useRemovePostMutation } from '#/hooks/graphql';\nimport styled from 'styled-components/native';\nimport { DeepPartial } from '#/helpers/types';\nimport { Cell, Row } from '#/components/Row';\nimport { Icon } from '#/components/Icon';\nimport { Gallery } from '#/components/gallery';\nimport { Body1 } from '#/typography';\nimport { Avatar } from '#/components/avatar';\nimport { useNavigation } from '@react-navigation/native';\nimport { Popup } from '#/components/Popup';\nimport { useCallback, useState } from 'react';\nimport { useProfile } from '#/hooks/profile';\nimport { useFeed, useRemovePost } from '#/hooks/posts';\nimport { Button } from '#/components/Button';\nimport { OverlayLoader } from '#/components/loaders';\n\ntype PostRowProps = {\n  post: DeepPartial<PostModel>;\n  fullWidth: boolean;\n};\n\nconst Wrapper = styled.View<{\n  fullWidth: boolean;\n}>`\n  ${({ fullWidth, theme }) => fullWidth ? `\n    border-top-width: 7px; \n    border-color: ${theme.colors.shade};\n  ` : `\n    background-color: ${theme.colors.shade};\n    margin: 7px;\n    border-radius: 7px;\n  `}\n`;\n\nconst PostRow: React.FC<PostRowProps> = ({ post, fullWidth }) => {\n  const navigation = useNavigation();\n  const { removePost, loading } = useRemovePost();\n  const [menuVisible, setMenuVisible] = useState(false);\n  return (\n    <Wrapper fullWidth={fullWidth}>\n      {loading && <OverlayLoader />}\n      <Row\n        left={\n          <Cell>\n            <Avatar mediaId={post?.creator?.avatar!} />\n          </Cell>\n        }\n        right={\n          (\n            <>\n              <Cell onPress={() => navigation.navigate('Comments', { id: post.id })}>\n                <Icon name=\"message-circle\" color=\"text\" size={20} />\n                <Body1>{post.commentCount}</Body1>\n              </Cell>\n              <Cell onPress={() => setMenuVisible(true)}>\n                <Icon name=\"more-horizontal\" color=\"text\" size={20} />\n              </Cell>\n            </>\n          )\n        }\n        description={post.body}\n        overline={post.creator?.name || post.creator?.username}\n      />\n      {post.media && <Gallery media={post!.media} />}\n      <Popup onClose={() => setMenuVisible(false)} visible={menuVisible}>\n        <Button onPress={() => removePost(post.id!)} title=\"Remove\" type=\"destructive\" />\n      </Popup>\n    </Wrapper>\n  );\n};\n\nexport { PostRow };\n","import { useCallback } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport styled from 'styled-components/native';\nimport { UploadFile } from '#/hooks/posts';\nimport { Icon } from '../Icon';\nimport { Row } from '../Row';\n\ntype Props = {\n  files: UploadFile[];\n  onUpdate: (files: UploadFile[]) => void;\n};\n\nconst Image = styled.Image`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 5px;\n`;\n\nconst Spacer = styled.View`\n  padding-bottom: 100%;\n`;\n\nconst Item = styled.View`\n  width: 33%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Wrapper = styled.View`\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst Button = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n  justify-content: center;\n  align-items: center;\n  background: #ddd;\n  border-radius: 5px;\n`;\n\nconst ImageWrapper = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n`;\n\nconst AddImages: React.FC<Props> = ({ files, onUpdate }) => {\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    onUpdate([...files, file]);\n  }, [files, onUpdate]);\n\n  const remove = useCallback(\n    (file: UploadFile) => {\n      onUpdate(files.filter(f => f !== file));\n    },\n    [files, onUpdate]\n  );\n\n  return (\n    <Row>\n      <Wrapper>\n        {files.map(m => (\n          <Item key={m.uri}>\n            <Spacer />\n            <ImageWrapper onPress={() => remove(m)}>\n              <Image source={{ uri: m.uri }} />\n            </ImageWrapper>\n          </Item>\n        ))}\n        <Item>\n          <Spacer />\n          <Button onPress={pickImage}>\n            <Icon name=\"plus-circle\" size={40} />\n          </Button>\n        </Item>\n      </Wrapper>\n    </Row>\n  );\n};\n\nexport { AddImages };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { DeepPartial } from '#/helpers/types';\nimport { FeedModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype FeedInputProps = {\n  label: string;\n  feeds: DeepPartial<FeedModel>[];\n  selected?: DeepPartial<FeedModel>;\n  onSelect: (feed?: DeepPartial<FeedModel>) => void;\n};\n\nconst FeedInput: React.FC<FeedInputProps> = ({\n  label,\n  feeds,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={feeds || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name} />}\n      />\n    </>\n  );\n};\n\nexport { FeedInput };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { PartialDeep } from 'type-fest';\nimport { UserModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype UserInputProps = {\n  label: string;\n  users: PartialDeep<UserModel>[];\n  selected?: PartialDeep<UserModel>;\n  onSelect: (user?: PartialDeep<UserModel>) => void;\n};\n\nconst UserInput: React.FC<UserInputProps> = ({\n  label,\n  users,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || selected?.username || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={users || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name || item.username} />}\n      />\n    </>\n  );\n};\n\nexport { UserInput };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype NameValueInputItem = {\n  key: string;\n  value: any;\n};\n\ntype NameValueInputProps = {\n  label: string;\n  items: NameValueInputItem[];\n  selected?: NameValueInputItem;\n  onSelect: (item?: NameValueInputItem) => void;\n};\n\nconst NameValueInput: React.FC<NameValueInputProps> = ({\n  label,\n  items,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.key || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={items}\n        getKey={item => item.key}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.key} />}\n      />\n    </>\n  );\n};\n\nexport { NameValueInputItem, NameValueInput };\n","import { ServerContext } from '#/context/server';\nimport { useRegisterPushNotificationMutation } from '#/hooks/graphql';\nimport React, { useContext, useEffect } from 'react';\n\nconst PushRegistation: React.FC<{}> = () => {\n  const { pushToken } = useContext(ServerContext);\n  const [registerPushMutation] = useRegisterPushNotificationMutation();\n\n  useEffect(() => {\n    if (!pushToken) {\n      return;\n    }\n    registerPushMutation({\n      variables: {\n        token: pushToken,\n      },\n    });\n  }, [pushToken]);\n\n  return <></>;\n};\n\nexport { PushRegistation };\n","\nimport { useProfileQuery } from '#/hooks/graphql';\nimport { useErrorNotification } from '#/hooks/utils';\nimport { createContext, useMemo, useState } from 'react';\n\ntype BaseType = ReturnType<typeof useProfileQuery>;\n\ntype ProfileContextValue = BaseType & {\n  profile: Exclude<BaseType['data'], undefined>['profile'];\n  feeds: Exclude<Exclude<BaseType['data'], undefined>['profile'], null | undefined>['feeds'];\n}\n\nconst ProfileContext = createContext<ProfileContextValue>(undefined as any);\n\nconst ProfileProvider: React.FC = ({ children }) => {\n  const { data, ...props } = useProfileQuery({\n    variables: {\n    },\n  });\n  useErrorNotification(props.error);\n\n  const feeds = useMemo(() => data?.profile?.feeds || [], [data]);\n  const profile = useMemo(() => data?.profile, [data]);\n\n  const context = useMemo(\n    () => ({\n      ...props,\n      data,\n      feeds,\n      profile,\n    }),\n    [props, data, feeds],\n  )\n\n  return (\n    <ProfileContext.Provider value={context}>\n      {children}\n    </ProfileContext.Provider>\n  );\n}\n\nexport { ProfileContext, ProfileProvider };\n","import { ProfileContext } from '#/context/profile';\nimport { useCallback, useContext } from 'react';\nimport { useSetProfileAvatarMutation } from './graphql';\nimport { useCreateMedia } from './media';\nimport { UploadFile } from './posts';\n\nexport const useSetAvatar = () => {\n  const createMedia = useCreateMedia();\n  const [setAvatarMutation] = useSetProfileAvatarMutation();\n\n  const setAvatar = useCallback(async (media?: UploadFile) => {\n    const [id] = media ? await createMedia([media]) : [];\n    await setAvatarMutation({\n      variables: {\n        mediaId: id,\n      },\n    });\n  }, []);\n\n  return setAvatar;\n};\n\nexport const useProfile = () => {\n  const context = useContext(ProfileContext);\n  return context;\n};\n","import React, { useCallback, useState, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { UploadFile, useCreatePost } from '#/hooks/posts';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { Page, FeedInput, AddImages, Row, Input, Button } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\nimport { useFeed } from '#/hooks/posts';\n\nconst Wrapper = styled.ScrollView`\n  flex: 1;\n`;\nconst Outer = styled.View`\n  flex: 1;\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n\nconst AddPostScreen: React.FC<AddScreenNavigationProp> = ({ navigation }) => {\n  const [loading, setLoading] = useState(false);\n  const { refetch: refetchPosts } = useFeed();\n  const { feeds, refetch, loading: profileLoading } = useProfile();\n  const [selectedFeed, setSelectedFeed] = useState<any>();\n  const [media, setMedia] = useState<UploadFile[]>([]);\n  const [body, setBody] = useState('');\n  const createPost = useCreatePost();\n  const adminFeeds = useMemo(\n    () => feeds?.filter(f => f.accessType === 'admin').map(f => f.feed) || [],\n    [feeds]\n  );\n\n  const submit = useCallback(async () => {\n    setLoading(true);\n    await createPost(selectedFeed.id, body, media);\n    await refetchPosts();\n    setLoading(false);\n    setSelectedFeed(undefined);\n    setMedia([]);\n    setBody('');\n    navigation.navigate('Feed', {});\n  }, [selectedFeed, body, media]);\n  useFocusEffect(\n    useCallback(() => {\n      refetch();\n    }, [refetch])\n  );\n\n  if (!feeds) {\n    return <></>;\n  }\n\n  return (\n    <Page loading={profileLoading || loading}>\n      <Outer>\n        <Header title=\"Create post\" />\n        <Wrapper>\n          <AddImages files={media} onUpdate={setMedia} />\n          <FeedInput\n            label=\"Feed\"\n            feeds={adminFeeds}\n            selected={selectedFeed}\n            onSelect={setSelectedFeed}\n          />\n          <Row overline=\"Content\">\n            <Input\n              label=\"Tell your story...\"\n              value={body}\n              onChangeText={setBody}\n            />\n          </Row>\n        </Wrapper>\n        <Row>\n          {!!selectedFeed && media.length > 0 && (\n            <Button onPress={submit} title=\"Create\" />\n          )}\n        </Row>\n      </Outer>\n    </Page>\n  );\n};\n\nexport { AddPostScreen };\n","import React, { useCallback, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { ListRenderItem, RefreshControl, Dimensions } from 'react-native';\nimport MasonryList from '@react-native-seoul/masonry-list';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { useFeed } from '#/hooks/posts';\nimport { Page } from '#/components/Page';\nimport { PostFilter, PostRow } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\n\nconst Seperator = styled.View`\n  margin-top: 15px;\n  border-bottom-width: 5px;\n  margin-bottom: 15px;\n  border-color: ${({ theme }) => theme.colors.shade};\n`;\nconst Wrapper = styled.View`\n  background-color: ${({ theme }) => theme.colors.background};\n  flex: 1;\n`;\n\nconst FeedScreen: React.FC<AddScreenNavigationProp> = () => {\n  const { posts, loading, refetch, feeds: selectedFeeds, setFeeds: setSelectedFeeds } = useFeed();\n  const { feeds } = useProfile();\n\n  const userFeeds = useMemo(() => feeds.map(f => f.feed), [feeds]);\n  const columns = useMemo(\n    () => Math.ceil(Dimensions.get('window').width / 500),\n    [],\n  );\n\n  const renderItem: ListRenderItem<typeof posts[0]> = useCallback(\n    ({ item }) => <PostRow fullWidth={columns <= 1} key={item.id} post={item} />,\n    [columns]\n  );\n\n  return (\n    <Page>\n      <Wrapper>\n        <Header\n          key=\"test\"\n          title=\"All posts\"\n          right={\n            <>\n              {userFeeds.length > 1 && (\n                <PostFilter\n                  feeds={userFeeds}\n                  selected={selectedFeeds}\n                  onSelect={setSelectedFeeds}\n                />\n              )}\n            </>\n          }\n        />\n        <MasonryList\n          data={posts}\n          keyExtractor={(item: any) => item.id}\n          renderItem={renderItem}\n          numColumns={columns}\n          ItemSeparatorComponent={Seperator}\n          refreshControl={\n            <RefreshControl refreshing={loading} onRefresh={refetch} />\n          }\n        />\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { FeedScreen };\n","import {\n  useAddUserToFeedMutation,\n  useCreateFeedMutation,\n  useRemoveUserFromFeedMutation,\n  useFeedQuery,\n} from '#/hooks/graphql';\nimport { useCallback, useMemo } from 'react';\nimport { useErrorNotification } from './utils';\n\nconst useCreateFeed = () => {\n  const [createFeedMutation, { error }] = useCreateFeedMutation();\n  useErrorNotification(error);\n  const createFeed = useCallback(\n    async (name: string) => {\n      await createFeedMutation({\n        variables: {\n          name,\n        },\n      });\n    },\n    [createFeedMutation]\n  );\n\n  return createFeed;\n};\n\nconst useAddUserToFeed = () => {\n  const [addUserToFeedMutation, {error}] = useAddUserToFeedMutation();\n  useErrorNotification(error);\n  const addUserToFeed = useCallback(\n    async (feedId: string, userId: string, accessType: string) => {\n      await addUserToFeedMutation({\n        variables: {\n          feedId,\n          userId,\n          accessType,\n        },\n      });\n    },\n    [addUserToFeedMutation]\n  );\n\n  return addUserToFeed;\n};\n\nconst useRemoveUserFromFeed = () => {\n  const [removeUserFromFeedMutation, { error }] = useRemoveUserFromFeedMutation();\n  useErrorNotification(error);\n  const removeUserFromFeed = useCallback(\n    async (feedId: string, userId: string) => {\n      await removeUserFromFeedMutation({\n        variables: {\n          feedId,\n          userId,\n        },\n      });\n    },\n    [removeUserFromFeedMutation]\n  );\n\n  return removeUserFromFeed;\n};\n\nexport { useCreateFeed, useAddUserToFeed, useRemoveUserFromFeed };\n","import { useCallback, useContext, useState } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport {\n  Avatar,\n  Button,\n  Cell,\n  Group,\n  Header,\n  Input,\n  Page,\n  Popup,\n  Row,\n} from '#/components';\nimport { useProfile, useSetAvatar } from '#/hooks/profile';\nimport { ProfileMainScreenNavigationProp } from '#/router/types';\nimport { useCreateFeed } from '#/hooks/feeds';\nimport { ServerContext } from '#/context/server';\n\nconst ProfileScreen: React.FC<ProfileMainScreenNavigationProp> = ({\n  navigation,\n}) => {\n  const { profile, feeds, refetch } = useProfile();\n  const { logout } = useContext(ServerContext);\n  const createFeed = useCreateFeed();\n  const [addFeedVisible, setAddFeedVisible] = useState(false);\n  const [feedName, setFeedName] = useState('');\n  const setAvatar = useSetAvatar();\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    await setAvatar(file);\n    await refetch();\n  }, []);\n  const saveAddFeed = useCallback(async () => {\n    await createFeed(feedName);\n    setFeedName('');\n    setAddFeedVisible(false);\n    await refetch();\n  }, [feedName, createFeed]);\n  return (\n    <Page>\n      <Header title=\"Profile\" />\n      <Row\n        left={\n          <Cell>\n            <Avatar\n              mediaId={profile?.avatar || undefined}\n              onPress={pickImage}\n            />\n          </Cell>\n        }\n        title={profile?.name || profile?.username}\n      />\n      <Popup visible={addFeedVisible} onClose={() => setAddFeedVisible(false)}>\n        <Row>\n          <Input label=\"Name\" value={feedName} onChangeText={setFeedName} />\n        </Row>\n        <Row>\n          <Button title=\"Save\" onPress={saveAddFeed} />\n        </Row>\n      </Popup>\n      <Group\n        title=\"My feeds\"\n        items={feeds}\n        getKey={item => item.feed.id}\n        add={\n          profile?.admin\n            ? () => {\n                setAddFeedVisible(true);\n              }\n            : undefined\n        }\n        render={item => (\n          <Row\n            title={item.feed.name}\n            overline={item.accessType}\n            right={\n              <Cell>\n                <Button title=\"Leave\" type=\"destructive\" />\n              </Cell>\n            }\n            onPress={() => {\n              navigation.navigate('FeedEdit', { id: item.feed.id });\n            }}\n          />\n        )}\n      />\n      <Row>\n        <Button title=\"Logout\" type=\"destructive\" onPress={logout} />\n      </Row>\n    </Page>\n  );\n};\n\nexport { ProfileScreen };\n","import { useMemo } from 'react';\nimport { useUsersQuery } from './graphql';\nimport { useErrorNotification } from './utils';\n\nexport const useUsers = () => {\n  const { data, refetch, loading, error } = useUsersQuery();\n  useErrorNotification(error);\n  const users = useMemo(() => data?.users, [data]);\n  return {\n    users,\n    refetch,\n    loading,\n    error,\n  };\n};\n","import {\n  Group,\n  NameValueInput,\n  Header,\n  Input,\n  Page,\n  Popup,\n  Row,\n  UserInput,\n  NameValueInputItem,\n  Button,\n  Cell,\n} from '#/components';\nimport {\n  useAddUserToFeed,\n  useFeed,\n  useRemoveUserFromFeed,\n} from '#/hooks/feeds';\nimport { UserModel } from '#/hooks/graphql';\nimport { useUsers } from '#/hooks/users';\nimport { FeedEditScreenNavigationProp } from '#/router/types';\nimport { useCallback, useState } from 'react';\nimport { PartialDeep } from 'type-fest';\n\nconst accessTypes = [\n  { key: 'Admin', value: 'admin' },\n  { key: 'Moderator', value: 'moderator' },\n  { key: 'Writer', value: 'writer' },\n  { key: 'Reader', value: 'reader' },\n];\n\nconst FeedEditScreen: React.FC<FeedEditScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const { feed, refetch } = useFeed(id);\n  const { users } = useUsers();\n  const removeUserFromFeed = useRemoveUserFromFeed();\n  const addUserToFeed = useAddUserToFeed();\n  const [addUserVisible, setAddUserVisible] = useState(false);\n  const [addUserSelected, setAddUserSelected] =\n    useState<PartialDeep<UserModel>>();\n  const [addUserAccessType, setAddUserAccessType] =\n    useState<NameValueInputItem>();\n\n  const addUser = useCallback(async () => {\n    await addUserToFeed(id, addUserSelected!.id!, addUserAccessType!.value);\n    setAddUserSelected(undefined);\n    setAddUserAccessType(undefined);\n    setAddUserVisible(false);\n    await refetch();\n  }, [id, addUserSelected, addUserAccessType]);\n\n  const removeUser = useCallback(\n    async (userId: string) => {\n      await removeUserFromFeed(id, userId);\n      await refetch();\n    },\n    [id, removeUserFromFeed, refetch]\n  );\n\n  if (!feed) {\n    return <></>;\n  }\n\n  return (\n    <Page>\n      <Header title=\"Feed\" />\n      <Row>\n        <Input label=\"Name\" value={feed.name} />\n      </Row>\n      <Group\n        title=\"Users\"\n        add={() => {\n          setAddUserVisible(true);\n        }}\n        items={feed.users}\n        getKey={relation => relation.user.id}\n        render={relation => (\n          <Row\n            overline={relation.accessType}\n            title={relation.user.name || relation.user.username}\n            right={\n              <Cell>\n                <Button\n                  title=\"Remove\"\n                  onPress={() => removeUser(relation.user.id)}\n                />\n              </Cell>\n            }\n          />\n        )}\n      />\n      <Popup visible={addUserVisible} onClose={() => setAddUserVisible(false)}>\n        <UserInput\n          label=\"User\"\n          selected={addUserSelected}\n          onSelect={user => setAddUserSelected(user!)}\n          users={users}\n        />\n        <NameValueInput\n          label=\"Access type\"\n          selected={addUserAccessType}\n          onSelect={accessType => setAddUserAccessType(accessType!)}\n          items={accessTypes}\n        />\n        {!!addUserAccessType && !!addUserSelected && (\n          <Row>\n            <Button title=\"Save\" onPress={addUser} />\n          </Row>\n        )}\n      </Popup>\n    </Page>\n  );\n};\n\nexport { FeedEditScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { ServerContext } from '#/context/server';\nimport { Header, Icon, Page } from '#/components';\nimport { LoginScreenNavigationProp } from '#/router/types';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background: ${({ theme }) => theme.colors.shade};\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\nconst Text = styled.Text``;\n\nconst LoginScreen: React.FC<LoginScreenNavigationProp> = ({ navigation }) => {\n  const { login } = useContext(ServerContext);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n  const [domain, setDomain] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const doLogin = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await login(domain, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [domain, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          {error && <Text>{error.toString()}</Text>}\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"server\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Domain\"\n              value={domain}\n              onChangeText={setDomain}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Secret\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doLogin} title=\"Login\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { LoginScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { AcceptInvitationScreenNavigationProp } from '#/router/types';\nimport { ServerContext } from '#/context/server';\nimport { Text } from 'react-native';\nimport { Header, Icon, Page } from '#/components';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  align-items: center;\n  justify-content: center;\n  padding: 0 20px;\n  flex: 1;\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\n\nconst AcceptInvitationScreen: React.FC<\n  AcceptInvitationScreenNavigationProp\n> = ({ route, navigation }) => {\n  const { inviteCode } = route.params;\n  const { acceptInvitation } = useContext(ServerContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n\n  const doAccept = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await acceptInvitation(inviteCode, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [inviteCode, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          <Row description=\"You are almost there! Just pick your username and password and off we go!\" />\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Password\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doAccept} title=\"Let's GO\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { AcceptInvitationScreen };\n","\nimport {\n  Header,\n  Input,\n  Page,\n  Row,\n  Button,\n  Cell,\n  Avatar,\n} from '#/components';\nimport { useCreateCommentMutation, usePostQuery } from '#/hooks/graphql';\nimport { CommentsScreenNavigationProp } from '#/router/types';\nimport { useCallback, useState } from 'react';\nimport { FlatList } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\n\nconst Content = styled.View`\n  flex: 1;\n`\n\nconst Wrapper = styled.View`\n  flex: 1;\n`\n\nconst CommentsScreen: React.FC<CommentsScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const insets = useSafeAreaInsets();\n  const [content, setContent] = useState('');\n  const [createCommentMutation] = useCreateCommentMutation();\n  const { data, refetch } = usePostQuery({\n    variables: {\n      postId: id,\n    },\n  });\n\n  const createComment = useCallback(\n    async () => {\n      await createCommentMutation({\n        variables: {\n          params: {\n            content,\n            post: id,\n          }\n        }\n      });\n      setContent('');\n      await refetch();\n    },\n    [content, id, createCommentMutation, refetch],\n  )\n  return (\n    <Page>\n      <Header title=\"Comments\" />\n      <Wrapper style={{ paddingBottom: insets.bottom + 20 }}>\n        <Content>\n          <FlatList\n            style={{ flex: 1 }}\n            inverted\n            keyExtractor={item => item.id}\n            renderItem={({ item }) => (\n              <Row\n                left={(\n                  <Cell>\n                    <Avatar mediaId={item.creator.avatar || undefined}/>\n                  </Cell>\n                )}\n                overline={item.creator.name || item.creator.username}\n                description={item.content}\n              />\n            )}\n            data={[...(data?.post.comments || [])].reverse()}\n          />\n        </Content> \n        <Row\n          right={(\n            <Button title=\"Send\" onPress={createComment} />\n          )}\n        >\n          <Input label=\" Say something...\" value={content} onChangeText={setContent} />\n        </Row>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { CommentsScreen };\n","import React, { useContext, useMemo } from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useTheme } from 'styled-components/native';\nimport { ProfileParamList, RootStackParamList, TabParamList } from './types';\nimport { linkingConfig } from './linking';\nimport { Icon, PushRegistation } from '#/components';\n\nimport { AddPostScreen } from '#/screens/posts/add';\nimport { FeedScreen } from '#/screens/posts/feed';\nimport { ProfileScreen } from '#/screens/profile';\nimport { FeedEditScreen } from '#/screens/feeds/edit';\nimport { ServerContext } from '#/context/server';\nimport { LoginScreen } from '#/screens/login/login';\nimport { useProfile } from '#/hooks/profile';\nimport { AcceptInvitationScreen } from '#/screens/login/accept-invitation';\nimport { CommentsScreen } from '#/screens/comments';\nimport { HomeProvider } from '#/context/home';\n\nconst RootStack = createNativeStackNavigator<RootStackParamList>();\nconst TabStack = createBottomTabNavigator<TabParamList>();\nconst ProfileStack = createNativeStackNavigator<ProfileParamList>();\n\nconst Profile = () => {\n  return (\n    <ProfileStack.Navigator screenOptions={{ headerShown: false }}>\n      <ProfileStack.Screen name=\"ProfileMain\" component={ProfileScreen} />\n    </ProfileStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const theme = useTheme();\n  const { profile } = useProfile();\n  const canCreate = useMemo(\n    () =>\n      profile?.feeds?.find(\n        f =>\n          f.accessType === 'admin' ||\n          f.accessType === 'moderator' ||\n          f.accessType === 'writer'\n      ),\n    [profile]\n  );\n  return (\n    <>\n      <PushRegistation />\n      <TabStack.Navigator\n        screenOptions={{\n          headerShown: false,\n          tabBarActiveTintColor: theme.colors.primary,\n        }}\n      >\n        <TabStack.Screen\n          name=\"Feed\"\n          component={FeedScreen}\n          options={{\n            title: 'Posts',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"home\"\n                size={28}\n              />\n            ),\n          }}\n        />\n        {canCreate && (\n          <TabStack.Screen\n            name=\"Add\"\n            component={AddPostScreen}\n            options={{\n              title: 'Add',\n              tabBarIcon: ({ focused }) => (\n                <Icon\n                  color={focused ? 'primary' : 'text'}\n                  name=\"plus-square\"\n                  size={28}\n                />\n              ),\n            }}\n          />\n        )}\n        <TabStack.Screen\n          name=\"Profile\"\n          component={Profile}\n          options={{\n            title: 'Profile',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"user\"\n                size={28}\n              />\n            ),\n          }}\n        />\n      </TabStack.Navigator>\n    </>\n  );\n};\n\nconst Root = () => {\n  const theme = useTheme();\n  const { domain } = useContext(ServerContext);\n  return (\n    <RootStack.Navigator screenOptions={{ headerShown: false }}>\n      {domain ? (\n        <>\n          <RootStack.Group>\n            <RootStack.Screen name=\"Main\" component={Tabs} />\n          </RootStack.Group>\n          <RootStack.Group\n            screenOptions={{\n              contentStyle: {\n                backgroundColor: theme.colors.shade,\n              },\n              presentation: 'modal',\n            }}\n          >\n            <RootStack.Screen name=\"FeedEdit\" component={FeedEditScreen} />\n            <RootStack.Screen name=\"Comments\" component={CommentsScreen} />\n          </RootStack.Group>\n        </>\n      ) : (\n        <RootStack.Group>\n          <RootStack.Screen name=\"Login\" component={LoginScreen} />\n          <RootStack.Screen\n            initialParams={{ inviteCode: '' }}\n            name=\"AcceptInvitation\"\n            component={AcceptInvitationScreen}\n          />\n        </RootStack.Group>\n      )}\n    </RootStack.Navigator>\n  );\n};\n\ninterface RouterProps {\n  colorScheme: string;\n}\n\nconst Router: React.FC<RouterProps> = ({ colorScheme }) => {\n  const theme = useTheme();\n  const baseTheme = useMemo(\n    () => (colorScheme === 'dark' ? DarkTheme : DefaultTheme),\n    [colorScheme]\n  );\n  const navigationTheme = useMemo(\n    () => ({\n      ...baseTheme,\n      colors: {\n        ...baseTheme.colors,\n        background: theme.colors.shade,\n        card: theme.colors.background,\n        text: theme.colors.text,\n      },\n    }),\n    [baseTheme, theme]\n  );\n  return (\n    <HomeProvider>\n      <NavigationContainer linking={linkingConfig} theme={navigationTheme}>\n        <Root />\n      </NavigationContainer>\n    </HomeProvider>\n  );\n};\n\nexport { Router };\n","import { Image } from 'react-native';\nimport * as Sentry from 'sentry-expo';\n\nSentry.init({\n  dsn: 'https://a13b4a62799a4225bf9072bedc4f41fa@o165705.ingest.sentry.io/6244307',\n  enableInExpoDevelopment: true,\n  debug: false,\n});\n\nif (!Image.getSizeWithHeaders) {\n  Image.getSizeWithHeaders = (uri, headers, success, failed) => {\n    success(100, 100);\n  };\n}\n\nimport App from './src/App';\n\nexport default App;\n","import React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { useColorScheme } from './hooks/colors';\nimport { ThemeProvider } from 'styled-components/native';\nimport { StatusBar } from 'expo-status-bar';\nimport { GraphQLProvider } from './context/graphql';\nimport { ServerProvider } from './context/server';\nimport { light, dark } from '#/theme';\nimport { Router } from '#/router';\nimport { ProfileProvider } from './context/profile';\nimport { NotificationProvider } from './context/notifications';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n  return (\n    <ThemeProvider theme={colorScheme === 'dark' ? dark : light}>\n      <SafeAreaProvider>\n        <NotificationProvider>\n          <ServerProvider>\n            <StatusBar style={colorScheme === 'dark' ? 'light' : 'dark'} />\n            <GraphQLProvider>\n              <ProfileProvider>\n                <Router colorScheme={colorScheme} />\n              </ProfileProvider>\n            </GraphQLProvider>\n          </ServerProvider>\n        </NotificationProvider>\n      </SafeAreaProvider>\n    </ThemeProvider>\n  );\n}\n","import {\n  ColorSchemeName,\n  useColorScheme as _useColorScheme,\n} from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import React, { createContext, useCallback, useEffect, useState } from 'react';\nimport { Buffer } from 'buffer';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { registerForPushNotificationsAsync } from './push';\nimport { useNotifications } from '#/hooks/notifications';\n\nconst STORAGE_KEY = '_/server';\ntype ServerContextValue = {\n  domain?: string;\n  pushToken: string | undefined;\n  token?: string;\n  logout: () => Promise<void>;\n  login: (domain: string, username: string, secret: string) => Promise<void>;\n  acceptInvitation: (\n    invitation: string,\n    username: string,\n    secret: string,\n    name?: string\n  ) => Promise<void>;\n};\n\nconst ServerContext = createContext<ServerContextValue>(undefined as any);\n\nconst ServerProvider: React.FC = ({ children }) => {\n  const [context, setContext] = useState<{ domain: string; token: string }>();\n  const { show, dismiss } = useNotifications();\n  const [pushToken, setPushToken] = useState<string>();\n  const [ready, setReady] = useState(false);\n  const logout = useCallback(async () => {\n    await AsyncStorage.removeItem(STORAGE_KEY);\n    setContext(undefined);\n  }, [setContext]);\n\n  useEffect(() => {\n    if (!context) {\n      return;\n    }\n    registerForPushNotificationsAsync().then(setPushToken);\n  }, [context]);\n\n  const login = useCallback(\n    async (domain: string, username: string, secret: string) => {\n      const authUrl = `${domain}/graphql`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: `\n            mutation CreateAuthToken($secret: String!, $username: String!) {\n              createAuthToken(secret: $secret, username: $username)\n            } \n          `,\n          variables: {\n            username,\n            secret,\n          },\n        }),\n      });\n      if (!response.ok) {\n        show({\n          type: 'error',\n          text: await response.text(),\n        });\n        throw new Error('failed');\n      }\n      const json = await response.json();\n      const context = {\n        token: json.data.createAuthToken,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    [show]\n  );\n\n  const acceptInvitation = useCallback(\n    async (\n      invitation: string,\n      username: string,\n      secret: string,\n      name?: string\n    ) => {\n      const rawInvite = Buffer.from(invitation, 'base64').toString('utf-8');\n      const { creationToken, domain } = JSON.parse(rawInvite);\n      const authUrl = `${domain}/api/accept-invitation`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n          secret,\n          creationToken,\n          name,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const json = await response.json();\n      const context = {\n        token: json.token,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    []\n  );\n\n  useEffect(() => {\n    const run = async () => {\n      const item = await AsyncStorage.getItem(STORAGE_KEY);\n      if (item) {\n        const nextContext = JSON.parse(item) as ServerContextValue;\n        try {\n          const configResponse = await fetch(`${nextContext.domain}/api/config`, {\n            headers: {\n              Authorization: `Bearer ${nextContext.token}`,\n            },\n          });\n          if (configResponse.ok) {\n            setContext(JSON.parse(item));\n          } else {\n            show({\n              type: 'error',\n              text: await configResponse.text(),\n            });     \n          }\n        } catch(err) {\n          show({\n            type: 'error',\n            text: err.message,\n          });     \n        }\n      }\n      setReady(true);\n    };\n    run().catch(() => {\n      setReady(true);\n    });\n  }, []);\n\n  if (!ready) {\n    return <></>;\n  }\n\n  return (\n    <ServerContext.Provider\n      value={{ ...context, pushToken, logout, login, acceptInvitation }}\n    >\n      {children}\n    </ServerContext.Provider>\n  );\n};\n\nexport { ServerContext, ServerProvider };\n","import * as Device from 'expo-device';\nimport { Platform } from 'react-native';\nimport * as Notifications from 'expo-notifications';\n\nexport const registerForPushNotificationsAsync = async () => {\n  if (Device.isDevice && Platform.OS !== 'web') {\n    const { status: existingStatus } =\n      await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n    return token;\n  };\n};\n","import React from 'react';\nimport { Feather } from '@expo/vector-icons';\nimport { useTheme } from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ntype Props = {\n  size?: number;\n  color?: keyof Theme['colors'];\n  name: keyof typeof Feather.glyphMap;\n};\n\nfunction Icon({ size, color, name }: Props) {\n  const theme = useTheme();\n  return (\n    <Feather\n      name={name}\n      color={color ? theme.colors[color] : theme.colors.icon}\n      size={size ?? theme.sizes.icons}\n    />\n  );\n}\n\nexport { Icon };\n","import styled from 'styled-components/native';\nimport Theme from '#/theme/Theme';\n\ninterface TextProps {\n  color?: keyof Theme['colors'];\n  bold?: boolean;\n  theme: Theme;\n}\n\nconst BaseText = styled.Text<TextProps>`\n  color: ${({ color, theme }) =>\n    color ? theme.colors[color] : theme.colors.text};\n  font-weight: ${({ bold }) => (bold ? 'bold' : 'normal')};\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n`;\n\nconst Jumbo = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 2.8}px;\n  font-weight: bold;\n`;\n\nconst Title2 = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 1.3}px;\n  font-weight: bold;\n`;\n\nconst Title1 = styled(BaseText)`\n  font-weight: bold;\n`;\n\nconst Body1 = styled(BaseText)``;\n\nconst Overline = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.6}px;\n  text-transform: uppercase;\n`;\n\nconst Caption = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.8}px;\n`;\n\nconst Link = styled(BaseText)`\n  text-transform: uppercase;\n`;\n\nexport type { TextProps };\nexport { Jumbo, Title2, Title1, Body1, Overline, Caption, Link };\n","import { ServerContext } from '#/context/server';\nimport styled from 'styled-components/native';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\n\nconst Wrapper = styled.View<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\nconst ImageWrapper = styled.Image`\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: #ccc;\n`;\n\ntype Props = {\n  media: DeepPartial<MediaModel>;\n};\nconst Image: React.FC<Props> = ({ media }) => {\n  const { domain, token } = useContext(ServerContext);\n  const [width, setWidth] = useState<number>(0);\n  const [url, setUrl] = useState<string>();\n  useEffect(() => {\n    const run = async () => {\n      const response = await fetch(`${domain}/api/thumb/${media.id!}`, {\n        headers: {\n          Authorization: `bearer ${token!}`,\n        },\n      });\n      const binaryData = await response.arrayBuffer();\n      const contentType = response.headers.get('content-type');\n      const base64 = Buffer.from(binaryData).toString('base64');\n      const dataUrl = `data:${contentType || 'image/jpeg'};base64,${base64}`;\n      setUrl(dataUrl);\n    };\n    run();\n  }, [domain, token, media.id]);\n  return (\n    <Wrapper\n      height={width / media.aspect!}\n      onLayout={evt => {\n        const currentWidth = evt.nativeEvent.layout.width;\n        if (currentWidth !== width) {\n          setWidth(currentWidth);\n        }\n      }}\n    >\n      <ImageWrapper source={{ uri: url }} />\n    </Wrapper>\n  );\n};\n\nexport { Image };\n"],"sourceRoot":""}