{"version":3,"sources":["src/components/Row/Cell.tsx","src/components/Row/index.tsx","src/components/Row/PlaceholderIcon.tsx","src/hooks/notifications.ts","assets/images/tourist.png","src/components/notification/index.tsx","src/context/notifications/index.tsx","assets/images/error.png","src/hooks/graphql.tsx","src/hooks/utils.ts","src/context/profile/index.tsx","src/context/home/index.tsx","src/context/graphql/index.tsx","src/theme/light.ts","src/theme/dark.ts","src/router/linking.ts","src/components/loaders/overlay/index.tsx","src/components/avatar/index.tsx","src/components/Button/index.tsx","src/components/Modal/index.web.tsx","src/components/Page/index.tsx","src/components/Popup/index.tsx","src/components/posts/filter/index.tsx","src/components/Row/Header.tsx","src/components/Group/index.tsx","src/components/Input/index.tsx","src/components/Dialog/index.tsx","src/components/Header/index.tsx","src/components/gallery/index.tsx","src/components/gallery/save.ts","src/hooks/media.ts","src/hooks/posts.ts","src/components/rows/post/index.tsx","src/components/add-images/index.tsx","src/components/inputs/feed/index.tsx","src/components/inputs/user/index.tsx","src/components/inputs/name-value/index.tsx","src/components/utils/push-registration.tsx","src/hooks/profile.ts","src/screens/posts/add/index.tsx","src/screens/posts/feed/index.tsx","src/hooks/feeds.ts","src/hooks/users.ts","src/screens/profile/index.tsx","src/screens/feeds/edit/index.tsx","src/screens/login/login/index.tsx","src/screens/login/accept-invitation/index.tsx","src/screens/comments/index.tsx","src/screens/admin/users/index.tsx","src/screens/admin/feeds/index.tsx","src/router/index.tsx","App.tsx","src/App.tsx","src/hooks/colors.ts","src/context/server/index.tsx","src/context/server/push.ts","src/components/Icon/index.tsx","src/typography/index.ts","src/components/Image/index.web.tsx"],"names":["Wrapper","styled","View","theme","margins","medium","background","colors","flex","direction","align","Touch","TouchableOpacity","Cell","children","onPress","props","accessibilityLabel","accessibilityRole","accessibilityHint","others","node","accessible","Children","color","size","componentOrString","input","Component","Row","top","left","right","title","overline","description","Overline","Title1","Body1","useNotifications","useContext","NotificationContext","module","exports","destructive","Notification","notification","dismiss","Icon","name","text","createContext","undefined","nextId","NotificationProvider","useState","notifications","setNotifications","insets","useSafeAreaInsets","show","useCallback","id","current","filter","c","context","useMemo","Provider","value","length","map","index","defaultOptions","CreateCommentDocument","gql","AllFeedsDocument","FeedDocument","CreateFeedDocument","AddUserToFeedDocument","RemoveUserFromFeedDocument","RemoveFeedDocument","PostDocument","PostsDocument","CreatePostDocument","RemovePostDocument","ProfileDocument","useProfileQuery","baseOptions","options","Apollo","SetProfileAvatarDocument","InviteProfileDocument","RegisterPushNotificationDocument","UsersDocument","RemoveUserDocument","useErrorNotification","error","useEffect","console","type","message","ProfileContext","ProfileProvider","variables","data","feeds","profile","HomeContext","HomeProvider","setFeeds","usePostsQuery","posts","GraphQLProvider","ServerContext","token","domain","apolloClient","link","createHttpLink","uri","authLink","setContext","_","headers","authorization","ApolloClient","cache","InMemoryCache","concat","ApolloProvider","client","lightTheme","primary","icon","destructiveAlt","header","shade","secondary","shadow","textShade","sizes","corners","icons","small","large","font","baseSize","darkTheme","light","linkingConfig","prefixes","screens","AcceptInvitation","BlurView","Activity","ActivityIndicator","OverlayLoader","intensity","Touchable","Avatar","mediaId","content","media","aspect","getColors","bg","fg","StyledLink","Link","Button","Modal","visible","elm","newElm","document","createElement","style","position","display","flexDirection","width","height","transition","transform","body","appendChild","removeChild","ReactDOM","createPortal","KeyboardAvoiding","KeyboardAvoidingView","Pressable","ErrorWrapper","ErrorImage","Image","ErrorBoundary","state","hasError","errorInfo","Sentry","captureException","extra","this","source","errorImage","toString","setState","React","Page","loading","keyboardShown","setKeyboardShown","Keyboard","addListener","hide","remove","disabled","behavior","Platform","OS","Top","Outer","Popup","onClose","transparent","animationType","paddingBottom","bottom","PostFilter","selected","onSelect","setVisible","feed","isSelected","includes","s","Header","add","Group","items","getKey","render","item","marginLeft","InputField","TextInput","Input","label","onChangeText","autoCorrect","secure","useTheme","keyboardType","autoCapitalize","secureTextEntry","placeholderTextColor","placeholder","Content","Dialog","renderSelect","search","create","allowClear","searchInput","setSeachInput","results","select","createItem","a","async","FlatList","keyExtractor","renderItem","back","actions","navigation","useNavigation","paddingTop","goBack","Ionicons","action","ScrollWrapper","ScrollView","ScrollContent","TouchableWithoutFeedback","ScrollPage","DotWrapper","Dot","Pager","total","dots","Array","fill","i","Gallery","setWidth","offset","setOffset","saveImage","url","download","FileSystem","Authorization","downloadAsync","result","Error","MediaLibrary","Alert","alert","useSaveImage","currentIndex","Math","round","lightboxVisible","setLightboxVisible","lightboxImages","currentMedia","currentAspect","Lightbox","images","imageIndex","onRequestClose","FooterComponent","dark","horizontal","scrollEventThrottle","snapToInterval","showsHorizontalScrollIndicator","decelerationRate","snapToAlignment","disableIntervalMomentum","onScroll","evt","nativeEvent","contentOffset","x","onLayout","currentWidth","layout","useCreateMedia","ids","file","FormData","append","fetch","method","response","ok","json","push","useCreatePost","useCreatePostMutation","createPostMutation","createMedia","params","useRemovePost","setLoading","refetch","useFeed","useRemovePostMutation","removePostMutation","removePost","removePostId","fullWidth","PostRow","post","menuVisible","setMenuVisible","creator","avatar","navigate","commentCount","username","Spacer","Item","ImageWrapper","AddImages","files","onUpdate","pickImage","ImagePicker","mediaTypes","All","quality","base64","cancelled","split","filename","match","exec","f","m","FeedInput","UserInput","users","NameValueInput","key","PushRegistation","pushToken","useRegisterPushNotificationMutation","registerPushMutation","useSetAvatar","useSetProfileAvatarMutation","setAvatarMutation","useProfile","AddPostScreen","refetchPosts","profileLoading","selectedFeed","setSelectedFeed","setMedia","setBody","createPost","adminFeeds","accessType","submit","useFocusEffect","Seperator","FeedScreen","selectedFeeds","setSelectedFeeds","userFeeds","columns","ceil","Dimensions","get","numColumns","ItemSeparatorComponent","refreshControl","RefreshControl","refreshing","onRefresh","useFeedQuery","feedId","useAllFeeds","useAllFeedsQuery","allFeeds","useCreateFeed","useCreateFeedMutation","createFeedMutation","useAddUserToFeed","useAddUserToFeedMutation","addUserToFeedMutation","userId","useRemoveUserFromFeed","useRemoveUserFromFeedMutation","removeUserFromFeedMutation","useRemoveFeed","useRemoveFeedMutation","removeFeedMutation","useUsers","useUsersQuery","useSendInvite","useInviteProfileMutation","sendInviteMutation","email","useRemoveUser","useRemoveUserMutation","removeUserMutation","ProfileScreen","logout","createFeed","addFeedVisible","setAddFeedVisible","inviteVisible","setInviteVisible","inviteEmail","setInviteEmail","feedName","setFeedName","setAvatar","sendInvite","saveAddFeed","sendInviteAction","admin","accessTypes","FeedEditScreen","route","removeUserFromFeed","addUserToFeed","addUserVisible","setAddUserVisible","addUserSelected","setAddUserSelected","addUserAccessType","setAddUserAccessType","addUser","removeUser","relation","user","Text","LoginScreen","login","setError","setDomain","setUsername","password","setPassword","doLogin","catch","err","image","AcceptInvitationScreen","inviteCode","acceptInvitation","doAccept","CommentsScreen","setContent","useCreateCommentMutation","createCommentMutation","usePostQuery","postId","createComment","inverted","comments","reverse","AdminUsersScreen","searchText","setSearchText","toLowerCase","then","AdminFeedsScreen","removeFeed","u","join","RootStack","createNativeStackNavigator","TabStack","createBottomTabNavigator","ProfileStack","Profile","Navigator","screenOptions","headerShown","Screen","component","Tabs","canCreate","find","tabBarActiveTintColor","tabBarIcon","focused","Root","contentStyle","backgroundColor","presentation","initialParams","Router","colorScheme","baseTheme","DarkTheme","DefaultTheme","navigationTheme","card","NavigationContainer","linking","dsn","enableInExpoDevelopment","debug","getSizeWithHeaders","success","failed","App","_useColorScheme","StatusBar","ServerProvider","config","setConfig","setPushToken","ready","setReady","AsyncStorage","removeItem","Device","Notifications","existingStatus","status","finalStatus","importance","MAX","vibrationPattern","lightColor","registerForPushNotificationsAsync","secret","authUrl","Accept","JSON","stringify","query","createAuthToken","setItem","invitation","rawInvite","Buffer","from","parse","creationToken","getItem","nextContext","configResponse","run","BaseText","bold","Jumbo","setUrl","arrayBuffer","binaryData","contentType"],"mappings":"64BAiBA,I,IAAMA,EAAUC,IAAOC,KAAV,6GAOA,qBAAGC,MAAkBC,QAAQC,OAAS,KAC7C,qBAAGF,MAAkBC,QAAQC,OAAS,KACxC,gBAAGC,EAAH,EAAGA,WAAYH,EAAf,EAAeA,MAAf,OAA4BG,EAAU,eAAkBH,EAAMI,OAAOD,GAA/B,IAAgD,MACtF,gBAAGE,EAAH,EAAGA,KAAH,OAAeA,EAAI,SAAYA,EAAZ,IAAsB,MACzB,gBAAGC,EAAH,EAAGA,UAAH,OAAoBA,GAAwB,SAC/C,gBAAGC,EAAH,EAAGA,MAAH,OAAgBA,GAAgB,YAG3CC,EAAQV,IAAOW,iBAAV,kBAELC,EAAwB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,QAAYC,EAAY,SAE/DC,EAIED,EAJFC,mBACAC,EAGEF,EAHFE,kBACAC,EAEEH,EAFFG,kBACGC,EAJL,IAKIJ,EALJ,GAMMK,EAAO,cAACrB,EAAD,OAAaoB,GAAb,aAAsBN,KACnC,OAAIC,EAEA,cAACJ,EAAD,CACEW,YAAU,EACVJ,kBAAmBA,GAAqB,SACxCD,mBAAoBA,EACpBE,kBAAmBA,EACnBJ,QAASA,EALX,SAOGM,IAIAA,GCrCHE,GCROtB,IAAOC,KAAV,oGACM,qBAAGsB,SACR,qBAAGC,QACF,qBAAGA,QACI,qBAAGA,KAAkB,KDIvBxB,IAAOC,KAAV,mBAERwB,EAAoB,SACxBC,EACAC,GAEA,OAAKD,EAGgB,kBAAVA,EACF,cAACC,EAAD,UAAYD,IAEdA,EALE,MAQLE,EAAuB,SAAC,GAAD,IAC3BvB,EAD2B,EAC3BA,WACAwB,EAF2B,EAE3BA,IACAC,EAH2B,EAG3BA,KACAC,EAJ2B,EAI3BA,MACAC,EAL2B,EAK3BA,MACAC,EAN2B,EAM3BA,SACAC,EAP2B,EAO3BA,YACArB,EAR2B,EAQ3BA,SACAC,EAT2B,EAS3BA,QAT2B,OAW3B,eAAC,EAAD,CAAMT,WAAYA,EAAYS,QAASA,EAAvC,UACGgB,EACD,eAAC,EAAD,CAAMvB,KAAM,EAAGC,UAAU,SAASC,MAAM,UAAxC,YACKoB,EACFJ,EAAkBQ,EAAUE,KAC5BV,EAAkBO,EAAOI,KACzBX,EAAkBS,EAAaG,OAC7BxB,GAAY,cAACS,EAAD,UAAWT,OAE3BkB,O,iCErDL,sDAGaO,EAAmB,WAE9B,OADgBC,qBAAWC,O,oBCJ7BC,EAAOC,QAAU,IAA0B,qC,8NCYrC3C,EAAUC,IAAOC,KAAV,+EACG,qBAAGC,MAAkBI,OAAOqC,eAKtCC,EAAgC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,QACrD,OACE,cAAC/C,EAAD,UACE,cAAC6B,EAAA,EAAD,CACEE,KACE,cAAC,IAAD,UAAM,cAACiB,EAAA,EAAD,CAAMC,KAAK,eAAezB,MAAM,qBAExCQ,MACE,cAAC,IAAD,CAAMjB,QAASgC,EAAf,SACE,cAACC,EAAA,EAAD,CAAMC,KAAK,IAAIzB,MAAM,qBAN3B,SAUE,cAAC,IAAD,CAAOA,MAAM,iBAAb,SAA+BsB,EAAaI,Y,0kBCNpD,IAAMT,EAAsBU,6BAAwCC,GAE9DpD,EAAUC,IAAOC,KAAV,4FAEJ,qBAAG4B,OAKRuB,EAAS,EAEPC,EAAiC,SAAC,GAAkB,IAAhBxC,EAAe,EAAfA,SACxC,EAA0CyC,mBAAiC,IAA3E,WAAOC,EAAP,KAAsBC,EAAtB,KACMC,EAASC,cAETC,EAAOC,uBACX,SAACf,GACC,IAAMgB,EAAKT,IAEX,OADAI,GAAiB,SAAAM,GAAO,oBAAQA,GAAR,QAAqBjB,GAArB,IAAmCgB,YACpDA,IAET,CAACL,IAGGV,EAAUc,uBACd,SAACC,GACCL,GAAiB,SAAAM,GAAO,OAAIA,EAAQC,QAAO,SAAAC,GAAC,OAAIA,EAAEH,KAAOA,UAE3D,CAACL,IAGGS,EAAUC,mBACd,iBAAO,CACLP,OACAb,aAEF,CAACa,EAAMb,IAGT,OACE,eAACN,EAAoB2B,SAArB,CAA8BC,MAAOH,EAArC,UACGV,EAAcc,OAAS,GACtB,cAAC,EAAD,CAASxC,IAAK4B,EAAO5B,IAArB,SACG0B,EAAce,KAAI,SAACzB,EAAc0B,GAAf,OACjB,cAAC,EAAD,CAAczB,QAAS,kBAAMA,EAAQD,EAAagB,KAAiBhB,aAAcA,GAArB0B,QAIjE1D,O,oBCzEP4B,EAAOC,QAAU,IAA0B,mC,41BCO3C,IAAM8B,EAAiB,GA8UVC,EAAwBC,YAAH,6IAiCLA,YAAH,8JA0CnB,IAAMC,EAAmBD,YAAH,mLA0CtB,IAAME,EAAeF,YAAH,sNA4ClB,IAAMG,EAAqBH,YAAH,gHAiCxB,IAAMI,EAAwBJ,YAAH,sNAmC3B,IAAMK,EAA6BL,YAAH,0JAgChC,IAAMM,EAAqBN,YAAH,uGA+BxB,IAAMO,GAAeP,YAAH,ocA8DlB,IAAMQ,GAAgBR,YAAH,sRAgDnB,IAAMS,GAAqBT,YAAH,oIAiCxB,IAAMU,GAAqBV,YAAH,+GA+BxB,IAAMW,GAAkBX,YAAH,gNAkCrB,SAASY,GAAgBC,GACxB,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAqDJ,GAAiBG,GAS9E,IAAME,GAA2BhB,YAAH,oIAiC9B,IAAMiB,GAAwBjB,YAAH,yHAiC3B,IAAMkB,GAAmClB,YAAH,+IAiCtC,IAAMmB,GAAgBnB,YAAH,0GAqCnB,IAAMoB,GAAqBpB,YAAH,uG,cCx9BlBqB,GAAuB,SAACC,GACnC,MAA0B1D,eAAlBqB,EAAR,EAAQA,KAAMb,EAAd,EAAcA,QAEdmD,qBACE,WACE,GAAKD,EAAL,CAGAE,QAAQF,MAAMA,GACd,IAAMnC,EAAKF,EAAK,CACdwC,KAAM,QACNlD,KAAM+C,EAAMI,UAGd,OAAO,WACLtD,EAAQe,OAGZ,CAACmC,EAAOrC,EAAMb,K,ylBCVlB,IAAMuD,GAAiBnD,6BAAmCC,GAEpDmD,GAA4B,SAAC,GAAkB,IAAhBzF,EAAe,EAAfA,SACnC,EAA2ByE,GAAgB,CACzCiB,UAAW,KADLC,EAAR,EAAQA,KAASzF,EAAjB,UAIAgF,GAAqBhF,EAAMiF,OAE3B,IAAMS,EAAQvC,mBAAQ,wBAAU,MAAJsC,GAAA,SAAAA,EAAME,cAAN,IAAeD,QAAS,KAAI,CAACD,IACnDE,EAAUxC,mBAAQ,wBAAMsC,OAAN,EAAMA,EAAME,UAAS,CAACF,IAExCvC,EAAUC,mBACd,qBAAC,MACInD,GADL,IAEEyF,OACAC,QACAC,cAEF,CAAC3F,EAAOyF,EAAMC,IAGhB,OACE,eAACJ,GAAelC,SAAhB,CAAyBC,MAAOH,EAAhC,SACGpD,K,omBCxBP,IAAM8F,GAAczD,6BAAgCC,GAE9CyD,GAAyB,SAAC,GAAkB,IAAhB/F,EAAe,EAAfA,SAChC,EAA0ByC,mBAAmB,IAA7C,YAAOmD,EAAP,KAAcI,EAAd,KACA,EH4sBK,SAAuBtB,GACtB,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAiDP,GAAeM,GG9sBlDsB,CAAc,CACvCP,UAAW,CACTxC,OAAQ,CACN0C,MAAOA,EAAMpC,OAAS,EAAIoC,OAAQtD,MAHhCqD,EAAR,EAAQA,KAASzF,EAAjB,UAOAgF,GAAqBhF,EAAMiF,OAE3B,IAAMe,EAAQ7C,mBAAQ,kBAAU,MAAJsC,OAAA,EAAAA,EAAMO,QAAS,KAAI,CAACP,IAE1CvC,EAAUC,mBACd,qBAAC,MACInD,GADL,IAEEyF,OACAC,QACAM,QACAF,eAEF,CAAC9F,EAAOyF,EAAMC,EAAOI,IAGvB,OACE,eAACF,GAAYxC,SAAb,CAAsBC,MAAOH,EAA7B,SACGpD,K,qkBC5BP,IAAMmG,GAA4B,SAAC,GAAkB,IAAhBnG,EAAe,EAAfA,SACnC,EAA0B0B,qBAAW0E,KAA7BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACTC,EAAelD,mBAAQ,WAC3B,GAAKiD,EAAL,CAGA,IAAME,EAAOC,YAAe,CAC1BC,IAAQJ,EAAL,aAECK,EAAWC,aAAW,SAACC,EAAD,GAC1B,MAAO,CACLC,QAAQ,SAFoC,EAAdA,SAEvB,IAELC,cAAc,UAAWV,QAI/B,OAAO,IAAIW,IAAa,CACtBC,MAAO,IAAIC,IACXV,KAAMG,EAASQ,OAAOX,QAEvB,CAACH,EAAOC,IAEX,OAAKC,EAKH,eAACa,EAAA,EAAD,CAAgBC,OAAQd,EAAxB,SACE,eAAC,GAAD,UACE,eAAC,GAAD,UACGvG,QAPA,qCAAGA,KCLCsH,GA7BW,CACxB7H,OAAQ,CACN8H,QAAS,UACTC,KAAM,UACN1F,YAAa,UACb2F,eAAgB,OAChBC,OAAQ,UACRC,MAAO,UACP9G,MAAO,OACP+G,UAAW,OACXC,OAAQ,OACRrI,WAAY,OACZ4C,KAAM,OACN0F,UAAW,QAEbC,MAAO,CACLC,QAAS,EACTC,MAAO,IAET3I,QAAS,CACP4I,MAAO,EACP3I,OAAQ,GACR4I,MAAO,IAETC,KAAM,CACJC,SAAU,K,qkBCxBd,I,iCAiBeC,GAjBO,SACjBC,IADiB,IAEpB9I,OAAO,SACF8I,GAAM9I,QADL,IAEJ8H,QAAS,UACT1G,MAAO,OACP6G,OAAQ,OACRF,KAAM,UACNhI,WAAY,UACZqI,OAAQ,OACRD,UAAW,OACXD,MAAO,OACPvF,KAAM,OACN0F,UAAW,W,kDChBFU,GAAgB,CAC3BC,SAAU,CAAC,gBACXC,QAAS,CACPC,iBAAkB,wB,UCChBzJ,GAAUC,YAAOyJ,KAAPzJ,CAAH,0KAWP0J,GAAW1J,IAAO2J,kBAAV,0BAKRC,GAA8B,kBAClC,eAAC7J,GAAD,CAAS8J,UAAW,GAApB,SACE,eAACH,GAAD,O,kBCbEI,GAAY9J,IAAOW,iBAAV,oBACTZ,GAAUC,IAAOC,KAAV,yMAQS,qBAAGC,MAAkBI,OAAOD,cAG5C0J,GAA0B,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASlJ,EAAc,EAAdA,QACpCmJ,EACJ,eAAC,GAAD,UACGD,EACC,eAAC,KAAD,CAAOE,MAAO,CAAEC,OAAQ,EAAGtG,GAAImG,KAE/B,eAACjH,GAAA,EAAD,CAAMC,KAAK,WAKjB,OAAIlC,EACK,eAACgJ,GAAD,CAAWhJ,QAASA,EAApB,SAA8BmJ,IAEhCA,G,6BCpBHvJ,GAAQV,IAAOW,iBAAV,oBAELyJ,GAAY,SAACjE,EAAqBjG,GACtC,MAAa,cAATiG,EACK,CAAEkE,GAAInK,EAAMI,OAAOmI,UAAW6B,GAAI,QAE9B,gBAATnE,EACK,CAAEkE,GAAI,cAAeC,GAAIpK,EAAMI,OAAOqC,aAExC,CAAE0H,GAAInK,EAAMI,OAAO8H,QAASkC,GAAI,SAGnCvK,GAAUC,IAAOC,KAAV,8GAIG,gBAAGC,EAAH,EAAGA,MAAOiG,EAAV,EAAUA,KAAV,OAAqBiE,GAAUjE,EAAMjG,GAAOmK,MAC/C,qBAAGnK,MAAkBC,QAAQ4I,SACvB,qBAAG7I,MAAkB0I,MAAMC,WAIxC0B,GAAavK,YAGhBwK,KAHgBxK,CAAH,2DAIL,gBAAGE,EAAH,EAAGA,MAAOiG,EAAV,EAAUA,KAAV,OAAqBiE,GAAUjE,EAAMjG,GAAOoK,MAIjDG,GAA0B,SAAC,GAAD,IAC9BzI,EAD8B,EAC9BA,MACAlB,EAF8B,EAE9BA,QACAI,EAH8B,EAG9BA,kBACAD,EAJ8B,EAI9BA,kBACAD,EAL8B,EAK9BA,mBACAmF,EAN8B,EAM9BA,KAN8B,OAQ9B,eAACzF,GAAD,CACEI,QAASA,EACTO,YAAU,EACVH,kBAAmBA,EACnBD,kBAAmBA,EACnBD,mBAAoBA,EALtB,SAOE,eAAC,GAAD,CAASmF,KAAMA,EAAf,SACE,eAACoE,GAAD,CAAYpE,KAAMA,EAAlB,SAAyBnE,S,oBCrDzB0I,GAAyB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAAS9J,EAAe,EAAfA,SACnC+J,EAAM1G,mBAAQ,WAClB,IAAM2G,EAASC,SAASC,cAAc,OAUtC,OATAF,EAAOG,MAAMC,SAAW,QACxBJ,EAAOG,MAAME,QAAU,OACvBL,EAAOG,MAAMG,cAAgB,SAC7BN,EAAOG,MAAMlJ,KAAO,MACpB+I,EAAOG,MAAMnJ,IAAM,MACnBgJ,EAAOG,MAAMI,MAAQ,OACrBP,EAAOG,MAAMK,OAAS,OACtBR,EAAOG,MAAMM,WAAa,iBAC1BT,EAAOG,MAAMO,UAAY,mBAClBV,IACN,IAeH,OAdA5E,qBAAU,WAER,OADA6E,SAASU,KAAKC,YAAYb,GACnB,WACLE,SAASU,KAAKE,YAAYd,MAE3B,CAACA,IACJ3E,qBAAU,WAEN2E,EAAII,MAAMO,UADRZ,EACoB,gBAEA,qBAEvB,CAACC,EAAKD,IAEFgB,KAASC,aAAa,qCAAG/K,IAAc+J,I,ukBC3BhD,I,YAAMiB,GAAmB7L,IAAO8L,qBAAV,kCAIhBC,GAAY/L,IAAO+L,UAAV,kCAITC,GAAehM,IAAOC,KAAV,sFAMZgM,GAAajM,IAAOkM,MAAV,yDAmBVC,G,kCACJ,WAAYpL,GAAa,IAAD,uBACtB,cAAMA,IACDqL,MAAQ,CAAEC,UAAU,GAFH,E,8CASxB,SAAkBrG,EAAYsG,GAC5BC,SAAcC,iBAAiBxG,EAAO,CACpCyG,MAAOH,M,oBAIX,WAAU,IACiB,EADlB,OACP,OAAII,KAAKN,MAAMC,SAEX,gBAACL,GAAD,WACE,eAACC,GAAD,CAAYU,OAAQC,OACpB,eAAC,KAAD,mCACA,eAAC,KAAD,mBAAWF,KAAKN,MAAMpG,YAAtB,EAAW,EAAkB6G,aAC7B,eAAC,GAAD,CACE/L,QAAS,kBAAM,EAAKgM,SAAS,CAAET,UAAU,EAAOrG,WAAO7C,KACvDnB,MAAM,aAKP,qCAAG0K,KAAK3L,MAAMF,c,uCAxBvB,SAAgCmF,GAC9B,MAAO,CAAEqG,UAAU,EAAMrG,a,GAPD+G,IAAMpL,WAkC5BqL,GAAwB,SAAC,GAA2B,IAAzBnM,EAAwB,EAAxBA,SAAUoM,EAAc,EAAdA,QACzC,EAA0C3J,oBAAS,GAAnD,YAAO4J,EAAP,KAAsBC,EAAtB,KAYA,OAXAlH,qBAAU,WACR,IAEMtC,EAAOyJ,KAASC,YAAY,mBAFV,kBAAMF,GAAiB,MAGzCG,EAAOF,KAASC,YAAY,mBAFV,kBAAMF,GAAiB,MAI/C,OAAO,WACLxJ,EAAK4J,SACLD,EAAKC,YAEN,IAED,eAACxB,GAAD,CAAWyB,UAAWN,EAAepM,QAAS,kBAAMsM,KAAStK,WAA7D,SACE,gBAAC+I,GAAD,CAAkB4B,SAA0B,QAAhBC,KAASC,GAAe,UAAY,SAAhE,UACGV,GAAW,eAAC,GAAD,IACZ,eAAC,GAAD,UAAgBpM,UC/ElB+M,GAAM5N,IAAO+L,UAAV,kCAIHhM,GAAUC,IAAOC,KAAV,uMACG,qBAAGC,MAAkBI,OAAOD,cAE1B,qBAAGH,MAAkBI,OAAOoI,UAQxCmF,GAAQ7N,IAAOC,KAAV,kCAIL6N,GAAyB,SAAC,GAAoC,IAAlCnD,EAAiC,EAAjCA,QAAS9J,EAAwB,EAAxBA,SAAUkN,EAAc,EAAdA,QAC7CtK,EAASC,cAEf,OACE,eAAC,GAAD,CAAOiH,QAASA,EAASqD,aAAW,EAACC,cAAc,QAAnD,SACE,eAAC,GAAD,UACE,gBAACJ,GAAD,WACE,eAACD,GAAD,CAAK9M,QAASiN,IACd,gBAAC,GAAD,CAAS/C,MAAO,CAAEkD,cAAezK,EAAO0K,OAAS,IAAjD,UACE,eAACvM,GAAA,EAAD,CACEG,MACE,eAAC,KAAD,CAAMjB,QAASiN,EAAf,SACE,eAAChL,GAAA,EAAD,CAAMC,KAAK,iBAIhBnC,aCnCPuN,GAAwC,SAAC,GAIxC,IAAD,IAHJC,gBAGI,MAHO,GAGP,MAFJ5H,aAEI,MAFI,GAEJ,EADJ6H,EACI,EADJA,SAEA,EAA8BhL,oBAAS,GAAvC,YAAOqH,EAAP,KAAgB4D,EAAhB,KACA,OACE,uCACE,eAAC,KAAD,CAAMzN,QAAS,kBAAMyN,GAAW,IAAhC,SACE,eAACxL,GAAA,EAAD,CAAMC,KAAK,SAASzB,MAAO8M,EAAShK,OAAS,EAAI,UAAY,WAE/D,gBAAC,GAAD,CAAOsG,QAASA,EAASoD,QAAS,kBAAMQ,GAAW,IAAnD,UACG9H,EAAMnC,KAAI,SAAAkK,GACT,IAAMC,EAAaJ,EAASK,SAASF,EAAK3K,IAC1C,OACE,eAACjC,GAAA,EAAD,CAEEd,QACE2N,EACI,kBAAMH,EAASD,EAAStK,QAAO,SAAA4K,GAAC,OAAIA,IAAMH,EAAK3K,QAC/C,kBAAMyK,EAAS,GAAD,YAAKD,GAAL,CAAeG,EAAK3K,OAExC/B,KACE,eAAC,KAAD,UACE,eAACiB,GAAA,EAAD,CAAMC,KAAMyL,EAAa,eAAiB,aAG9CzM,MAAOwM,EAAKxL,MAXPwL,EAAK3K,OAefwK,EAAShK,OAAS,GACjB,eAACzC,GAAA,EAAD,UACE,eAAC,GAAD,CAAQI,MAAM,QAAQlB,QAAS,kBAAMwN,EAAS,gBCpC1D,SAASM,GAAT,GAAuD,IAArC5M,EAAoC,EAApCA,MAAO6M,EAA6B,EAA7BA,IAAK/N,EAAwB,EAAxBA,QAASgB,EAAe,EAAfA,KACrC,OACE,eAACF,GAAA,EAAD,CACEd,QAASA,EACTgB,KAAMA,EACNE,MAAOA,EACP3B,WAAW,SACX0B,MACE8M,GACE,eAAC,KAAD,CAAM/N,QAAS+N,EAAf,SACE,eAAC9L,GAAA,EAAD,CAAMC,KAAK,cAAcxB,KAAM,SCA3C,IAAMzB,GAAUC,IAAOC,KAAV,kLAEG,qBAAGC,MAAkBI,OAAOD,cAG1B,qBAAGH,MAAkBI,OAAOoI,UAK9C,SAASoG,GAAe/N,GACtB,MAA8BuC,oBAAS,GAAvC,YAAOqH,EAAP,KAAgB4D,EAAhB,KACA,EACExN,EADMiB,EAAR,EAAQA,MAAO+M,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,OAAQC,EAA9B,EAA8BA,OAAQJ,EAAtC,EAAsCA,IAAKhO,EAA3C,EAA2CA,SAE3C,OACE,eAACe,GAAA,EAAD,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CACEE,KACE,eAAC,KAAD,UAAM,eAACiB,GAAA,EAAD,CAAMC,KAAM2H,EAAU,eAAiB,aAAcnJ,KAAM,OAEnEQ,MAAOA,EACP6M,IAAKA,EACL/N,QAAS,kBAAMyN,GAAY5D,MAE5BA,GACCoE,GACAA,EAAMzK,KAAI,SAAA4K,GAAI,OACZ,eAAC,WAAD,UAA8BD,EAAOC,IAAtBF,EAAOE,OAEzBvE,GAAW9J,EACX8J,IAAY9J,KAAckO,GAA0B,IAAjBA,EAAM1K,SACxC,eAACzC,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UACE,eAACiB,GAAA,EAAD,CAAMxB,MAAM,YAAYyB,KAAK,eAHnC,SAOE,eAAC,KAAD,CAAOgI,MAAO,CAAEmE,WAAY,IAAM5N,MAAM,YAAxC,0B,yCC/CN6N,GAAapP,IAAOqP,UAAV,+FACL,qBAAGnP,MAAkBI,OAAO2C,QAC1B,qBAAG/C,MAAkBC,QAAQ4I,SAC3B,qBAAG7I,MAAkB+I,KAAKC,YAInCoG,GAAyB,SAAC,GAOzB,IANLC,EAMI,EANJA,MACAnL,EAKI,EALJA,MACAoL,EAII,EAJJA,aACArJ,EAGI,EAHJA,KACAsJ,EAEI,EAFJA,YACAC,EACI,EADJA,OAEMxP,EAAQyP,cACd,OACE,eAACP,GAAD,CACEhL,MAAOA,EACPwL,aAAczJ,EACd0J,eAAgB,OAChBJ,YAAaA,EACbK,gBAAiBJ,EACjBK,qBAAsB7P,EAAMI,OAAOqI,UACnCqH,YAAaT,EACbC,aAAcA,KCjBd9O,GAAQV,IAAOW,iBAAV,oBACLsP,GAAUjQ,IAAOC,KAAV,0CAIb,SAASiQ,GAAT,GAUc,IATZvF,EASW,EATXA,QACAoD,EAQW,EARXA,QACAgB,EAOW,EAPXA,MACAT,EAMW,EANXA,SACA6B,EAKW,EALXA,aACAnB,EAIW,EAJXA,OACAoB,EAGW,EAHXA,OACAC,EAEW,EAFXA,OACAC,EACW,EADXA,WAEA,EAAqChN,mBAAS,IAA9C,YAAOiN,EAAP,KAAoBC,EAApB,KACMC,EAAUvM,mBAAQ,WACtB,OAAKkM,GAAWG,EAGTH,EAAOG,EAAaxB,GAFlBA,IAGR,CAACA,EAAOwB,EAAaH,IAClB9C,EAAO1J,uBAAY,WACvB4M,EAAc,IACdzC,MACC,CAACyC,EAAezC,IAEb2C,EAAS9M,uBACb,SAACsL,GACCZ,EAASY,GACT5B,MAEF,CAACgB,EAAUhB,IAEPqD,EAAa/M,uBAAY,2BAAAgN,EAAAC,OAAA,mDACxBR,EADwB,oEAAAO,EAAA,MAIVP,EAAOE,IAJG,OAIvBrB,EAJuB,OAK7BZ,EAASY,GACT5B,IAN6B,8DAO5B,CAAC+C,EAAQE,EAAajD,IACzB,OACE,gBAAC,GAAD,CAAO3C,QAASA,EAASoD,QAAST,EAAlC,UACG8C,GACC,eAACxO,GAAA,EAAD,UACE,eAAC,GAAD,CACE2N,MAAM,SACNnL,MAAOmM,EACPf,aAAcgB,MAIpB,gBAACP,GAAD,WACGI,GAA6B,IAAnBI,EAAQpM,QAAgBkM,GACjC,eAAC3O,GAAA,EAAD,UACE,eAAC,GAAD,CAAQI,MAAK,UAAYuO,EAAezP,QAAS6P,MAGpDF,EAAQpM,OAAS,GAChB,eAACyM,GAAA,EAAD,CACEtK,KAAMiK,EACNM,aAAc/B,EACdhE,MAAO,CAAEzK,KAAM,GACfyQ,WAAY,gBAAG9B,EAAH,EAAGA,KAAH,OACV,eAAC,GAAD,CAAOpO,QAAS,kBAAM4P,EAAOxB,IAA7B,SAAqCiB,EAAajB,QAIvDoB,GACC,eAAC1O,GAAA,EAAD,UACE,eAAC,GAAD,CAAQI,MAAM,QAAQlB,QAAS,kBAAM4P,OAAOvN,c,+CC1ElDpD,GAAUC,IAAOC,KAAV,oBAEP2O,GAA0B,SAAC,GAAqC,IAAnC5M,EAAkC,EAAlCA,MAAOiP,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASnP,EAAY,EAAZA,MACjDoP,EAAaC,eACb3N,EAASC,cAEf,OACE,eAAC,GAAD,CAASsH,MAAO,CAAEqG,WAAY5N,EAAO5B,KAArC,SACE,eAACD,GAAA,EAAD,CACEE,OACImP,GACA,eAAC,KAAD,CAAMnQ,QAAS,kBAAMqQ,EAAWG,UAAhC,SACE,eAACC,GAAA,EAAD,CAAUvO,KAAK,oBAAoBxB,KAAM,OAI/CO,OACGmP,GAAWnP,IACV,uCACGmP,GACCA,EAAQ5M,KAAI,SAAAkN,GAAM,OAChB,eAAC,GAAD,CAEExP,MAAOwP,EAAOxP,MACdlB,QAAS0Q,EAAO1Q,SAFX0Q,EAAOxP,UAKjBD,KAnBT,SAwBE,eAAC,KAAD,UAAQC,S,uCCvCVyP,GAAgBzR,IAAO0R,WAAV,wDAGP,qBAAGrG,UAITsG,GAAgB3R,IAAOC,KAAV,8CAIb6J,GAAY9J,IAAO4R,yBAAV,oBAETC,GAAa7R,IAAOC,KAAV,uCAGL,qBAAGmL,SAGRrL,GAAUC,IAAOC,KAAV,kEAUP6R,GAAa9R,IAAOC,KAAV,+GAOV8R,GAAM/R,IAAOC,KAAV,kHAKO,gBAAGoO,EAAH,EAAGA,SAAUnO,EAAb,EAAaA,MAAb,OAA0BmO,EAAWnO,EAAMI,OAAO8H,QAAU,UAKtE4J,GAA8B,SAAC,GAAwB,IAAtBlO,EAAqB,EAArBA,QAASmO,EAAY,EAAZA,MACxCC,EAAOhO,mBACX,kBAAM,IAAIiO,MAAMF,GAAOG,UAAKjP,GAAWmB,KAAI,SAACoD,EAAG2K,GAAJ,OAAUA,OACrD,CAACJ,IAGH,OACE,eAACH,GAAD,UACGI,EAAK5N,KAAI,SAAA+N,GAAC,OACT,eAACN,GAAD,CAAa1D,SAAUgE,IAAMvO,GAAnBuO,SAUZC,GAAkC,SAAC,GAAe,IAAbpI,EAAY,EAAZA,MACzC,EAA0B5G,mBAAS,GAAnC,YAAO8H,EAAP,KAAcmH,EAAd,KACA,EAA4BjP,mBAAS,GAArC,YAAOkP,EAAP,KAAeC,EAAf,KACMC,EC1EoB,WAC1B,IAAQxL,EAAU3E,qBAAW0E,KAArBC,MAsBR,OArBkBtD,uBAChB,SAAO+O,GAAP,kBAAA/B,EAAAC,OAAA,gEAEU+B,EAAWC,KACfF,EACAE,KAA4B,gBAC5B,CAAElL,QAAS,CAAEmL,cAAc,WAAY5L,KAL7C,YAAA0J,EAAA,MAOyBgC,EAASG,iBAPlC,UAOUC,EAPV,6BASY,IAAIC,MAAM,UATtB,OAWIC,KAAgCF,EAAOzL,KACvC4L,KAAMC,MAAM,eAZhB,kDAcID,KAAMC,MAAN,WAAuB,KAAIvG,YAd/B,mEAiBA,CAAC3F,IDsDemM,GAClB,EAA0B9Q,qBAAW0E,KAA7BE,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,MACVoM,EAAepP,mBACnB,kBAAMqP,KAAKC,MAAMhB,EAASpH,IAAU,IACpC,CAACoH,EAAQpH,IAEX,EAA8C9H,oBAAS,GAAvD,YAAOmQ,EAAP,KAAwBC,EAAxB,KACMC,EAAiBzP,mBACrB,kBACEgG,EAAM5F,KAAI,SAAA4K,GAAI,MAAK,CACjB3H,IAAQJ,EAAL,qBAAyB+H,OAAzB,EAAyBA,EAAMrL,IAClC8D,QAAS,CACPmL,cAAc,UAAW5L,SAG/B,CAACC,EAAQD,EAAOgD,IAEZ0J,EAAe1P,mBACnB,kBAAMgG,EAAMoJ,KACZ,CAACpJ,EAAOoJ,IAEJO,EAAgB3P,mBACpB,kBAAkB,MAAZ0P,OAAA,EAAAA,EAAczJ,SAAU,IAC9B,CAACyJ,IAGH,GAAqB,IAAjB1J,EAAM7F,OACR,OAAO,+BAET,IAAMyP,EAAW,kBACf,eAAC,KAAD,CACEC,OAAQJ,EACRK,WAAYV,EACZ3I,QAAS8I,EACTQ,eAAgB,kBAAMP,GAAmB,IACzCQ,gBAAiB,kBACf,gBAAC,IAAD,CAAehU,MAAOiU,GAAtB,UACE,eAACvS,GAAA,EAAD,CACEG,MACE,eAAC,KAAD,CAAMjB,QAAS,kBAAM4R,EAAUiB,EAAeL,GAAc/L,MAA5D,SACE,eAACxE,GAAA,EAAD,CAAMC,KAAK,iBAIjB,eAACpB,GAAA,EAAD,WAKR,OAAqB,IAAjBsI,EAAM7F,OAEN,gBAACzC,GAAA,EAAD,WACE,eAACkS,EAAD,IACA,eAAC,GAAD,CAAWhT,QAAS,kBAAM4S,GAAmB,IAA7C,SACE,eAAC,GAAD,UACE,eAAC,KAAD,CAAOxJ,MAAOA,EAAM,YAQ5B,gBAACtI,GAAA,EAAD,WACE,eAACkS,EAAD,IACA,eAAC,GAAD,UACE,eAACrC,GAAD,CACE2C,YAAU,EACVC,oBAAqB,GACrBC,eAAgBlJ,EAChBmJ,gCAAgC,EAChCC,iBAAkB,EAClBC,gBAAgB,SAChBC,yBAAuB,EACvBrJ,OAAQD,EAAQyI,EAChBc,SAAU,SAAAC,GACR,IAAMpC,EAASoC,EAAIC,YAAYC,cAAcC,EAC7CtC,EAAUD,IAEZwC,SAAU,SAAAJ,GACR,IAAMK,EAAeL,EAAIC,YAAYK,OAAO9J,MACxC6J,IAAiB7J,GACnBmH,EAAS0C,IAhBf,SAoBE,eAAC,GAAD,CAAWnU,QAAS,kBAAM4S,GAAmB,IAA7C,SACE,eAAC/B,GAAD,UACGzH,EAAM5F,KAAI,SAAA4K,GAAI,OACb,eAAC2C,GAAD,CAA2BzG,MAAOA,EAAlC,SACE,eAAC,KAAD,CAAOlB,MAAOgF,KADCA,EAAMrL,eAQjC,eAAC,GAAD,CAAOC,QAASwP,EAAcrB,MAAO/H,EAAM7F,a,00BE7K1C,I,+DAAM8Q,GAAiB,WAC5B,MAA0B5S,qBAAW0E,KAA7BE,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,MA0BhB,OAzBoBtD,uBAClB,SAAOsG,GAAP,4BAAA0G,EAAAC,OAAA,gDACQuE,EAAgB,GADxB,KAEmBlL,GAFnB,+CAEWmL,EAFX,SAGU7O,EAAO,IAAI8O,UACZC,OAAO,QAASF,GAJzB,YAAAzE,EAAA,MAK2B4E,MAASrO,EAAJ,aAAwB,CAClDsO,OAAQ,OACRjK,KAAMhF,EACNmB,QAAS,CACP,eAAgB,sBAChBmL,cAAc,UAAW5L,MAVjC,WAKUwO,EALV,QAakBC,GAblB,6BAcMzP,QAdN,aAAA0K,EAAA,MAc0B8E,EAASzS,QAdnC,+BAcc+C,MAdd,gBAeY,IAAIiN,MAAM,0BAftB,4BAAArC,EAAA,MAiBuB8E,EAASE,QAjBhC,QAiBUA,EAjBV,OAkBIR,EAAIS,KAAKD,EAAKR,IAAI,IAlBtB,wDAoBSA,GApBT,+DAsBA,CAAClO,EAAOC,KCIC2O,GAAgB,WAC3B,MAA0BvT,qBAAW0E,KAA7BE,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,MAChB,EvB8tBK,SAA+B3B,GAC9B,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAoEN,GAAoBK,GuBhuB7DuQ,GAAxC,YAAOC,EAAP,KAA6BhQ,EAA7B,KAA6BA,MAC7BD,GAAqBC,GACrB,IAAMiQ,EAAcd,KAiBpB,OAhBmBvR,uBACjB,SAAO4K,EAAchD,EAActB,GAAnC,gBAAA0G,EAAAC,OAAA,mEAAAD,EAAA,MACoBqF,EAAY/L,IADhC,cACQkL,EADR,mBAAAxE,EAAA,MAEQoF,EAAmB,CACvBzP,UAAW,CACT2P,OAAQ,CACN1H,OACAhD,OACAtB,MAAOkL,OAPf,8DAYA,CAACY,EAAoB9O,EAAOC,KAMnBgP,GAAgB,WAC3B,MAA8B7S,oBAAS,GAAvC,YAAO2J,EAAP,KAAgBmJ,EAAhB,KACQC,EAAYC,KAAZD,QACR,EvBouBK,SAA+B9Q,GAC9B,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAoEL,GAAoBI,GuBtuB7D+Q,GAAxC,YAAOC,EAAP,KAA6BxQ,EAA7B,KAA6BA,MAiB7B,OAhBAD,GAAqBC,GAgBd,CAAEyQ,WAfU7S,uBACjB,SAAOC,GAAP,UAAA+M,EAAAC,OAAA,uDACEuF,GAAW,GADb,qBAAAxF,EAAA,MAGU4F,EAAmB,CACvBjQ,UAAW,CAAEmQ,aAAc7S,MAJjC,0BAAA+M,EAAA,MAMUyF,KANV,uBAQID,GAAW,GARf,gFAWA,CAACI,IAGkBvJ,YAGVqJ,GAAU,WAErB,OADgB/T,qBAAWoE,KC5DvB5G,GAAUC,IAAOC,KAAV,6BAGT,gBAAG0W,EAAH,EAAGA,UAAWzW,EAAd,EAAcA,MAAd,OAA0ByW,EAAS,oDAEnBzW,EAAMI,OAAOkI,MAFM,mCAIftI,EAAMI,OAAOkI,MAJE,sDAUjCoO,GAAkC,SAAC,GAAyB,IAAD,MAAtBC,EAAsB,EAAtBA,KAAMF,EAAgB,EAAhBA,UACzCxF,EAAaC,eACnB,EAAgC+E,KAAxBM,EAAR,EAAQA,WAAYxJ,EAApB,EAAoBA,QACpB,EAAsC3J,oBAAS,GAA/C,YAAOwT,EAAP,KAAoBC,EAApB,KACA,OACE,gBAAC,GAAD,CAASJ,UAAWA,EAApB,UACG1J,GAAW,eAAC,GAAD,IACZ,eAACrL,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UACE,eAAC,GAAD,CAAQkI,QAAO,MAAE6M,GAAF,SAAEA,EAAMG,cAAR,EAAE,EAAeC,WAGpClV,MAEI,uCACE,gBAAC,KAAD,CAAMjB,QAAS,kBAAMqQ,EAAW+F,SAAS,WAAY,CAAErT,GAAIgT,EAAKhT,MAAhE,UACE,eAACd,GAAA,EAAD,CAAMC,KAAK,iBAAiBzB,MAAM,OAAOC,KAAM,KAC/C,eAAC,KAAD,UAAQqV,EAAKM,kBAEf,eAAC,KAAD,CAAMrW,QAAS,kBAAMiW,GAAe,IAApC,SACE,eAAChU,GAAA,EAAD,CAAMC,KAAK,kBAAkBzB,MAAM,OAAOC,KAAM,UAKxDU,YAAa2U,EAAKrL,KAClBvJ,UAAU,SAAA4U,EAAKG,cAAL,IAAchU,QAAd,SAAsB6T,EAAKG,cAA3B,EAAsB,EAAcI,YAE/CP,EAAK3M,OAAS,eAAC,GAAD,CAASA,MAAO2M,EAAM3M,QACrC,eAAC,GAAD,CAAO6D,QAAS,kBAAMgJ,GAAe,IAAQpM,QAASmM,EAAtD,SACE,eAAC,GAAD,CAAQhW,QAAS,kBAAM2V,EAAWI,EAAKhT,KAAM7B,MAAM,SAASmE,KAAK,sB,mBCrDnE+F,GAAQlM,IAAOkM,MAAV,qGAOLmL,GAASrX,IAAOC,KAAV,+CAINqX,GAAOtX,IAAOC,KAAV,yFAMJF,GAAUC,IAAOC,KAAV,kEAKPwK,GAASzK,IAAOW,iBAAV,wMAYN4W,GAAevX,IAAOW,iBAAV,wGAQZ6W,GAA6B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACrCC,EAAY/T,uBAAY,uCAAAgN,EAAAC,OAAA,mEAAAD,EAAA,MAETgH,KAAoC,CACrDC,WAAYD,KAA6BE,IACzCC,QAAS,EACTC,QAAQ,KALkB,YAExBhF,EAFwB,QAQjBiF,WAAcjF,EAAOgF,OARJ,mDAWXhF,EAAOzL,IAAI2Q,MAAM,KAXN,YAWvBC,EAXuB,KAYxBC,EAAQ,WAAWC,KAAKF,GACxBhS,EAAOiS,EAAK,SAAYA,EAAM,GAAO,QAEnC/C,EAAO,CACXlP,OACAnD,KAAMmV,EACN5Q,IAAKyL,EAAOzL,KAEdmQ,EAAS,GAAD,YAAKD,GAAL,CAAYpC,KApBQ,+DAqB3B,CAACoC,EAAOC,IAELnK,EAAS3J,uBACb,SAACyR,GACCqC,EAASD,EAAM1T,QAAO,SAAAuU,GAAC,OAAIA,IAAMjD,QAEnC,CAACoC,EAAOC,IAGV,OACE,eAAC9V,GAAA,EAAD,UACE,gBAAC,GAAD,WACG6V,EAAMnT,KAAI,SAAAiU,GAAC,OACV,gBAACjB,GAAD,WACE,eAACD,GAAD,IACA,eAACE,GAAD,CAAczW,QAAS,kBAAMyM,EAAOgL,IAApC,SACE,eAAC,GAAD,CAAO5L,OAAQ,CAAEpF,IAAKgR,EAAEhR,WAHjBgR,EAAEhR,QAOf,gBAAC+P,GAAD,WACE,eAACD,GAAD,IACA,eAAC,GAAD,CAAQvW,QAAS6W,EAAjB,SACE,eAAC5U,GAAA,EAAD,CAAMC,KAAK,cAAcxB,KAAM,gBCrFrCgX,GAAsC,SAAC,GAKtC,IAJLjJ,EAII,EAJJA,MACA9I,EAGI,EAHJA,MACA4H,EAEI,EAFJA,SACAC,EACI,EADJA,SAEA,EAA8BhL,oBAAS,GAAvC,YAAOqH,EAAP,KAAgB4D,EAAhB,KACA,OACE,uCACE,eAAC3M,GAAA,EAAD,CAAKK,SAAUsN,EAAOzO,QAAS,kBAAMyN,GAAW,IAAhD,SACE,eAAC,KAAD,WAAgB,MAARF,OAAA,EAAAA,EAAUrL,OAAQ,aAE5B,eAACkN,GAAD,CACEvF,QAASA,EACT0D,SAAUA,EACVN,QAAS,kBAAMQ,GAAW,IAC1BQ,MAAOtI,GAAS,GAChBuI,OAAQ,SAAAE,GAAI,OAAIA,EAAKrL,IACrByK,SAAUA,EACV6B,aAAc,SAAAjB,GAAI,OAAI,eAACtN,GAAA,EAAD,CAAKI,MAAOkN,EAAKlM,cCnBzCyV,GAAsC,SAAC,GAKtC,IAJLlJ,EAII,EAJJA,MACAmJ,EAGI,EAHJA,MACArK,EAEI,EAFJA,SACAC,EACI,EADJA,SAEA,EAA8BhL,oBAAS,GAAvC,YAAOqH,EAAP,KAAgB4D,EAAhB,KACA,OACE,uCACE,eAAC3M,GAAA,EAAD,CAAKK,SAAUsN,EAAOzO,QAAS,kBAAMyN,GAAW,IAAhD,SACE,eAAC,KAAD,WAAgB,MAARF,OAAA,EAAAA,EAAUrL,QAAV,MAAkBqL,OAAlB,EAAkBA,EAAU+I,WAAY,aAElD,eAAClH,GAAD,CACEvF,QAASA,EACT0D,SAAUA,EACVN,QAAS,kBAAMQ,GAAW,IAC1BQ,MAAO2J,GAAS,GAChB1J,OAAQ,SAAAE,GAAI,OAAIA,EAAKrL,IACrByK,SAAUA,EACV6B,aAAc,SAAAjB,GAAI,OAAI,eAACtN,GAAA,EAAD,CAAKI,MAAOkN,EAAKlM,MAAQkM,EAAKkI,kBChBtDuB,GAAgD,SAAC,GAKhD,IAJLpJ,EAII,EAJJA,MACAR,EAGI,EAHJA,MACAV,EAEI,EAFJA,SACAC,EACI,EADJA,SAEA,EAA8BhL,oBAAS,GAAvC,YAAOqH,EAAP,KAAgB4D,EAAhB,KACA,OACE,uCACE,eAAC3M,GAAA,EAAD,CAAKK,SAAUsN,EAAOzO,QAAS,kBAAMyN,GAAW,IAAhD,SACE,eAAC,KAAD,WAAgB,MAARF,OAAA,EAAAA,EAAUuK,MAAO,aAE3B,eAAC1I,GAAD,CACEvF,QAASA,EACT0D,SAAUA,EACVN,QAAS,kBAAMQ,GAAW,IAC1BQ,MAAOA,EACPC,OAAQ,SAAAE,GAAI,OAAIA,EAAK0J,KACrBtK,SAAUA,EACV6B,aAAc,SAAAjB,GAAI,OAAI,eAACtN,GAAA,EAAD,CAAKI,MAAOkN,EAAK0J,aChCzCC,GAAgC,WACpC,IAAQC,EAAcvW,qBAAW0E,KAAzB6R,UACR,E7B06BK,SAA6CvT,GAC5C,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAgGG,GAAkCJ,G6B56BhHuT,GAAxBC,EAAP,aAaA,OAXA/S,qBAAU,WACH6S,GAGLE,EAAqB,CACnBzS,UAAW,CACTW,MAAO4R,OAGV,CAACA,IAEG,gCCbIG,GAAe,WAC1B,IAAMhD,EAAcd,KACpB,E9Bs2BK,SAAqC5P,GACpC,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAgFC,GAA0BF,G8Bx2B3F0T,GAArBC,EAAP,aAWA,OATkBvV,uBAAY,SAAOsG,GAAP,oBAAA0G,EAAAC,OAAA,oDACf3G,EADe,mCAAA0G,EAAA,MACDqF,EAAY,CAAC/L,KADZ,8CACsB,GADtB,iCACrBrG,EADqB,kBAAA+M,EAAA,MAEtBuI,EAAkB,CACtB5S,UAAW,CACTyD,QAASnG,MAJe,+DAO3B,KAKQuV,GAAa,WAExB,OADgB7W,qBAAW8D,KCbvBtG,GAAUC,IAAO0R,WAAV,kCAGP7D,GAAQ7N,IAAOC,KAAV,4DAEW,qBAAGC,MAAkBI,OAAOD,cAG5CgZ,GAAmD,SAAC,GAAoB,IAAlBlI,EAAiB,EAAjBA,WAC1D,EAA8B7N,oBAAS,GAAvC,YAAO2J,EAAP,KAAgBmJ,EAAhB,KACiBkD,EAAiBhD,KAA1BD,QACR,EAAoD+C,KAA5C3S,EAAR,EAAQA,MAAO4P,EAAf,EAAeA,QAAkBkD,EAAjC,EAAwBtM,QACxB,EAAwC3J,qBAAxC,YAAOkW,EAAP,KAAqBC,EAArB,KACA,EAA0BnW,mBAAuB,IAAjD,YAAO4G,EAAP,KAAcwP,EAAd,KACA,EAAwBpW,mBAAS,IAAjC,YAAOkI,EAAP,KAAamO,EAAb,KACMC,EAAa9D,KACb+D,EAAa3V,mBACjB,kBAAW,MAALuC,OAAA,EAAAA,EAAO1C,QAAO,SAAAuU,GAAC,MAAqB,UAAjBA,EAAEwB,cAAwBxV,KAAI,SAAAgU,GAAC,OAAIA,EAAE9J,UAAS,KACvE,CAAC/H,IAGGsT,EAASnW,uBAAY,qBAAAgN,EAAAC,OAAA,uDACzBuF,GAAW,GADc,YAAAxF,EAAA,MAEnBgJ,EAAWJ,EAAa3V,GAAI2H,EAAMtB,IAFf,0BAAA0G,EAAA,MAGnB0I,KAHmB,OAIzBlD,GAAW,GACXqD,OAAgBtW,GAChBuW,EAAS,IACTC,EAAQ,IACRxI,EAAW+F,SAAS,OAAQ,IARH,+DASxB,CAACsC,EAAchO,EAAMtB,IAOxB,OANA8P,aACEpW,uBAAY,WACVyS,MACC,CAACA,KAGD5P,EAKH,eAAC,GAAD,CAAMwG,QAASsM,GAAkBtM,EAAjC,SACE,gBAAC,GAAD,WACE,eAAC,GAAD,CAAQjL,MAAM,gBACd,gBAAC,GAAD,WACE,eAAC,GAAD,CAAWyV,MAAOvN,EAAOwN,SAAUgC,IACnC,eAAC,GAAD,CACEnK,MAAM,OACN9I,MAAOoT,EACPxL,SAAUmL,EACVlL,SAAUmL,IAEZ,eAAC7X,GAAA,EAAD,CAAKK,SAAS,UAAd,SACE,eAAC,GAAD,CACEsN,MAAM,qBACNnL,MAAOoH,EACPgE,aAAcmK,SAIpB,eAAC/X,GAAA,EAAD,YACK4X,GAAgBtP,EAAM7F,OAAS,GAChC,eAAC,GAAD,CAAQvD,QAASiZ,EAAQ/X,MAAM,kBAzBhC,gC,4BCrCLiY,GAAYja,IAAOC,KAAV,sHAIG,qBAAGC,MAAkBI,OAAOkI,SAExCzI,GAAUC,IAAOC,KAAV,4DACS,qBAAGC,MAAkBI,OAAOD,cAI5C6Z,GAAgD,WACpD,MAAsF5D,KAA9EvP,EAAR,EAAQA,MAAOkG,EAAf,EAAeA,QAASoJ,EAAxB,EAAwBA,QAAgB8D,EAAxC,EAAiC1T,MAAgC2T,EAAjE,EAAuDvT,SAC/CJ,EAAU2S,KAAV3S,MAEF4T,EAAYnW,mBAAQ,kBAAMuC,EAAMnC,KAAI,SAAAgU,GAAC,OAAIA,EAAE9J,UAAO,CAAC/H,IACnD6T,EAAUpW,mBACd,kBAAMqP,KAAKgH,KAAKC,KAAWC,IAAI,UAAUrP,MAAQ,OACjD,IAGI4F,EAA8CpN,uBAClD,gBAAGsL,EAAH,EAAGA,KAAH,OAAc,eAAC,GAAD,CAASyH,UAAW2D,GAAW,EAAiBzD,KAAM3H,GAAfA,EAAKrL,MAC1D,CAACyW,IAGH,OACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CAEEtY,MAAM,YACND,MACE,qCACGsY,EAAUhW,OAAS,GAClB,eAAC,GAAD,CACEoC,MAAO4T,EACPhM,SAAU8L,EACV7L,SAAU8L,OARd,QAcN,eAAC,KAAD,CACE5T,KAAMO,EACNgK,aAAc,SAAC7B,GAAD,OAAeA,EAAKrL,IAClCmN,WAAYA,EACZ0J,WAAYJ,EACZK,uBAAwBV,GACxBW,eACE,eAACC,GAAA,EAAD,CAAgBC,WAAY7N,EAAS8N,UAAW1E,YCnDtDC,GAAU,SAACzS,GACf,MjC+dK,SAAsB0B,GACrB,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAA+Cb,EAAcY,GiCjehCwV,CAAa,CACrDzU,UAAW,CAAE0U,OAAQpX,KADf2C,EAAR,EAAQA,KAAM6P,EAAd,EAAcA,QAASpJ,EAAvB,EAAuBA,QAASjH,EAAhC,EAAgCA,MAKhC,OAFAD,GAAqBC,GAEd,CACLwI,KAFWtK,mBAAQ,wBAAMsC,OAAN,EAAMA,EAAMgI,OAAM,CAAChI,IAGtC6P,UACApJ,UACAjH,UAIEkV,GAAc,WAClB,MjCqaK,SAA0B3V,GACzB,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAuDd,EAAkBa,GiCva5C2V,GAAlC3U,EAAR,EAAQA,KAAM6P,EAAd,EAAcA,QAASpJ,EAAvB,EAAuBA,QAASjH,EAAhC,EAAgCA,MAGhC,OAFAD,GAAqBC,GAEd,CACLS,MAFYvC,mBAAQ,kBAAU,MAAJsC,OAAA,EAAAA,EAAM4U,WAAY,KAAI,CAAC5U,IAGjD6P,UACApJ,UACAjH,UAIEqV,GAAgB,WACpB,MjC0eK,SAA+B9V,GAC9B,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAoEZ,EAAoBW,GiC5e7D8V,GAAxC,YAAOC,EAAP,KAA6BvV,EAA7B,KAA6BA,MAa7B,OAZAD,GAAqBC,GACFpC,uBACjB,SAAOZ,GAAP,UAAA4N,EAAAC,OAAA,mEAAAD,EAAA,MACQ2K,EAAmB,CACvBhV,UAAW,CACTvD,WAHN,8DAOA,CAACuY,KAMCC,GAAmB,WACvB,MjC4fK,SAAkCjW,GACjC,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAA0EX,EAAuBU,GiC9frEiW,GAAzC,YAAOC,EAAP,KAA+B1V,EAA/B,KAA+BA,MAe/B,OAdAD,GAAqBC,GACCpC,uBACpB,SAAOqX,EAAgBU,EAAgB7B,GAAvC,UAAAlJ,EAAAC,OAAA,mEAAAD,EAAA,MACQ8K,EAAsB,CAC1BnV,UAAW,CACT0U,SACAU,SACA7B,iBALN,8DASA,CAAC4B,KAMCE,GAAwB,WAC5B,MjCygBK,SAAuCrW,GACtC,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAoFV,EAA4BS,GiC3gB7EqW,GAAhD,YAAOC,EAAP,KAAqC9V,EAArC,KAAqCA,MAcrC,OAbAD,GAAqBC,GACMpC,uBACzB,SAAOqX,EAAgBU,GAAvB,UAAA/K,EAAAC,OAAA,mEAAAD,EAAA,MACQkL,EAA2B,CAC/BvV,UAAW,CACT0U,SACAU,aAJN,8DAQA,CAACG,KAMQC,GAAgB,WAC3B,MjCshBK,SAA+BxW,GAC9B,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAoET,EAAoBQ,GiCxhB7DwW,GAAxC,YAAOC,EAAP,KAA6BjW,EAA7B,KAA6BA,MAW7B,OAVAD,GAAqBC,GACFpC,uBACjB,SAAOC,GAAP,UAAA+M,EAAAC,OAAA,mEAAAD,EAAA,MACQqL,EAAmB,CACvB1V,UAAW,CAAE0U,OAAQpX,MAFzB,8DAKA,CAACoY,KChGQC,GAAW,WACtB,MlC48BK,SAAuB3W,GACtB,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAiDI,GAAeL,GkC98BnC2W,GAAlC3V,EAAR,EAAQA,KAAM6P,EAAd,EAAcA,QAASpJ,EAAvB,EAAuBA,QAASjH,EAAhC,EAAgCA,MAGhC,OAFAD,GAAqBC,GAEd,CACL0S,MAFYxU,mBAAQ,wBAAMsC,OAAN,EAAMA,EAAMkS,QAAO,CAAClS,IAGxC6P,UACApJ,UACAjH,UAISoW,GAAgB,WAC3B,MlC83BK,SAAkC7W,GACjC,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAA0EE,GAAuBH,GkCh4BtE6W,GAAxC,YAAOC,EAAP,KAA6BtW,EAA7B,KAA6BA,MAW7B,OAVAD,GAAqBC,GACFpC,uBACjB,SAAO2Y,GAAP,UAAA3L,EAAAC,OAAA,mEAAAD,EAAA,MACQ0L,EAAmB,CACvB/V,UAAW,CAAEgW,YAFjB,8DAKA,CAACD,KAMQE,GAAgB,WAC3B,MlCo9BK,SAA+BjX,GAC9B,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAAoEK,GAAoBN,GkCt9B7DiX,GAAxC,YAAOC,EAAP,KAA6B1W,EAA7B,KAA6BA,MAW7B,OAVAD,GAAqBC,GACFpC,uBACjB,SAAOC,GAAP,UAAA+M,EAAAC,OAAA,mEAAAD,EAAA,MACQ8L,EAAmB,CACvBnW,UAAW,CAAEoV,OAAQ9X,MAFzB,8DAKA,CAAC6Y,KCnBC3c,GAAUC,IAAO0R,WAAV,kCAIPiL,GAA2D,SAAC,GAE3D,IADLxL,EACI,EADJA,WAEA,EAAoCiI,KAA5B1S,EAAR,EAAQA,QAASD,EAAjB,EAAiBA,MAAO4P,EAAxB,EAAwBA,QAChBuG,EAAWra,qBAAW0E,KAAtB2V,OACFC,EAAaxB,KACnB,EAA4C/X,oBAAS,GAArD,YAAOwZ,EAAP,KAAuBC,EAAvB,KACA,EAA0CzZ,oBAAS,GAAnD,YAAO0Z,EAAP,KAAsBC,EAAtB,KACA,EAAsC3Z,mBAAS,IAA/C,YAAO4Z,EAAP,KAAoBC,EAApB,KACA,EAAgC7Z,mBAAS,IAAzC,YAAO8Z,EAAP,KAAiBC,EAAjB,KACMC,EAAYrE,KACZsE,EAAanB,KACbzE,EAAY/T,uBAAY,uCAAAgN,EAAAC,OAAA,mEAAAD,EAAA,MAETgH,KAAoC,CACrDC,WAAYD,KAA6BE,IACzCC,QAAS,EACTC,QAAQ,KALkB,YAExBhF,EAFwB,QAQjBiF,WAAcjF,EAAOgF,OARJ,0DAWXhF,EAAOzL,IAAI2Q,MAAM,KAXN,YAWvBC,EAXuB,KAYxBC,EAAQ,WAAWC,KAAKF,GACxBhS,EAAOiS,EAAK,SAAYA,EAAM,GAAO,QAEnC/C,EAAO,CACXlP,OACAnD,KAAMmV,EACN5Q,IAAKyL,EAAOzL,KAlBc,aAAAqJ,EAAA,MAoBtB0M,EAAUjI,IApBY,4BAAAzE,EAAA,MAqBtByF,KArBsB,+DAsB3B,IAEGmH,EAAc5Z,uBAAY,qBAAAgN,EAAAC,OAAA,mEAAAD,EAAA,MACxBiM,EAAWO,IADa,cAE9BC,EAAY,IACZN,GAAkB,GAHY,YAAAnM,EAAA,MAIxByF,KAJwB,8DAK7B,CAAC+G,EAAUP,IAERY,EAAmB7Z,uBAAY,qBAAAgN,EAAAC,OAAA,mEAAAD,EAAA,MAC7B2M,EAAWL,IADkB,cAEnCC,EAAe,IACfF,GAAiB,GAHkB,YAAArM,EAAA,MAI7ByF,KAJ6B,8DAKlC,CAAC6G,EAAaK,IAEjB,OACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CAAQvb,MAAM,YACd,eAACJ,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UACE,eAAC,GAAD,CACEkI,SAAgB,MAAPtD,OAAA,EAAAA,EAASuQ,cAAU9T,EAC5BrC,QAAS6W,MAIf3V,OAAc,MAAP0E,OAAA,EAAAA,EAAS1D,QAAT,MAAiB0D,OAAjB,EAAiBA,EAAS0Q,YAEnC,gBAAC,GAAD,CAAOzM,QAASmS,EAAgB/O,QAAS,kBAAMgP,GAAkB,IAAjE,UACE,eAACnb,GAAA,EAAD,UACE,eAAC,GAAD,CAAO2N,MAAM,OAAOnL,MAAOgZ,EAAU5N,aAAc6N,MAErD,eAACzb,GAAA,EAAD,UACE,eAAC,GAAD,CAAQI,MAAM,OAAOlB,QAAS0c,SAGlC,eAAC1O,GAAD,CACE9M,MAAM,WACN+M,MAAOtI,EACPuI,OAAQ,SAAAE,GAAI,OAAIA,EAAKV,KAAK3K,IAC1BgL,IACS,MAAPnI,KAASgX,MACL,WACEX,GAAkB,SAEpB5Z,EAEN8L,OAAQ,SAAAC,GAAI,OACV,eAACtN,GAAA,EAAD,CACEI,MAAOkN,EAAKV,KAAKxL,KACjBf,SAAUiN,EAAK4K,WACf/X,MACE,eAAC,KAAD,UACE,eAAC,GAAD,CAAQC,MAAM,QAAQmE,KAAK,kBAG/BrF,QAAS,WACPqQ,EAAW+F,SAAS,WAAY,CAAErT,GAAIqL,EAAKV,KAAK3K,YAKhD,MAAP6C,OAAA,EAAAA,EAASgX,QACR,gBAAC5O,GAAD,CAAO9M,MAAM,QAAb,UACE,eAACJ,GAAA,EAAD,CACEI,MAAM,SACNlB,QAAS,kBAAMmc,GAAiB,IAChCnb,KACE,eAAC,KAAD,UAAM,eAACiB,GAAA,EAAD,CAAMC,KAAK,YAAYzB,MAAM,aAGvC,eAACK,GAAA,EAAD,CACEI,MAAM,QACNlB,QAAS,kBAAMqQ,EAAW+F,SAAS,aAAc,KACjDpV,KACE,eAAC,KAAD,UAAM,eAACiB,GAAA,EAAD,CAAMC,KAAK,QAAQzB,MAAM,WAEjCQ,MACE,eAAC,KAAD,UAAM,eAACgB,GAAA,EAAD,CAAMC,KAAK,gBAAgBzB,MAAM,aAG3C,eAACK,GAAA,EAAD,CACEI,MAAM,QACNlB,QAAS,kBAAMqQ,EAAW+F,SAAS,aAAc,KACjDpV,KACE,eAAC,KAAD,UAAM,eAACiB,GAAA,EAAD,CAAMC,KAAK,SAASzB,MAAM,WAElCQ,MACE,eAAC,KAAD,UAAM,eAACgB,GAAA,EAAD,CAAMC,KAAK,gBAAgBzB,MAAM,aAG3C,gBAAC,GAAD,CAAOoJ,QAASqS,EAAejP,QAAS,kBAAMkP,GAAiB,IAA/D,UACE,eAACrb,GAAA,EAAD,UACE,eAAC,GAAD,CAAO2N,MAAM,QAAQnL,MAAO8Y,EAAa1N,aAAc2N,MAEzD,eAACvb,GAAA,EAAD,UACE,eAAC,GAAD,CAAQI,MAAM,OAAOlB,QAAS2c,YAKtC,eAAC7b,GAAA,EAAD,UACE,eAAC,GAAD,CAAQI,MAAM,SAASmE,KAAK,cAAcrF,QAAS8b,YC5IvDe,GAAc,CAClB,CAAE/E,IAAK,QAASxU,MAAO,SACvB,CAAEwU,IAAK,YAAaxU,MAAO,aAC3B,CAAEwU,IAAK,SAAUxU,MAAO,UACxB,CAAEwU,IAAK,SAAUxU,MAAO,WAGpBwZ,GAAyD,SAAC,GAAe,IACrE/Z,EADoE,EAAZga,MAC3C3H,OAAbrS,GACR,EAA0ByS,GAAQzS,GAA1B2K,EAAR,EAAQA,KAAM6H,EAAd,EAAcA,QACNqC,EAAUwD,KAAVxD,MACFoF,EAAqBlC,KACrBmC,EAAgBvC,KACtB,EAA4ClY,oBAAS,GAArD,YAAO0a,EAAP,KAAuBC,EAAvB,KACA,EACE3a,qBADF,YAAO4a,EAAP,KAAwBC,EAAxB,KAEA,EACE7a,qBADF,YAAO8a,EAAP,KAA0BC,EAA1B,KAGMC,EAAU1a,uBAAY,qBAAAgN,EAAAC,OAAA,mEAAAD,EAAA,MACpBmN,EAAcla,EAAIqa,EAAiBra,GAAKua,EAAmBha,QADvC,cAE1B+Z,OAAmBhb,GACnBkb,OAAqBlb,GACrB8a,GAAkB,GAJQ,YAAArN,EAAA,MAKpByF,KALoB,8DAMzB,CAACxS,EAAIqa,EAAiBE,IAEnBG,EAAa3a,uBACjB,SAAO+X,GAAP,UAAA/K,EAAAC,OAAA,mEAAAD,EAAA,MACQkN,EAAmBja,EAAI8X,IAD/B,0BAAA/K,EAAA,MAEQyF,KAFR,8DAIA,CAACxS,EAAIia,EAAoBzH,IAG3B,OAAK7H,EAKH,gBAAC,GAAD,WACE,eAAC,GAAD,CAAQyC,MAAI,EAACjP,MAAM,SACnB,eAACJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAO2N,MAAM,OAAOnL,MAAOoK,EAAKxL,SAElC,eAAC8L,GAAD,CACE9M,MAAM,QACN6M,IAAK,WACHoP,GAAkB,IAEpBlP,MAAOP,EAAKkK,MACZ1J,OAAQ,SAAAwP,GAAQ,OAAIA,EAASC,KAAK5a,IAClCoL,OAAQ,SAAAuP,GAAQ,OACd,eAAC5c,GAAA,EAAD,CACEK,SAAUuc,EAAS1E,WACnB9X,MAAOwc,EAASC,KAAKzb,MAAQwb,EAASC,KAAKrH,SAC3CrV,MACE,eAAC,KAAD,UACE,eAAC,GAAD,CACEC,MAAM,SACNlB,QAAS,kBAAMyd,EAAWC,EAASC,KAAK5a,cAOpD,gBAAC,GAAD,CAAO8G,QAASqT,EAAgBjQ,QAAS,kBAAMkQ,GAAkB,IAAjE,UACE,eAAC,GAAD,CACE1O,MAAM,OACNlB,SAAU6P,EACV5P,SAAU,SAAAmQ,GAAI,OAAIN,EAAmBM,IACrC/F,MAAOA,IAET,eAAC,GAAD,CACEnJ,MAAM,cACNlB,SAAU+P,EACV9P,SAAU,SAAAwL,GAAU,OAAIuE,EAAqBvE,IAC7C/K,MAAO4O,OAENS,KAAuBF,GACxB,eAACtc,GAAA,EAAD,UACE,eAAC,GAAD,CAAQI,MAAM,OAAOlB,QAASwd,YA9C/B,gC,qBCjDLpS,GAAQlM,IAAOkM,MAAV,yDAKLnM,GAAUC,IAAOC,KAAV,0GAIG,qBAAGC,MAAkBI,OAAOkI,SAGtCyH,GAAUjQ,IAAOC,KAAV,qGAGG,qBAAGC,MAAkBI,OAAOD,cAGtCqe,GAAO1e,IAAO0e,KAAV,oBAEJC,GAAmD,SAAC,GAAmB,EAAjBxN,WAAkB,IACpEyN,EAAUrc,qBAAW0E,KAArB2X,MACR,EAA8Btb,oBAAS,GAAvC,YAAO2J,EAAP,KAAgBmJ,EAAhB,KACA,EAA0B9S,qBAA1B,YAAO0C,EAAP,KAAc6Y,EAAd,KACA,EAA4Bvb,mBAAS,IAArC,YAAO6D,EAAP,KAAe2X,EAAf,KACA,EAAgCxb,mBAAS,IAAzC,YAAO8T,EAAP,KAAiB2H,EAAjB,KACA,EAAgCzb,mBAAS,IAAzC,YAAO0b,EAAP,KAAiBC,EAAjB,KAEMC,EAAUtb,uBAAY,WAC1BwS,GAAW,GACC,GAAAxF,EAAAC,OAAA,mEAAAD,EAAA,MACJgO,EAAMzX,EAAQiQ,EAAU4H,IADpB,OAEV5I,GAAW,GAFD,4DAIN+I,OAAM,SAAAC,GACVhJ,GAAW,GACXyI,EAASO,QAEV,CAACjY,EAAQiQ,EAAU4H,IAEtB,OAAI/R,EACK,eAACyR,GAAD,sBAIP,eAAC,GAAD,UACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CAAO/R,OAAQ0S,OACdrZ,GAAS,eAAC0Y,GAAD,UAAO1Y,EAAM6G,aACvB,eAACjL,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UACE,eAACiB,GAAA,EAAD,CAAMC,KAAK,aAHjB,SAOE,eAAC,GAAD,CACEyM,aAAa,EACbF,MAAM,SACNnL,MAAO+C,EACPqI,aAAcsP,MAGlB,eAACld,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UACE,eAACiB,GAAA,EAAD,CAAMC,KAAK,WAHjB,SAOE,eAAC,GAAD,CACEyM,aAAa,EACbF,MAAM,WACNnL,MAAOgT,EACP5H,aAAcuP,MAGlB,eAACnd,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UACE,eAACiB,GAAA,EAAD,CAAMC,KAAK,UAHjB,SAOE,eAAC,GAAD,CACE0M,QAAM,EACNH,MAAM,SACNnL,MAAO4a,EACPxP,aAAcyP,MAGlB,eAACrd,GAAA,EAAD,UACE,eAAC,GAAD,CAAQd,QAASoe,EAASld,MAAM,oB,SC5FtCkK,GAAQlM,IAAOkM,MAAV,yDAKLnM,GAAUC,IAAOC,KAAV,0GAOPgQ,GAAUjQ,IAAOC,KAAV,qGAGG,qBAAGC,MAAkBI,OAAOD,cAItCif,GAEF,SAAC,GAA2B,IAAzBzB,EAAwB,EAAxBA,MACG0B,GADqB,EAAjBpO,WACW0M,EAAM3H,OAArBqJ,YACAC,EAAqBjd,qBAAW0E,KAAhCuY,iBACR,EAAgClc,mBAAS,IAAzC,YAAO8T,EAAP,KAAiB2H,EAAjB,KACA,EAAgCzb,mBAAS,IAAzC,YAAO0b,EAAP,KAAiBC,EAAjB,KACA,EAA8B3b,oBAAS,GAAvC,YAAO2J,EAAP,KAAgBmJ,EAAhB,KACA,EAA0B9S,qBAA1B,YAAcub,GAAd,WAEMY,EAAW7b,uBAAY,WAC3BwS,GAAW,GACC,GAAAxF,EAAAC,OAAA,mEAAAD,EAAA,MACJ4O,EAAiBD,EAAYnI,EAAU4H,IADnC,OAEV5I,GAAW,GAFD,4DAIN+I,OAAM,SAAAC,GACVhJ,GAAW,GACXyI,EAASO,QAEV,CAACG,EAAYnI,EAAU4H,IAE1B,OAAI/R,EACK,eAAC,KAAD,sBAIP,eAAC,GAAD,UACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CAAON,OAAQ0S,OACf,eAACzd,GAAA,EAAD,CAAKM,YAAY,8EACjB,eAACN,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UACE,eAACiB,GAAA,EAAD,CAAMC,KAAK,WAHjB,SAOE,eAAC,GAAD,CACEyM,aAAa,EACbF,MAAM,WACNnL,MAAOgT,EACP5H,aAAcuP,MAGlB,eAACnd,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UACE,eAACiB,GAAA,EAAD,CAAMC,KAAK,UAHjB,SAOE,eAAC,GAAD,CACE0M,QAAM,EACNH,MAAM,WACNnL,MAAO4a,EACPxP,aAAcyP,MAGlB,eAACrd,GAAA,EAAD,UACE,eAAC,GAAD,CAAQd,QAAS2e,EAAUzd,MAAM,uBC3EvCiO,GAAUjQ,IAAOC,KAAV,kCAIPF,GAAUC,IAAOC,KAAV,kCAIPyf,GAAyD,SAAC,GAAe,IACrE7b,EADoE,EAAZga,MAC3C3H,OAAbrS,GACFJ,EAASC,cACf,EAA8BJ,mBAAS,IAAvC,YAAO2G,EAAP,KAAgB0V,EAAhB,KACA,EvCkVK,SAAkCpa,GACjC,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAA0EhB,EAAuBe,GuCpV9Eoa,GAAzBC,EAAP,aACA,EvC8oBK,SAAsBta,GACrB,IAAMC,EAAO,OAAOhB,GAAmBe,GACvC,OAAOE,IAA+CR,GAAcO,GuChpBhDsa,CAAa,CACrCvZ,UAAW,CACTwZ,OAAQlc,KAFJ2C,EAAR,EAAQA,KAAM6P,EAAd,EAAcA,QAMR2J,EAAgBpc,uBACpB,qBAAAgN,EAAAC,OAAA,mEAAAD,EAAA,MACQiP,EAAsB,CAC1BtZ,UAAW,CACT2P,OAAQ,CACNjM,UACA4M,KAAMhT,OALd,cASE8b,EAAW,IATb,YAAA/O,EAAA,MAUQyF,KAVR,8DAYA,CAACpM,EAASpG,EAAIgc,EAAuBxJ,IAEvC,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,CAAQrU,MAAM,aACd,gBAAC,GAAD,CAASgJ,MAAO,CAAEkD,cAAezK,EAAO0K,OAAS,IAAjD,UACE,eAAC,GAAD,UACE,eAAC2C,GAAA,EAAD,CACE9F,MAAO,CAAEzK,KAAM,GACf0f,UAAQ,EACRlP,aAAc,SAAA7B,GAAI,OAAIA,EAAKrL,IAC3BmN,WAAY,gBAAG9B,EAAH,EAAGA,KAAH,OACV,eAACtN,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UACE,eAAC,GAAD,CAAQkI,QAASkF,EAAK8H,QAAQC,aAAU9T,MAG5ClB,SAAUiN,EAAK8H,QAAQhU,MAAQkM,EAAK8H,QAAQI,SAC5ClV,YAAagN,EAAKjF,WAGtBzD,KAAM,MAAS,MAAJA,OAAA,EAAAA,EAAMqQ,KAAKqJ,WAAY,IAAKC,cAG3C,eAACve,GAAA,EAAD,CACEG,MACE,eAAC,GAAD,CAAQC,MAAM,OAAOlB,QAASkf,IAFlC,SAKE,eAAC,GAAD,CAAOzQ,MAAM,oBAAoBnL,MAAO6F,EAASuF,aAAcmQ,aC1EnES,GAAmB,WACvB,MAAoC9c,mBAAS,IAA7C,YAAO+c,EAAP,KAAmBC,EAAnB,KACM/B,EAAa/B,KACnB,EAA2BN,KAAnBxD,EAAR,EAAQA,MAAOrC,EAAf,EAAeA,QACTrD,EAAS9O,mBACb,kBAAW,MAALwU,OAAA,EAAAA,EAAO3U,QAAO,SAAA0a,GAAI,OAAK4B,IAAD,MAAe5B,OAAf,EAAeA,EAAMrH,SAASmJ,cAAc7R,SAAS2R,EAAWE,qBAAmB,KAC/G,CAAC7H,EAAO2H,IAEJ9S,EAAS3J,uBACb,SAAOC,GAAP,UAAA+M,EAAAC,OAAA,gDACEsC,KAAMC,MACJ,qBACAjQ,EACA,CACE,CAAEF,KAAM,MAAOnC,QAAS,kBAAMyd,EAAW1a,GAAI2c,MAAK,kBAAMnK,SACxD,CAAEpT,KAAM,SAAU+H,MAAO,YAN/B,8DAUA,IAEF,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,CAAQhJ,MAAM,QAAQiP,MAAI,IAC1B,eAACrP,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UAAM,eAACiB,GAAA,EAAD,CAAMC,KAAK,aAFrB,SAKE,eAAC,GAAD,CAAOuM,MAAM,SAASnL,MAAOic,EAAY7Q,aAAc8Q,MAEzD,eAACxP,GAAA,EAAD,CACEtK,KAAMwM,EACNjC,aAAc,SAAA0N,GAAI,OAAIA,EAAK5a,IAC3BmN,WAAY,gBAAG9B,EAAH,EAAGA,KAAH,OACV,eAACtN,GAAA,EAAD,CACEK,SAAUiN,EAAKkI,SACfpV,MAAOkN,EAAKlM,MAAQkM,EAAKkI,SACzBtV,KACE,eAAC,KAAD,UAAM,eAAC,GAAD,CAAQkI,QAASkF,EAAK+H,aAAU9T,MAExCpB,MACE,uCACE,eAAC,KAAD,UAAM,eAACgB,GAAA,EAAD,CAAMC,KAAK,WACjB,eAAC,KAAD,CAAMlC,QAAS,kBAAMyM,EAAO2B,EAAKrL,KAAjC,SAAsC,eAACd,GAAA,EAAD,CAAMC,KAAK,UAAUzB,MAAM,8BC3C3Ekf,GAA8D,SAAC,GAE9D,IADLtP,EACI,EADJA,WAEA,EAAoC7N,mBAAS,IAA7C,YAAO+c,EAAP,KAAmBC,EAAnB,KACMI,EAAa3E,KACnB,EAA2Bb,KAAnBzU,EAAR,EAAQA,MAAO4P,EAAf,EAAeA,QACTrD,EAAS9O,mBACb,kBAAW,MAALuC,OAAA,EAAAA,EAAO1C,QAAO,SAAAyK,GAAI,OAAK6R,IAAD,MAAe7R,OAAf,EAAeA,EAAMxL,KAAKud,cAAc7R,SAAS2R,EAAWE,qBAAmB,KAC3G,CAAC9Z,EAAO4Z,IAEJ9S,EAAS3J,uBACb,SAAOC,GAAP,UAAA+M,EAAAC,OAAA,gDACEsC,KAAMC,MACJ,qBACAjQ,EACA,CACE,CAAEF,KAAM,MAAOnC,QAAS,kBAAM4f,EAAW7c,GAAI2c,MAAK,kBAAMnK,SACxD,CAAEpT,KAAM,SAAU+H,MAAO,YAN/B,8DAUA,IAEF,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,CAAQhJ,MAAM,QAAQiP,MAAI,IAC1B,eAACrP,GAAA,EAAD,CACEE,KACE,eAAC,KAAD,UAAM,eAACiB,GAAA,EAAD,CAAMC,KAAK,aAFrB,SAKE,eAAC,GAAD,CAAOuM,MAAM,SAASnL,MAAOic,EAAY7Q,aAAc8Q,MAEzD,eAACxP,GAAA,EAAD,CACEtK,KAAMwM,EACNjC,aAAc,SAAAvC,GAAI,OAAIA,EAAK3K,IAC3BmN,WAAY,gBAAG9B,EAAH,EAAGA,KAAH,OACV,eAACtN,GAAA,EAAD,CACEI,MAAOkN,EAAKlM,KACZf,SAAaiN,EAAKwJ,MAAMrU,OAAhB,qBAA2C6K,EAAKwJ,MAAM3U,QAAO,SAAA0a,GAAI,MAAwB,UAApBA,EAAK3E,cAAwBxV,KAAI,SAAAqc,GAAC,OAAIA,EAAElC,KAAKrH,YAAUwJ,KAAK,MACzI9e,KACE,eAAC,KAAD,UAAM,eAACiB,GAAA,EAAD,CAAMxB,MAAM,OAAOyB,KAAK,aAEhCjB,MACE,uCACE,eAAC,KAAD,CACEjB,QAAS,kBAAMqQ,EAAW+F,SAAS,WAAY,CAAErT,GAAIqL,EAAKrL,MAD5D,SAGE,eAACd,GAAA,EAAD,CAAMC,KAAK,WAEb,eAAC,KAAD,CAAMlC,QAAS,kBAAMyM,EAAO2B,EAAKrL,KAAjC,SAAsC,eAACd,GAAA,EAAD,CAAMC,KAAK,UAAUzB,MAAM,8B,qkBC/BjF,IAAMsf,GAAYC,eACZC,GAAWC,eACXC,GAAeH,eAEfI,GAAU,WACd,OACE,gBAACD,GAAaE,UAAd,CAAwBC,cAAe,CAAEC,aAAa,GAAtD,UACE,eAACJ,GAAaK,OAAd,CAAqBte,KAAK,cAAcue,UAAW5E,KACnD,eAACsE,GAAaK,OAAd,CAAqBte,KAAK,aAAaue,UAAWnB,KAClD,eAACa,GAAaK,OAAd,CAAqBte,KAAK,aAAaue,UAAWd,KAClD,eAACQ,GAAaK,OAAd,CAAqBte,KAAK,WAAWue,UAAW3D,SAKhD4D,GAAO,WACX,IAAMthB,EAAQyP,cACNjJ,EAAY0S,KAAZ1S,QACF+a,EAAYvd,mBAChB,8BACEwC,GADF,SACEA,EAASD,YADX,EACE,EAAgBib,MACd,SAAApJ,GAAC,MACkB,UAAjBA,EAAEwB,YACe,cAAjBxB,EAAEwB,YACe,WAAjBxB,EAAEwB,gBAER,CAACpT,IAEH,OACE,uCACE,eAAC,GAAD,IACA,gBAACqa,GAASI,UAAV,CACEC,cAAe,CACbC,aAAa,EACbM,sBAAuBzhB,EAAMI,OAAO8H,SAHxC,UAME,eAAC2Y,GAASO,OAAV,CACEte,KAAK,OACLue,UAAWrH,GACX1U,QAAS,CACPxD,MAAO,QACP4f,WAAY,gBAAGC,EAAH,EAAGA,QAAH,OACV,eAAC9e,GAAA,EAAD,CACExB,MAAOsgB,EAAU,UAAY,OAC7B7e,KAAK,OACLxB,KAAM,SAKbigB,GACC,eAACV,GAASO,OAAV,CACEte,KAAK,MACLue,UAAWlI,GACX7T,QAAS,CACPxD,MAAO,MACP4f,WAAY,gBAAGC,EAAH,EAAGA,QAAH,OACV,eAAC9e,GAAA,EAAD,CACExB,MAAOsgB,EAAU,UAAY,OAC7B7e,KAAK,cACLxB,KAAM,SAMhB,eAACuf,GAASO,OAAV,CACEte,KAAK,UACLue,UAAWL,GACX1b,QAAS,CACPxD,MAAO,UACP4f,WAAY,gBAAGC,EAAH,EAAGA,QAAH,OACV,eAAC9e,GAAA,EAAD,CACExB,MAAOsgB,EAAU,UAAY,OAC7B7e,KAAK,OACLxB,KAAM,gBAUhBsgB,GAAO,WACX,IAAM5hB,EAAQyP,cACNxI,EAAW5E,qBAAW0E,KAAtBE,OACR,OACE,eAAC0Z,GAAUM,UAAX,CAAqBC,cAAe,CAAEC,aAAa,GAAnD,SACGla,EACC,uCACE,eAAC0Z,GAAU/R,MAAX,UACE,eAAC+R,GAAUS,OAAX,CAAkBte,KAAK,OAAOue,UAAWC,OAE3C,eAACX,GAAU/R,MAAX,CACEsS,cAAe,CACbW,aAAc,CACZC,gBAAiB9hB,EAAMI,OAAOkI,OAEhCyZ,aAAc,SALlB,SAQE,eAACpB,GAAUS,OAAX,CAAkBte,KAAK,WAAWue,UAAW7B,UAIjD,gBAACmB,GAAU/R,MAAX,WACE,eAAC+R,GAAUS,OAAX,CAAkBte,KAAK,QAAQue,UAAW5C,KAC1C,eAACkC,GAAUS,OAAX,CACEY,cAAe,CAAE3C,WAAY,IAC7Bvc,KAAK,mBACLue,UAAWjC,WAYjB6C,GAAgC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACjCliB,EAAQyP,cACR0S,EAAYne,mBAChB,iBAAuB,SAAhBke,EAAyBE,KAAYC,OAC5C,CAACH,IAEGI,EAAkBte,mBACtB,qBAAC,MACIme,GADL,IAEE/hB,OAAO,SACF+hB,EAAU/hB,QADT,IAEJD,WAAYH,EAAMI,OAAOkI,MACzBia,KAAMviB,EAAMI,OAAOD,WACnB4C,KAAM/C,EAAMI,OAAO2C,WAGvB,CAACof,EAAWniB,IAEd,OACE,eAACwiB,GAAA,EAAD,CAAqBC,QAAStZ,GAAenJ,MAAOsiB,EAApD,SACE,eAAC,GAAD,O,UCvKNjW,OAAY,CACVqW,IAAK,4EACLC,yBAAyB,EACzBC,OAAO,IAGJ5W,IAAM6W,qBACT7W,IAAM6W,mBAAqB,SAACxb,EAAKI,EAASqb,EAASC,GACjDD,EAAQ,IAAK,OAMFE,ICNA,WACb,IAAMd,ECHCe,cDIP,OACE,eAAC,IAAD,CAAejjB,MAAuB,SAAhBkiB,EAAyBjO,GAAO/K,GAAtD,SACE,eAAC,IAAD,UACE,eAAC,KAAD,UACE,gBAAC,IAAD,WACE,eAACga,EAAA,EAAD,CAAWpY,MAAuB,SAAhBoX,EAAyB,QAAU,SACrD,eAAC,GAAD,UACE,eAAC,GAAD,CAAQA,YAAaA,iB,81BEdnC,IAoBMnb,EAAgB/D,6BAAkCC,GAElDkgB,EAA2B,SAAC,GAAkB,IAAhBxiB,EAAe,EAAfA,SAClC,EAA8ByC,qBAA9B,WAAOW,EAAP,KAAgBwD,EAAhB,KACA,EAA0BnF,cAAlBqB,EAAR,EAAQA,KACR,GADA,EAAcb,QACcQ,sBAA5B,WAAOggB,EAAP,KAAeC,EAAf,KACA,EAAkCjgB,qBAAlC,WAAOwV,EAAP,KAAkB0K,EAAlB,KACA,EAA0BlgB,oBAAS,GAAnC,WAAOmgB,EAAP,KAAcC,EAAd,KACM9G,EAAShZ,uBAAY,oBAAAgN,EAAAC,OAAA,kEAAAD,EAAA,MACnB+S,IAAaC,WA7BH,aA4BS,OAEzBnc,OAAWtE,GAFc,8DAGxB,CAACsE,IAEJxB,qBAAU,WACHhC,GAAW,MAACqf,KAAQ/f,cAAcsS,MCpCM,oCAAAjF,EAAAC,OAAA,oDAC3CgT,KAAmC,QAAhBnW,IAASC,GADe,mCAAAiD,EAAA,MAGrCkT,OAHqC,mBAE7BC,EAF6B,EAErCC,OAEJC,EAAcF,EACK,YAAnBA,EALyC,mCAAAnT,EAAA,MAMlBkT,OANkB,gBAMnCE,EANmC,EAMnCA,OACRC,EAAcD,EAP6B,WASzB,YAAhBC,EATyC,sEAAArT,EAAA,MAYxBkT,OAZwB,eAYvC5c,EAZuC,OAYeV,KACxC,YAAhBkH,IAASC,IACXmW,IAA0C,UAAW,CACnD9gB,KAAM,UACNkhB,WAAYJ,IAAgCK,IAC5CC,iBAAkB,CAAC,EAAG,IAAK,IAAK,KAChCC,WAAY,cAlB6B,kBAqBtCnd,GArBsC,qEDuC7Cod,GAAoC9D,KAAKgD,KACxC,CAACvf,EAASqf,IAEb,IAAM1E,EAAQhb,uBACZ,SAAOuD,EAAgBiQ,EAAkBmN,GAAzC,qBAAA3T,EAAAC,OAAA,uDACQ2T,EAAard,EADrB,sBAAAyJ,EAAA,MAEyB4E,MAAMgP,EAAS,CACpC/O,OAAQ,OACR9N,QAAS,CACP8c,OAAQ,mBACR,eAAgB,oBAElBjZ,KAAMkZ,KAAKC,UAAU,CACnBC,MAAM,kLAKNre,UAAW,CACT6Q,WACAmN,eAhBR,WAEQ7O,EAFR,QAoBgBC,GApBhB,6BAqBIhS,EArBJ,WAAAiN,EAAA,MAuBkB8E,EAASzS,QAvB3B,+BAsBMkD,KAAM,QACNlD,KAvBN,qBAyBU,IAAIgQ,MAAM,UAzBpB,2BAAArC,EAAA,MA2BqB8E,EAASE,QA3B9B,eA2BQA,EA3BR,OA4BQ3R,EAAU,CACdiD,MAAO0O,EAAKpP,KAAKqe,gBACjB1d,UAEFM,EAAWxD,GAhCb,YAAA2M,EAAA,MAiCQ+S,IAAamB,QA1EL,WA0E0BJ,KAAKC,UAAU1gB,KAjCzD,+DAmCA,CAACN,IAGG6b,EAAmB5b,uBACvB,SACEmhB,EACA3N,EACAmN,EACAvhB,GAJF,6BAAA4N,EAAAC,OAAA,uDAMQmU,EAAYC,SAAOC,KAAKH,EAAY,UAAUlY,SAAS,SAN/D,EAOoC6X,KAAKS,MAAMH,GAArCI,EAPV,EAOUA,cAAeje,EAPzB,EAOyBA,OACjBqd,EAAard,EARrB,oCAAAyJ,EAAA,MASyB4E,MAAMgP,EAAS,CACpC/O,OAAQ,OACR9N,QAAS,CACP8c,OAAQ,mBACR,eAAgB,oBAElBjZ,KAAMkZ,KAAKC,UAAU,CACnBvN,WACAmN,SACAa,gBACApiB,YAnBN,WASQ0S,EATR,QAsBgBC,GAtBhB,6BAuBc1C,MAvBd,YAAArC,EAAA,MAuB0B8E,EAASzS,QAvBnC,oEAAA2N,EAAA,MAyBqB8E,EAASE,QAzB9B,eAyBQA,EAzBR,OA0BQ3R,EAAU,CACdiD,MAAO0O,EAAK1O,MACZC,UAEFM,EAAWxD,GA9Bb,YAAA2M,EAAA,MA+BQ+S,IAAamB,QA/GL,WA+G0BJ,KAAKC,UAAU1gB,KA/BzD,+DAiCA,IAqCF,OAlCAgC,qBAAU,YACI,8BAAA2K,EAAAC,OAAA,kEAAAD,EAAA,MACS+S,IAAa0B,QAtHlB,aAqHJ,YACJnW,EADI,gCAGFoW,EAAcZ,KAAKS,MAAMjW,GAHvB,oBAAA0B,EAAA,MAKuB4E,MAAS8P,EAAYne,OAAhB,cAAqC,CACrEQ,QAAS,CACPmL,cAAc,UAAWwS,EAAYpe,UAPnC,YAKAqe,EALA,QAUa5P,GAVb,6BAWJ4N,EAXI,YAAA3S,EAAA,MAWY2U,EAAe3P,QAX3B,mCAYJnO,EAAWid,KAAKS,MAAMjW,IAZlB,oCAcJvL,EAdI,YAAAiN,EAAA,MAgBU2U,EAAetiB,QAhBzB,0BAeFkD,KAAM,QACNlD,KAhBE,+EAoBNU,EAAK,CACHwC,KAAM,QACNlD,KAAM,KAAImD,UAtBN,QA0BVsd,GAAS,GA1BC,kEA4BZ8B,GAAMrG,OAAM,WACVuE,GAAS,QAEV,IAEED,EAKH,cAACxc,EAAc9C,SAAf,CACEC,MAAK,OAAOH,GAAP,IAAgBqf,SAAQxK,YAAW8D,SAAQgC,QAAOY,qBADzD,SAGG3e,IAPI,+B,gCE7JX,mEAWA,SAASkC,EAAT,GAA6C,IAA7BvB,EAA4B,EAA5BA,KAAMD,EAAsB,EAAtBA,MAAOyB,EAAe,EAAfA,KACrB9C,EAAQyP,cACd,OACE,cAAC,IAAD,CACE3M,KAAMA,EACNzB,MAAOA,EAAQrB,EAAMI,OAAOiB,GAASrB,EAAMI,OAAO+H,KAClD7G,KAAI,MAAEA,IAAQtB,EAAM0I,MAAME,U,uPCR1B2c,EAAWzlB,IAAO0e,KAAV,6EACH,gBAAGnd,EAAH,EAAGA,MAAOrB,EAAV,EAAUA,MAAV,OACPqB,EAAQrB,EAAMI,OAAOiB,GAASrB,EAAMI,OAAO2C,QAC9B,qBAAGyiB,KAAmB,OAAS,YACjC,qBAAGxlB,MAAkB+I,KAAKC,YAGnCyc,EAAQ3lB,YAAOylB,EAAPzlB,CAAH,+DACI,mBAAqC,IAArC,EAAGE,MAAkB+I,KAAKC,YASnC9G,GALSpC,YAAOylB,EAAPzlB,CAAH,+DACG,mBAAqC,IAArC,EAAGE,MAAkB+I,KAAKC,YAI1BlJ,YAAOylB,EAAPzlB,CAAH,2CAINqC,EAAQrC,YAAOylB,EAAPzlB,CAAH,kBAELmC,EAAWnC,YAAOylB,EAAPzlB,CAAH,uEACC,kBAAqC,GAArC,EAAGE,MAAkB+I,KAAKC,YAQnCsB,GAJUxK,YAAOylB,EAAPzlB,CAAH,yCACE,kBAAqC,GAArC,EAAGE,MAAkB+I,KAAKC,YAG5BlJ,YAAOylB,EAAPzlB,CAAH,oD,sKCnCJD,EAAUC,IAAOC,KAAV,sDAGD,qBAAGoL,UAGTkM,EAAevX,IAAOkM,MAAV,wHAYZA,EAAyB,SAAC,GAAe,IAAbhC,EAAY,EAAZA,MAChC,EAA0B3H,qBAAW0E,KAA7BE,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,MAChB,EAA0B5D,mBAAiB,GAA3C,WAAO8H,EAAP,KAAcmH,EAAd,KACA,EAAsBjP,qBAAtB,WAAOqP,EAAP,KAAYiT,EAAZ,KAgBA,OAfA3f,qBAAU,YACI,yBAAA2K,EAAAC,OAAA,kEAAAD,EAAA,MACa4E,MAASrO,EAAJ,cAAwB+C,EAAMrG,GAAO,CAC/D8D,QAAS,CACPmL,cAAc,UAAW5L,MAHnB,cACJwO,EADI,kBAAA9E,EAAA,MAMe8E,EAASmQ,eANxB,OAMJC,EANI,OAOJC,EAAcrQ,EAAS/N,QAAQ8S,IAAI,gBACnCzC,EAASiN,EAAOC,KAAKY,GAAYjZ,SAAS,UAEhD+Y,EAVU,SAScG,GAAe,cAT7B,WASoD/N,GATpD,6DAYZwN,KACC,CAACre,EAAQD,EAAOgD,EAAMrG,KAEvB,cAAC9D,EAAD,CACEsL,OAAQD,EAAQlB,EAAMC,OACtB6K,SAAU,SAAAJ,GACR,IAAMK,EAAeL,EAAIC,YAAYK,OAAO9J,MACxC6J,IAAiB7J,GACnBmH,EAAS0C,IALf,SASE,cAACsC,EAAD,CAAc5K,OAAQ,CAAEpF,IAAKoL,U","file":"static/js/app.3c57d0aa.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ninterface Props {\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  children?: ReactNode;\n  onPress?: () => any;\n  background?: keyof Theme['colors'];\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}\n\nconst Wrapper = styled.View<{\n  background?: keyof Theme['colors'];\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  theme: Theme;\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}>`\n  padding: ${({ theme }) => theme.margins.medium / 2}px\n    ${({ theme }) => theme.margins.medium / 2}px;\n  ${({ background, theme }) => (background ? `background: ${theme.colors[background]};` : '')}\n  ${({ flex }) => (flex ? `flex: ${flex};` : '')}\n  flex-direction: ${({ direction }) => (direction ? direction : 'row')};\n  align-items: ${({ align }) => (align ? align : 'center')};\n`;\n\nconst Touch = styled.TouchableOpacity``;\n\nconst Cell: React.FC<Props> = ({ children, onPress, ...props }) => {\n  const {\n    accessibilityLabel,\n    accessibilityRole,\n    accessibilityHint,\n    ...others\n  } = props;\n  const node = <Wrapper {...others}>{children}</Wrapper>;\n  if (onPress) {\n    return (\n      <Touch\n        accessible\n        accessibilityRole={accessibilityRole || 'button'}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        onPress={onPress}\n      >\n        {node}\n      </Touch>\n    );\n  }\n  return node;\n};\n\nexport { Cell };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { Title1, Body1, Overline } from '#/typography';\nimport { Cell } from './Cell';\nimport { PlaceholderIcon } from './PlaceholderIcon';\n\ninterface Props {\n  background?: string;\n  top?: ReactNode;\n  left?: ReactNode;\n  right?: ReactNode;\n  title?: ReactNode;\n  overline?: ReactNode;\n  description?: ReactNode;\n  children?: ReactNode;\n  onPress?: () => any;\n}\n\nconst Children = styled.View``;\n\nconst componentOrString = (\n  input: ReactNode,\n  Component: React.FC<{ children: ReactNode }>\n) => {\n  if (!input) {\n    return null;\n  }\n  if (typeof input === 'string') {\n    return <Component>{input}</Component>;\n  }\n  return input;\n};\n\nconst Row: React.FC<Props> = ({\n  background,\n  top,\n  left,\n  right,\n  title,\n  overline,\n  description,\n  children,\n  onPress,\n}) => (\n  <Cell background={background} onPress={onPress}>\n    {left}\n    <Cell flex={1} direction=\"column\" align=\"stretch\">\n      {!!top}\n      {componentOrString(overline, Overline)}\n      {componentOrString(title, Title1)}\n      {componentOrString(description, Body1)}\n      {!!children && <Children>{children}</Children>}\n    </Cell>\n    {right}\n  </Cell>\n);\n\nexport { Row, Cell, PlaceholderIcon };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { Cell } from './Cell';\n\ninterface Props {\n  color?: string;\n  size?: number;\n  onPress?: () => void;\n}\n\nconst Icon = styled.View<{ size: number; color: string }>`\n  background: ${({ color }) => color};\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  border-radius: ${({ size }) => size / 4}px;\n`;\n\nconst PlaceholderIcon: React.FC<Props> = ({\n  color = 'red',\n  size = 24,\n  onPress,\n}) => (\n  <Cell onPress={onPress}>\n    <Icon color={color} size={size} />\n  </Cell>\n);\n\nexport { PlaceholderIcon };\n","import { NotificationContext } from \"#/context/notifications\"\nimport { useContext } from \"react\"\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  return context;\n};\n","module.exports = __webpack_public_path__ + \"static/media/tourist.e3fa36f8.png\";","import { NotificationInfo } from '#/context/notifications';\nimport { Cell, Row } from '#/components/Row';\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Icon } from '../Icon';\nimport { Body1 } from '#/typography';\n\ntype Props = {\n  notification: NotificationInfo;\n  dismiss: () => void;\n}\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.destructive};\n  margin: 5px;\n  border-radius: 5px;\n`\n\nconst Notification: React.FC<Props> = ({ notification, dismiss }) => {\n  return (\n    <Wrapper>\n      <Row\n        left={(\n          <Cell><Icon name=\"alert-circle\" color=\"destructiveAlt\" /></Cell>\n        )}\n        right={\n          <Cell onPress={dismiss}>\n            <Icon name=\"x\" color=\"destructiveAlt\" />\n          </Cell>\n        }\n      >\n        <Body1 color=\"destructiveAlt\">{notification.text}</Body1>\n      </Row>\n    </Wrapper>\n  );\n}\n\nexport { Notification };\n\n\n","import { Notification } from '#/components/notification';\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\n\ntype NotificationInfo = {\n  type: 'info' | 'error',\n  text: string;\n  autoHideAfter?: number;\n  actions?: {\n    title: string;\n    onPress: () => void;\n    dismissOnPress: boolean;\n  };\n}\n\ntype InternalNotification = NotificationInfo & {\n  id: number;\n}\n\ntype NotificationContextValue = {\n  show: (notification: NotificationInfo) => number;\n  dismiss: (id: number) => void;\n}\n\nconst NotificationContext = createContext<NotificationContextValue>(undefined as any);\n\nconst Wrapper = styled.View<{ top: number }>`\n  position: absolute;\n  top: ${({ top }) => top}px;\n  width: 100%;\n  z-index: 1000;\n`;\n\nlet nextId = 0;\n\nconst NotificationProvider: React.FC = ({ children }) => {\n  const [notifications, setNotifications] = useState<InternalNotification[]>([]);\n  const insets = useSafeAreaInsets();\n\n  const show = useCallback(\n    (notification: NotificationInfo) => {\n      const id = nextId++;\n      setNotifications(current => [...current, {...notification, id}]);\n      return id;\n    },\n    [setNotifications]\n  );\n\n  const dismiss = useCallback(\n    (id: number) => {\n      setNotifications(current => current.filter(c => c.id !== id));\n    },\n    [setNotifications],\n  );\n\n  const context = useMemo(\n    () => ({\n      show,\n      dismiss,\n    }),\n    [show, dismiss],\n  );\n\n  return (\n    <NotificationContext.Provider value={context}>\n      {notifications.length > 0 && (\n        <Wrapper top={insets.top}>\n          {notifications.map((notification, index) => (\n            <Notification dismiss={() => dismiss(notification.id)} key={index} notification={notification} />\n          ))}\n        </Wrapper>\n      )}\n      {children}\n    </NotificationContext.Provider>\n  )\n}\n\nexport type { NotificationInfo };\nexport { NotificationProvider, NotificationContext };\n","module.exports = __webpack_public_path__ + \"static/media/error.f81af091.png\";","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type CommentCreateParameters = {\n  content?: InputMaybe<Scalars['String']>;\n  post: Scalars['String'];\n};\n\nexport type CommentModel = {\n  __typename?: 'CommentModel';\n  content: Scalars['String'];\n  created: Scalars['DateTime'];\n  creator: UserModel;\n  id: Scalars['String'];\n  post: PostModel;\n  removed?: Maybe<Scalars['DateTime']>;\n};\n\nexport type FeedModel = {\n  __typename?: 'FeedModel';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  posts: Array<PostModel>;\n  removed?: Maybe<Scalars['DateTime']>;\n  users: Array<UserFeedRelationModel>;\n};\n\n\nexport type FeedModelPostsArgs = {\n  filter?: InputMaybe<PostFindParameters>;\n};\n\nexport type MediaModel = {\n  __typename?: 'MediaModel';\n  aspect?: Maybe<Scalars['Float']>;\n  contentType?: Maybe<Scalars['String']>;\n  created?: Maybe<Scalars['DateTime']>;\n  creator: UserModel;\n  filename?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  lowres?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Float']>;\n  removed?: Maybe<Scalars['DateTime']>;\n  size: Scalars['Float'];\n  type?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addUserToFeed: UserFeedRelationModel;\n  createAuthToken: Scalars['String'];\n  createComment: CommentModel;\n  createFeed: FeedModel;\n  createPost: PostModel;\n  inviteProfile: UserModel;\n  registerPushNotification: PushRegistrationModel;\n  removeFeed: Scalars['Boolean'];\n  removePost: Scalars['Boolean'];\n  removeUser: Scalars['Boolean'];\n  removeUserFromFeed: Scalars['Boolean'];\n  setProfileAvatar: UserModel;\n};\n\n\nexport type MutationAddUserToFeedArgs = {\n  accessType: Scalars['String'];\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationCreateAuthTokenArgs = {\n  secret: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationCreateCommentArgs = {\n  params: CommentCreateParameters;\n};\n\n\nexport type MutationCreateFeedArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  params: PostCreateParameters;\n};\n\n\nexport type MutationInviteProfileArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterPushNotificationArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type MutationRemoveFeedArgs = {\n  feedId: Scalars['String'];\n};\n\n\nexport type MutationRemovePostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationRemoveUserArgs = {\n  userId: Scalars['String'];\n};\n\n\nexport type MutationRemoveUserFromFeedArgs = {\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationSetProfileAvatarArgs = {\n  mediaId?: InputMaybe<Scalars['String']>;\n};\n\nexport type PostCreateParameters = {\n  body?: InputMaybe<Scalars['String']>;\n  feed: Scalars['String'];\n  media: Array<Scalars['String']>;\n};\n\nexport type PostFindParameters = {\n  after?: InputMaybe<Scalars['DateTime']>;\n  feeds?: InputMaybe<Array<Scalars['String']>>;\n  limit?: InputMaybe<Scalars['Float']>;\n  offset?: InputMaybe<Scalars['Float']>;\n};\n\nexport type PostModel = {\n  __typename?: 'PostModel';\n  body?: Maybe<Scalars['String']>;\n  commentCount: Scalars['Float'];\n  comments: Array<CommentModel>;\n  created: Scalars['DateTime'];\n  creator?: Maybe<UserModel>;\n  feed: FeedModel;\n  id: Scalars['String'];\n  media: Array<MediaModel>;\n  removed?: Maybe<Scalars['DateTime']>;\n};\n\nexport type PushRegistrationModel = {\n  __typename?: 'PushRegistrationModel';\n  device?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  allFeeds: Array<FeedModel>;\n  feed: FeedModel;\n  feeds: Array<FeedModel>;\n  post: PostModel;\n  posts: Array<PostModel>;\n  profile?: Maybe<UserModel>;\n  users: Array<UserModel>;\n};\n\n\nexport type QueryFeedArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostsArgs = {\n  filter: PostFindParameters;\n};\n\nexport type UserFeedRelationModel = {\n  __typename?: 'UserFeedRelationModel';\n  accessType: Scalars['String'];\n  feed: FeedModel;\n  user: UserModel;\n};\n\nexport type UserModel = {\n  __typename?: 'UserModel';\n  admin: Scalars['Boolean'];\n  avatar?: Maybe<Scalars['String']>;\n  feeds: Array<UserFeedRelationModel>;\n  id: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  removed?: Maybe<Scalars['DateTime']>;\n  username: Scalars['String'];\n};\n\nexport type CreateCommentMutationVariables = Exact<{\n  params: CommentCreateParameters;\n}>;\n\n\nexport type CreateCommentMutation = { __typename?: 'Mutation', createComment: { __typename?: 'CommentModel', id: string } };\n\nexport type FeedsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FeedsQuery = { __typename?: 'Query', feeds: Array<{ __typename?: 'FeedModel', id: string, name: string, posts: Array<{ __typename?: 'PostModel', id: string, body?: string | null, media: Array<{ __typename?: 'MediaModel', id: string }> }> }> };\n\nexport type AllFeedsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllFeedsQuery = { __typename?: 'Query', allFeeds: Array<{ __typename?: 'FeedModel', id: string, name: string, users: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, user: { __typename?: 'UserModel', name?: string | null, username: string } }> }> };\n\nexport type FeedQueryVariables = Exact<{\n  feedId: Scalars['String'];\n}>;\n\n\nexport type FeedQuery = { __typename?: 'Query', feed: { __typename?: 'FeedModel', id: string, name: string, users: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, user: { __typename?: 'UserModel', id: string, name?: string | null, username: string } }> } };\n\nexport type CreateFeedMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateFeedMutation = { __typename?: 'Mutation', createFeed: { __typename?: 'FeedModel', id: string } };\n\nexport type AddUserToFeedMutationVariables = Exact<{\n  accessType: Scalars['String'];\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\n\nexport type AddUserToFeedMutation = { __typename?: 'Mutation', addUserToFeed: { __typename?: 'UserFeedRelationModel', accessType: string } };\n\nexport type RemoveUserFromFeedMutationVariables = Exact<{\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\n\nexport type RemoveUserFromFeedMutation = { __typename?: 'Mutation', removeUserFromFeed: boolean };\n\nexport type RemoveFeedMutationVariables = Exact<{\n  feedId: Scalars['String'];\n}>;\n\n\nexport type RemoveFeedMutation = { __typename?: 'Mutation', removeFeed: boolean };\n\nexport type PostQueryVariables = Exact<{\n  postId: Scalars['String'];\n}>;\n\n\nexport type PostQuery = { __typename?: 'Query', post: { __typename?: 'PostModel', id: string, created: any, creator?: { __typename?: 'UserModel', id: string, name?: string | null, avatar?: string | null, username: string } | null, comments: Array<{ __typename?: 'CommentModel', id: string, content: string, created: any, creator: { __typename?: 'UserModel', username: string, name?: string | null, id: string, avatar?: string | null } }>, media: Array<{ __typename?: 'MediaModel', id: string, contentType?: string | null, lowres?: string | null, aspect?: number | null, order?: number | null, created?: any | null, type?: string | null }> } };\n\nexport type PostsQueryVariables = Exact<{\n  filter: PostFindParameters;\n}>;\n\n\nexport type PostsQuery = { __typename?: 'Query', posts: Array<{ __typename?: 'PostModel', id: string, body?: string | null, commentCount: number, created: any, creator?: { __typename?: 'UserModel', name?: string | null, username: string, avatar?: string | null } | null, media: Array<{ __typename?: 'MediaModel', id: string, aspect?: number | null, type?: string | null }> }> };\n\nexport type CreatePostMutationVariables = Exact<{\n  params: PostCreateParameters;\n}>;\n\n\nexport type CreatePostMutation = { __typename?: 'Mutation', createPost: { __typename?: 'PostModel', id: string } };\n\nexport type RemovePostMutationVariables = Exact<{\n  removePostId: Scalars['String'];\n}>;\n\n\nexport type RemovePostMutation = { __typename?: 'Mutation', removePost: boolean };\n\nexport type ProfileQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProfileQuery = { __typename?: 'Query', profile?: { __typename?: 'UserModel', id: string, username: string, name?: string | null, admin: boolean, avatar?: string | null, feeds: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, feed: { __typename?: 'FeedModel', id: string, name: string } }> } | null };\n\nexport type SetProfileAvatarMutationVariables = Exact<{\n  mediaId?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type SetProfileAvatarMutation = { __typename?: 'Mutation', setProfileAvatar: { __typename?: 'UserModel', id: string } };\n\nexport type InviteProfileMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type InviteProfileMutation = { __typename?: 'Mutation', inviteProfile: { __typename?: 'UserModel', id: string } };\n\nexport type RegisterPushNotificationMutationVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type RegisterPushNotificationMutation = { __typename?: 'Mutation', registerPushNotification: { __typename?: 'PushRegistrationModel', id: string } };\n\nexport type UsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'UserModel', id: string, name?: string | null, username: string, avatar?: string | null }> };\n\nexport type RemoveUserMutationVariables = Exact<{\n  userId: Scalars['String'];\n}>;\n\n\nexport type RemoveUserMutation = { __typename?: 'Mutation', removeUser: boolean };\n\n\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($params: CommentCreateParameters!) {\n  createComment(params: $params) {\n    id\n  }\n}\n    `;\nexport type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, options);\n      }\nexport type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;\nexport type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;\nexport const FeedsDocument = gql`\n    query Feeds {\n  feeds {\n    id\n    name\n    posts {\n      id\n      body\n      media {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedsQuery__\n *\n * To run a query within a React component, call `useFeedsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFeedsQuery(baseOptions?: Apollo.QueryHookOptions<FeedsQuery, FeedsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FeedsQuery, FeedsQueryVariables>(FeedsDocument, options);\n      }\nexport function useFeedsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedsQuery, FeedsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FeedsQuery, FeedsQueryVariables>(FeedsDocument, options);\n        }\nexport type FeedsQueryHookResult = ReturnType<typeof useFeedsQuery>;\nexport type FeedsLazyQueryHookResult = ReturnType<typeof useFeedsLazyQuery>;\nexport type FeedsQueryResult = Apollo.QueryResult<FeedsQuery, FeedsQueryVariables>;\nexport const AllFeedsDocument = gql`\n    query AllFeeds {\n  allFeeds {\n    id\n    name\n    users {\n      accessType\n      user {\n        name\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useAllFeedsQuery__\n *\n * To run a query within a React component, call `useAllFeedsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllFeedsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllFeedsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllFeedsQuery(baseOptions?: Apollo.QueryHookOptions<AllFeedsQuery, AllFeedsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllFeedsQuery, AllFeedsQueryVariables>(AllFeedsDocument, options);\n      }\nexport function useAllFeedsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllFeedsQuery, AllFeedsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllFeedsQuery, AllFeedsQueryVariables>(AllFeedsDocument, options);\n        }\nexport type AllFeedsQueryHookResult = ReturnType<typeof useAllFeedsQuery>;\nexport type AllFeedsLazyQueryHookResult = ReturnType<typeof useAllFeedsLazyQuery>;\nexport type AllFeedsQueryResult = Apollo.QueryResult<AllFeedsQuery, AllFeedsQueryVariables>;\nexport const FeedDocument = gql`\n    query Feed($feedId: String!) {\n  feed(id: $feedId) {\n    id\n    name\n    users {\n      accessType\n      user {\n        id\n        name\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedQuery__\n *\n * To run a query within a React component, call `useFeedQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedQuery({\n *   variables: {\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useFeedQuery(baseOptions: Apollo.QueryHookOptions<FeedQuery, FeedQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n      }\nexport function useFeedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedQuery, FeedQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n        }\nexport type FeedQueryHookResult = ReturnType<typeof useFeedQuery>;\nexport type FeedLazyQueryHookResult = ReturnType<typeof useFeedLazyQuery>;\nexport type FeedQueryResult = Apollo.QueryResult<FeedQuery, FeedQueryVariables>;\nexport const CreateFeedDocument = gql`\n    mutation CreateFeed($name: String!) {\n  createFeed(name: $name) {\n    id\n  }\n}\n    `;\nexport type CreateFeedMutationFn = Apollo.MutationFunction<CreateFeedMutation, CreateFeedMutationVariables>;\n\n/**\n * __useCreateFeedMutation__\n *\n * To run a mutation, you first call `useCreateFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createFeedMutation, { data, loading, error }] = useCreateFeedMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateFeedMutation(baseOptions?: Apollo.MutationHookOptions<CreateFeedMutation, CreateFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateFeedMutation, CreateFeedMutationVariables>(CreateFeedDocument, options);\n      }\nexport type CreateFeedMutationHookResult = ReturnType<typeof useCreateFeedMutation>;\nexport type CreateFeedMutationResult = Apollo.MutationResult<CreateFeedMutation>;\nexport type CreateFeedMutationOptions = Apollo.BaseMutationOptions<CreateFeedMutation, CreateFeedMutationVariables>;\nexport const AddUserToFeedDocument = gql`\n    mutation AddUserToFeed($accessType: String!, $userId: String!, $feedId: String!) {\n  addUserToFeed(accessType: $accessType, userId: $userId, feedId: $feedId) {\n    accessType\n  }\n}\n    `;\nexport type AddUserToFeedMutationFn = Apollo.MutationFunction<AddUserToFeedMutation, AddUserToFeedMutationVariables>;\n\n/**\n * __useAddUserToFeedMutation__\n *\n * To run a mutation, you first call `useAddUserToFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddUserToFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addUserToFeedMutation, { data, loading, error }] = useAddUserToFeedMutation({\n *   variables: {\n *      accessType: // value for 'accessType'\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useAddUserToFeedMutation(baseOptions?: Apollo.MutationHookOptions<AddUserToFeedMutation, AddUserToFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddUserToFeedMutation, AddUserToFeedMutationVariables>(AddUserToFeedDocument, options);\n      }\nexport type AddUserToFeedMutationHookResult = ReturnType<typeof useAddUserToFeedMutation>;\nexport type AddUserToFeedMutationResult = Apollo.MutationResult<AddUserToFeedMutation>;\nexport type AddUserToFeedMutationOptions = Apollo.BaseMutationOptions<AddUserToFeedMutation, AddUserToFeedMutationVariables>;\nexport const RemoveUserFromFeedDocument = gql`\n    mutation RemoveUserFromFeed($userId: String!, $feedId: String!) {\n  removeUserFromFeed(userId: $userId, feedId: $feedId)\n}\n    `;\nexport type RemoveUserFromFeedMutationFn = Apollo.MutationFunction<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>;\n\n/**\n * __useRemoveUserFromFeedMutation__\n *\n * To run a mutation, you first call `useRemoveUserFromFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveUserFromFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeUserFromFeedMutation, { data, loading, error }] = useRemoveUserFromFeedMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useRemoveUserFromFeedMutation(baseOptions?: Apollo.MutationHookOptions<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>(RemoveUserFromFeedDocument, options);\n      }\nexport type RemoveUserFromFeedMutationHookResult = ReturnType<typeof useRemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationResult = Apollo.MutationResult<RemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationOptions = Apollo.BaseMutationOptions<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>;\nexport const RemoveFeedDocument = gql`\n    mutation RemoveFeed($feedId: String!) {\n  removeFeed(feedId: $feedId)\n}\n    `;\nexport type RemoveFeedMutationFn = Apollo.MutationFunction<RemoveFeedMutation, RemoveFeedMutationVariables>;\n\n/**\n * __useRemoveFeedMutation__\n *\n * To run a mutation, you first call `useRemoveFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeFeedMutation, { data, loading, error }] = useRemoveFeedMutation({\n *   variables: {\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useRemoveFeedMutation(baseOptions?: Apollo.MutationHookOptions<RemoveFeedMutation, RemoveFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveFeedMutation, RemoveFeedMutationVariables>(RemoveFeedDocument, options);\n      }\nexport type RemoveFeedMutationHookResult = ReturnType<typeof useRemoveFeedMutation>;\nexport type RemoveFeedMutationResult = Apollo.MutationResult<RemoveFeedMutation>;\nexport type RemoveFeedMutationOptions = Apollo.BaseMutationOptions<RemoveFeedMutation, RemoveFeedMutationVariables>;\nexport const PostDocument = gql`\n    query Post($postId: String!) {\n  post(id: $postId) {\n    id\n    creator {\n      id\n      name\n      avatar\n      username\n    }\n    created\n    comments {\n      id\n      creator {\n        username\n        name\n        id\n        avatar\n      }\n      content\n      created\n    }\n    media {\n      id\n      contentType\n      lowres\n      aspect\n      order\n      created\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts($filter: PostFindParameters!) {\n  posts(filter: $filter) {\n    id\n    body\n    commentCount\n    creator {\n      name\n      username\n      avatar\n    }\n    created\n    media {\n      id\n      aspect\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const CreatePostDocument = gql`\n    mutation CreatePost($params: PostCreateParameters!) {\n  createPost(params: $params) {\n    id\n  }\n}\n    `;\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, options);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const RemovePostDocument = gql`\n    mutation RemovePost($removePostId: String!) {\n  removePost(id: $removePostId)\n}\n    `;\nexport type RemovePostMutationFn = Apollo.MutationFunction<RemovePostMutation, RemovePostMutationVariables>;\n\n/**\n * __useRemovePostMutation__\n *\n * To run a mutation, you first call `useRemovePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemovePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removePostMutation, { data, loading, error }] = useRemovePostMutation({\n *   variables: {\n *      removePostId: // value for 'removePostId'\n *   },\n * });\n */\nexport function useRemovePostMutation(baseOptions?: Apollo.MutationHookOptions<RemovePostMutation, RemovePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemovePostMutation, RemovePostMutationVariables>(RemovePostDocument, options);\n      }\nexport type RemovePostMutationHookResult = ReturnType<typeof useRemovePostMutation>;\nexport type RemovePostMutationResult = Apollo.MutationResult<RemovePostMutation>;\nexport type RemovePostMutationOptions = Apollo.BaseMutationOptions<RemovePostMutation, RemovePostMutationVariables>;\nexport const ProfileDocument = gql`\n    query Profile {\n  profile {\n    id\n    username\n    name\n    admin\n    avatar\n    feeds {\n      feed {\n        id\n        name\n      }\n      accessType\n    }\n  }\n}\n    `;\n\n/**\n * __useProfileQuery__\n *\n * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProfileQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProfileQuery(baseOptions?: Apollo.QueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n      }\nexport function useProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n        }\nexport type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;\nexport type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;\nexport type ProfileQueryResult = Apollo.QueryResult<ProfileQuery, ProfileQueryVariables>;\nexport const SetProfileAvatarDocument = gql`\n    mutation SetProfileAvatar($mediaId: String) {\n  setProfileAvatar(mediaId: $mediaId) {\n    id\n  }\n}\n    `;\nexport type SetProfileAvatarMutationFn = Apollo.MutationFunction<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>;\n\n/**\n * __useSetProfileAvatarMutation__\n *\n * To run a mutation, you first call `useSetProfileAvatarMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProfileAvatarMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProfileAvatarMutation, { data, loading, error }] = useSetProfileAvatarMutation({\n *   variables: {\n *      mediaId: // value for 'mediaId'\n *   },\n * });\n */\nexport function useSetProfileAvatarMutation(baseOptions?: Apollo.MutationHookOptions<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>(SetProfileAvatarDocument, options);\n      }\nexport type SetProfileAvatarMutationHookResult = ReturnType<typeof useSetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationResult = Apollo.MutationResult<SetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationOptions = Apollo.BaseMutationOptions<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>;\nexport const InviteProfileDocument = gql`\n    mutation InviteProfile($email: String!) {\n  inviteProfile(email: $email) {\n    id\n  }\n}\n    `;\nexport type InviteProfileMutationFn = Apollo.MutationFunction<InviteProfileMutation, InviteProfileMutationVariables>;\n\n/**\n * __useInviteProfileMutation__\n *\n * To run a mutation, you first call `useInviteProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInviteProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [inviteProfileMutation, { data, loading, error }] = useInviteProfileMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useInviteProfileMutation(baseOptions?: Apollo.MutationHookOptions<InviteProfileMutation, InviteProfileMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<InviteProfileMutation, InviteProfileMutationVariables>(InviteProfileDocument, options);\n      }\nexport type InviteProfileMutationHookResult = ReturnType<typeof useInviteProfileMutation>;\nexport type InviteProfileMutationResult = Apollo.MutationResult<InviteProfileMutation>;\nexport type InviteProfileMutationOptions = Apollo.BaseMutationOptions<InviteProfileMutation, InviteProfileMutationVariables>;\nexport const RegisterPushNotificationDocument = gql`\n    mutation RegisterPushNotification($token: String!) {\n  registerPushNotification(token: $token) {\n    id\n  }\n}\n    `;\nexport type RegisterPushNotificationMutationFn = Apollo.MutationFunction<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>;\n\n/**\n * __useRegisterPushNotificationMutation__\n *\n * To run a mutation, you first call `useRegisterPushNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterPushNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerPushNotificationMutation, { data, loading, error }] = useRegisterPushNotificationMutation({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useRegisterPushNotificationMutation(baseOptions?: Apollo.MutationHookOptions<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>(RegisterPushNotificationDocument, options);\n      }\nexport type RegisterPushNotificationMutationHookResult = ReturnType<typeof useRegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationResult = Apollo.MutationResult<RegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationOptions = Apollo.BaseMutationOptions<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    name\n    username\n    avatar\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n      }\nexport function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;\nexport const RemoveUserDocument = gql`\n    mutation RemoveUser($userId: String!) {\n  removeUser(userId: $userId)\n}\n    `;\nexport type RemoveUserMutationFn = Apollo.MutationFunction<RemoveUserMutation, RemoveUserMutationVariables>;\n\n/**\n * __useRemoveUserMutation__\n *\n * To run a mutation, you first call `useRemoveUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeUserMutation, { data, loading, error }] = useRemoveUserMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useRemoveUserMutation(baseOptions?: Apollo.MutationHookOptions<RemoveUserMutation, RemoveUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveUserMutation, RemoveUserMutationVariables>(RemoveUserDocument, options);\n      }\nexport type RemoveUserMutationHookResult = ReturnType<typeof useRemoveUserMutation>;\nexport type RemoveUserMutationResult = Apollo.MutationResult<RemoveUserMutation>;\nexport type RemoveUserMutationOptions = Apollo.BaseMutationOptions<RemoveUserMutation, RemoveUserMutationVariables>;","import { ApolloError } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { useNotifications } from \"./notifications\";\n\nexport const useErrorNotification = (error?: ApolloError) => {\n  const { show, dismiss } = useNotifications();\n\n  useEffect(\n    () => {\n      if (!error) {\n        return;\n      }\n      console.error(error);\n      const id = show({\n        type: 'error',\n        text: error.message,\n      });\n\n      return () => {\n        dismiss(id);\n      };\n    },\n    [error, show, dismiss],\n  )\n}\n","\nimport { useProfileQuery } from '#/hooks/graphql';\nimport { useErrorNotification } from '#/hooks/utils';\nimport { createContext, useMemo, useState } from 'react';\n\ntype BaseType = ReturnType<typeof useProfileQuery>;\n\ntype ProfileContextValue = BaseType & {\n  profile: Exclude<BaseType['data'], undefined>['profile'];\n  feeds: Exclude<Exclude<BaseType['data'], undefined>['profile'], null | undefined>['feeds'];\n}\n\nconst ProfileContext = createContext<ProfileContextValue>(undefined as any);\n\nconst ProfileProvider: React.FC = ({ children }) => {\n  const { data, ...props } = useProfileQuery({\n    variables: {\n    },\n  });\n  useErrorNotification(props.error);\n\n  const feeds = useMemo(() => data?.profile?.feeds || [], [data]);\n  const profile = useMemo(() => data?.profile, [data]);\n\n  const context = useMemo(\n    () => ({\n      ...props,\n      data,\n      feeds,\n      profile,\n    }),\n    [props, data, feeds],\n  )\n\n  return (\n    <ProfileContext.Provider value={context}>\n      {children}\n    </ProfileContext.Provider>\n  );\n}\n\nexport { ProfileContext, ProfileProvider };\n","import { usePostsQuery } from '#/hooks/graphql';\nimport { useErrorNotification } from '#/hooks/utils';\nimport { createContext, useMemo, useState } from 'react';\n\ntype BaseType = ReturnType<typeof usePostsQuery>;\n\ntype HomeContextValue = BaseType & {\n  posts: Exclude<BaseType['data'], undefined>['posts'];\n  feeds: string[];\n  setFeeds: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nconst HomeContext = createContext<HomeContextValue>(undefined as any);\n\nconst HomeProvider: React.FC = ({ children }) => {\n  const [feeds, setFeeds] = useState<string[]>([]);\n  const { data, ...props } = usePostsQuery({\n    variables: {\n      filter: {\n        feeds: feeds.length > 0 ? feeds : undefined,\n      },\n    },\n  });\n  useErrorNotification(props.error);\n\n  const posts = useMemo(() => data?.posts || [], [data]);\n\n  const context = useMemo(\n    () => ({\n      ...props,\n      data,\n      feeds,\n      posts,\n      setFeeds,\n    }),\n    [props, data, feeds, setFeeds],\n  )\n\n  return (\n    <HomeContext.Provider value={context}>\n      {children}\n    </HomeContext.Provider>\n  );\n}\n\nexport { HomeContext, HomeProvider };\n","import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport React, { useContext, useMemo } from 'react';\nimport { ServerContext } from '../server';\nimport { ProfileProvider } from '../profile';\nimport { HomeProvider } from '../home';\n\nconst GraphQLProvider: React.FC = ({ children }) => {\n  const { token, domain } = useContext(ServerContext);\n  const apolloClient = useMemo(() => {\n    if (!domain) {\n      return undefined;\n    }\n    const link = createHttpLink({\n      uri: `${domain}/graphql`,\n    });\n    const authLink = setContext((_, { headers }) => {\n      return {\n        headers: {\n          ...headers,\n          authorization: `bearer ${token}`,\n        },\n      };\n    });\n    return new ApolloClient({\n      cache: new InMemoryCache(),\n      link: authLink.concat(link),\n    });\n  }, [token, domain]);\n\n  if (!apolloClient) {\n    return <>{children}</>;\n  }\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      <ProfileProvider>\n        <HomeProvider>\n          {children}\n        </HomeProvider>\n      </ProfileProvider>\n    </ApolloProvider>\n  );\n};\n\nexport { GraphQLProvider };\n","import Theme from './Theme';\n\nconst lightTheme: Theme = {\n  colors: {\n    primary: '#1abc9c',\n    icon: '#1abc9c',\n    destructive: '#e74c3c',\n    destructiveAlt: '#fff',\n    header: '#f9f9f9',\n    shade: '#ededed',\n    input: '#ddd',\n    secondary: 'blue',\n    shadow: '#000',\n    background: '#fff',\n    text: '#000',\n    textShade: '#999',\n  },\n  sizes: {\n    corners: 5,\n    icons: 24,\n  },\n  margins: {\n    small: 8,\n    medium: 16,\n    large: 24,\n  },\n  font: {\n    baseSize: 14,\n  },\n};\n\nexport default lightTheme;\n","import Theme from './Theme';\nimport light from './light';\n\nconst darkTheme: Theme = {\n  ...light,\n  colors: {\n    ...light.colors,\n    primary: '#e67e22',\n    input: '#333',\n    header: '#222',\n    icon: '#e67e22',\n    background: '#151515',\n    shadow: '#000',\n    secondary: 'blue',\n    shade: '#000',\n    text: '#fff',\n    textShade: '#666',\n  },\n};\n\nexport default darkTheme;\n","export const linkingConfig = {\n  prefixes: ['pictoroma://'],\n  screens: {\n    AcceptInvitation: 'login/accept-invite',\n  },\n};\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { BlurView } from 'expo-blur';\n\nconst Wrapper = styled(BlurView)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 100;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Activity = styled.ActivityIndicator`\n  \n`\n\n\nconst OverlayLoader: React.FC<{}> = () => (\n  <Wrapper intensity={20}>\n    <Activity /> \n  </Wrapper>\n);\n\nexport { OverlayLoader };\n","import styled from 'styled-components/native';\nimport { Icon } from '../Icon';\nimport { Image } from '../Image';\n\ntype Props = {\n  mediaId?: string;\n  onPress?: () => void;\n};\n\nconst Touchable = styled.TouchableOpacity``;\nconst Wrapper = styled.View`\n  position: relative;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n\nconst Avatar: React.FC<Props> = ({ mediaId, onPress }) => {\n  const content = (\n    <Wrapper>\n      {mediaId ? (\n        <Image media={{ aspect: 1, id: mediaId }} />\n      ) : (\n        <Icon name=\"user\" />\n      )}\n    </Wrapper>\n  );\n\n  if (onPress) {\n    return <Touchable onPress={onPress}>{content}</Touchable>;\n  }\n  return content;\n};\n\nexport { Avatar };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native';\nimport { Theme } from '#/theme';\nimport { Link } from '#/typography';\n\ninterface Props {\n  title: string;\n  onPress?: () => any;\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  type?: 'primary' | 'secondary' | 'destructive';\n}\n\nconst Touch = styled.TouchableOpacity``;\n\nconst getColors = (type: Props['type'], theme: Theme) => {\n  if (type === 'secondary') {\n    return { bg: theme.colors.secondary, fg: '#fff' };\n  }\n  if (type === 'destructive') {\n    return { bg: 'transparent', fg: theme.colors.destructive };\n  }\n  return { bg: theme.colors.primary, fg: '#fff' };\n};\n\nconst Wrapper = styled.View<{\n  theme: Theme;\n  type: Props['type'];\n}>`\n  background: ${({ theme, type }) => getColors(type, theme).bg};\n  padding: ${({ theme }) => theme.margins.small}px;\n  border-radius: ${({ theme }) => theme.sizes.corners}px;\n  align-items: center;\n`;\n\nconst StyledLink = styled<{\n  theme: Theme;\n  type: Props['type'];\n}>(Link)`\n  color: ${({ theme, type }) => getColors(type, theme).fg};\n  font-weight: bold;\n`;\n\nconst Button: React.FC<Props> = ({\n  title,\n  onPress,\n  accessibilityHint,\n  accessibilityRole,\n  accessibilityLabel,\n  type,\n}) => (\n  <Touch\n    onPress={onPress}\n    accessible\n    accessibilityHint={accessibilityHint}\n    accessibilityRole={accessibilityRole}\n    accessibilityLabel={accessibilityLabel}\n  >\n    <Wrapper type={type}>\n      <StyledLink type={type}>{title}</StyledLink>\n    </Wrapper>\n  </Touch>\n);\n\nexport { Button };\n","import ReactDOM from 'react-dom';\nimport React, { useMemo, useEffect, ReactNode } from 'react';\n\ninterface Props {\n  visible: boolean;\n  children: ReactNode;\n}\n\nconst Modal: React.FC<Props> = ({ visible, children }) => {\n  const elm = useMemo(() => {\n    const newElm = document.createElement('div');\n    newElm.style.position = 'fixed';\n    newElm.style.display = 'flex';\n    newElm.style.flexDirection = 'column';\n    newElm.style.left = '0px';\n    newElm.style.top = '0px';\n    newElm.style.width = '100%';\n    newElm.style.height = '100%';\n    newElm.style.transition = 'transform 0.3s';\n    newElm.style.transform = 'translateY(100%)';\n    return newElm;\n  }, []);\n  useEffect(() => {\n    document.body.appendChild(elm);\n    return () => {\n      document.body.removeChild(elm);\n    };\n  }, [elm]);\n  useEffect(() => {\n    if (visible) {\n      elm.style.transform = 'translateY(0)';\n    } else {\n      elm.style.transform = 'translateY(100%)';\n    }\n  }, [elm, visible]);\n\n  return ReactDOM.createPortal(<>{children}</>, elm);\n};\n\nexport { Modal };\n","import React, { useState, useEffect, ReactNode } from 'react';\nimport * as Sentry from 'sentry-expo';\nimport styled from 'styled-components/native';\nimport { Keyboard, Platform } from 'react-native';\nimport { OverlayLoader } from '../loaders';\nimport errorImage from '#/../assets/images/error.png';\nimport { Body1, Overline } from '#/typography';\nimport { Button } from '../Button';\n\nconst KeyboardAvoiding = styled.KeyboardAvoidingView`\n  flex: 1;\n`;\n\nconst Pressable = styled.Pressable`\n  flex: 1;\n`;\n\nconst ErrorWrapper = styled.View`\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n`;\n\nconst ErrorImage = styled.Image`\n  width: 150px;\n  height: 150px;\n`;\n\ntype Props = {\n  children: ReactNode;\n  loading?: boolean;\n};\n\ntype ErrorBoundState = {\n  hasError: boolean;\n  error?: any;\n};\n\ntype ErrorBoundProps = {\n  children: ReactNode;\n};\n\nclass ErrorBoundary extends React.Component<ErrorBoundProps, ErrorBoundState> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    Sentry.Native.captureException(error, {\n      extra: errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <ErrorWrapper>\n          <ErrorImage source={errorImage} />\n          <Body1>An error has occured</Body1>\n          <Overline>{this.state.error?.toString()}</Overline>\n          <Button\n            onPress={() => this.setState({ hasError: false, error: undefined })}\n            title=\"Retry\"\n          />\n        </ErrorWrapper>\n      );\n    }\n    return <>{this.props.children}</>;\n  }\n}\n\nconst Page: React.FC<Props> = ({ children, loading }) => {\n  const [keyboardShown, setKeyboardShown] = useState(false);\n  useEffect(() => {\n    const keyboardDidShow = () => setKeyboardShown(true);\n    const keyboardDidHide = () => setKeyboardShown(false);\n    const show = Keyboard.addListener('keyboardDidShow', keyboardDidShow);\n    const hide = Keyboard.addListener('keyboardDidHide', keyboardDidHide);\n\n    return () => {\n      show.remove();\n      hide.remove();\n    };\n  }, []);\n  return (\n    <Pressable disabled={!keyboardShown} onPress={() => Keyboard.dismiss()}>\n      <KeyboardAvoiding behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        {loading && <OverlayLoader />}\n        <ErrorBoundary>{children}</ErrorBoundary>\n      </KeyboardAvoiding>\n    </Pressable>\n  );\n};\n\nexport { Page };\n","import React, { ReactNode } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\nimport { Icon } from '#/components/Icon';\nimport { Modal } from '#/components/Modal';\nimport { Row, Cell } from '#/components/Row';\nimport { Page } from '#/components/Page';\n\ninterface Props {\n  visible: boolean;\n  onClose?: () => void;\n  children: ReactNode;\n}\n\nconst Top = styled.Pressable`\n  flex: 1;\n`;\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.background};\n  width: 100%;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-offset: 0 0;\n  shadow-opacity: 1;\n  shadow-radius: 200px;\n  border-radius: 12px;\n  margin-bottom: -12px;\n`;\n\nconst Outer = styled.View`\n  flex: 1;\n`;\n\nconst Popup: React.FC<Props> = ({ visible, children, onClose }) => {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Modal visible={visible} transparent animationType=\"slide\">\n      <Page>\n        <Outer>\n          <Top onPress={onClose} />\n          <Wrapper style={{ paddingBottom: insets.bottom + 12 }}>\n            <Row\n              right={\n                <Cell onPress={onClose}>\n                  <Icon name=\"x-circle\" />\n                </Cell>\n              }\n            />\n            {children}\n          </Wrapper>\n        </Outer>\n      </Page>\n    </Modal>\n  );\n};\n\nexport { Popup };\n","import React, { useState } from 'react';\nimport { Button } from '#/components/Button';\nimport { Icon } from '#/components/Icon';\nimport { Popup } from '#/components/Popup';\nimport { Cell, Row } from '#/components/Row';\n\ninterface PostFilterProps {\n  selected?: string[];\n  feeds?: {\n    id: string;\n    name: string;\n  }[];\n  onSelect: (ids: string[]) => void;\n}\nconst PostFilter: React.FC<PostFilterProps> = ({\n  selected = [],\n  feeds = [],\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Cell onPress={() => setVisible(true)}>\n        <Icon name=\"filter\" color={selected.length > 0 ? 'primary' : 'text'} />\n      </Cell>\n      <Popup visible={visible} onClose={() => setVisible(false)}>\n        {feeds.map(feed => {\n          const isSelected = selected.includes(feed.id);\n          return (\n            <Row\n              key={feed.id}\n              onPress={\n                isSelected\n                  ? () => onSelect(selected.filter(s => s !== feed.id))\n                  : () => onSelect([...selected, feed.id])\n              }\n              left={\n                <Cell>\n                  <Icon name={isSelected ? 'check-circle' : 'circle'} />\n                </Cell>\n              }\n              title={feed.name}\n            />\n          );\n        })}\n        {selected.length > 0 && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => onSelect([])} />\n          </Row>\n        )}\n      </Popup>\n    </>\n  );\n};\n\nexport { PostFilter };\n","import React, { ReactNode } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Row, Cell } from './index';\n\ninterface Props {\n  title: string;\n  add?: () => void;\n  onPress?: () => void;\n  left?: ReactNode;\n}\n\nfunction Header({ title, add, onPress, left }: Props) {\n  return (\n    <Row\n      onPress={onPress}\n      left={left}\n      title={title}\n      background=\"header\"\n      right={\n        add && (\n          <Cell onPress={add}>\n            <Icon name=\"plus-circle\" size={18} />\n          </Cell>\n        )\n      }\n    />\n  );\n}\n\nexport { Header };\n","import React, { Fragment, ReactNode, useState } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Header } from '#/components/Row/Header';\nimport styled from 'styled-components/native';\nimport { Row, Cell } from '#/components/Row';\nimport { Body1 } from '#/typography';\n\ninterface ListProps<T> {\n  title: string;\n  items: T[];\n  getKey: (item: T) => any;\n  render: (item: T) => ReactNode;\n  add?: () => void;\n}\n\ninterface ChildProps {\n  title: string;\n  add?: () => void;\n  children?: ReactNode;\n}\n\nconst Wrapper = styled.View`\n  border-radius: 7px;\n  background: ${({ theme }) => theme.colors.background};\n  shadow-offset: 0px;\n  shadow-opacity: 0.1;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-radius: 5px;\n  overflow: hidden;\n`;\n\nfunction Group<T = any>(props: ListProps<T> | ChildProps) {\n  const [visible, setVisible] = useState(true);\n  const { title, items, getKey, render, add, children } =\n    props as ListProps<T> & ChildProps;\n  return (\n    <Row>\n      <Wrapper>\n        <Header\n          left={\n            <Cell><Icon name={visible ? 'chevron-down' : 'chevron-up'} size={18} /></Cell>\n          }\n          title={title}\n          add={add}\n          onPress={() => setVisible(!visible)}\n        />\n        {visible &&\n          items &&\n          items.map(item => (\n            <Fragment key={getKey(item)}>{render(item)}</Fragment>\n          ))}\n        {visible && children}\n        {visible && !children && (!items || items.length === 0) && (\n          <Row\n            left={\n              <Cell>\n                <Icon color=\"textShade\" name=\"maximize\" />\n              </Cell>\n            }\n          >\n            <Body1 style={{ marginLeft: 10 }} color=\"textShade\">\n              Empty\n            </Body1>\n          </Row>\n        )}\n      </Wrapper>\n    </Row>\n  );\n}\n\nexport { Group };\n","import React from 'react';\nimport { KeyboardType } from 'react-native';\nimport styled, { useTheme } from 'styled-components/native';\n\ninterface Props {\n  label: string;\n  value: string;\n  onChangeText?: (text: string) => any;\n  type?: KeyboardType;\n  autoCorrect?: boolean;\n  secure?: boolean;\n}\n\nconst InputField = styled.TextInput`\n  color: ${({ theme }) => theme.colors.text};\n  padding: ${({ theme }) => theme.margins.small}px 0;\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n  width: 100%;\n`;\n\nconst Input: React.FC<Props> = ({\n  label,\n  value,\n  onChangeText,\n  type,\n  autoCorrect,\n  secure,\n}) => {\n  const theme = useTheme();\n  return (\n    <InputField\n      value={value}\n      keyboardType={type}\n      autoCapitalize={'none'}\n      autoCorrect={autoCorrect}\n      secureTextEntry={secure}\n      placeholderTextColor={theme.colors.textShade}\n      placeholder={label}\n      onChangeText={onChangeText}\n    />\n  );\n};\n\nexport { Input };\n","import React, { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { Popup } from '#/components/Popup';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Row } from '#/components/Row';\nimport { Button } from '#/components/Button';\n\ninterface Props<T> {\n  visible: boolean;\n  onClose: () => void;\n  selected?: T;\n  allowClear?: boolean;\n  items: T[];\n  onSelect: (item?: T) => void;\n  renderSelect: (item: T) => ReactNode;\n  getKey: (item: T) => any;\n  search?: (term: string, items: T[]) => T[];\n  create?: (term: string) => Promise<T>;\n}\n\nconst Touch = styled.TouchableOpacity``;\nconst Content = styled.View`\n  min-height: 40%;\n`;\n\nfunction Dialog<T>({\n  visible,\n  onClose,\n  items,\n  onSelect,\n  renderSelect,\n  getKey,\n  search,\n  create,\n  allowClear,\n}: Props<T>) {\n  const [searchInput, setSeachInput] = useState('');\n  const results = useMemo(() => {\n    if (!search || !searchInput) {\n      return items;\n    }\n    return search(searchInput, items);\n  }, [items, searchInput, search]);\n  const hide = useCallback(() => {\n    setSeachInput('');\n    onClose();\n  }, [setSeachInput, onClose]);\n\n  const select = useCallback(\n    (item: T) => {\n      onSelect(item);\n      hide();\n    },\n    [onSelect, hide]\n  );\n  const createItem = useCallback(async () => {\n    if (!create) {\n      return;\n    }\n    const item = await create(searchInput);\n    onSelect(item);\n    hide();\n  }, [create, searchInput, hide]);\n  return (\n    <Popup visible={visible} onClose={hide}>\n      {search && (\n        <Row>\n          <Input\n            label=\"Search\"\n            value={searchInput}\n            onChangeText={setSeachInput}\n          />\n        </Row>\n      )}\n      <Content>\n        {create && results.length === 0 && searchInput && (\n          <Row>\n            <Button title={`Create ${searchInput}`} onPress={createItem} />\n          </Row>\n        )}\n        {results.length > 0 && (\n          <FlatList\n            data={results}\n            keyExtractor={getKey}\n            style={{ flex: 1 }}\n            renderItem={({ item }) => (\n              <Touch onPress={() => select(item)}>{renderSelect(item)}</Touch>\n            )}\n          />\n        )}\n        {allowClear && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => select(undefined)} />\n          </Row>\n        )}\n      </Content>\n    </Popup>\n  );\n}\n\nexport { Dialog };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Row, Cell } from '#/components/Row';\nimport { Button } from '#/components/Button';\nimport { Jumbo } from '#/typography';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\ninterface Props {\n  title: string;\n  back?: boolean;\n  actions?: {\n    title: string;\n    onPress?: () => any;\n  }[];\n  right?: ReactNode;\n}\n\nconst Wrapper = styled.View``;\n\nconst Header: React.FC<Props> = ({ title, back, actions, right }) => {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Wrapper style={{ paddingTop: insets.top }}>\n      <Row\n        left={\n          !!back && (\n            <Cell onPress={() => navigation.goBack()}>\n              <Ionicons name=\"arrow-back-circle\" size={26} />\n            </Cell>\n          )\n        }\n        right={\n          (actions || right) && (\n            <>\n              {actions &&\n                actions.map(action => (\n                  <Button\n                    key={action.title}\n                    title={action.title}\n                    onPress={action.onPress}\n                  />\n                ))}\n              {right}\n            </>\n          )\n        }\n      >\n        <Jumbo>{title}</Jumbo>\n      </Row>\n    </Wrapper>\n  );\n};\n\nexport { Header };\n","import styled, { ThemeProvider } from 'styled-components/native';\nimport ImageView from 'react-native-image-viewing';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\nimport { Image } from '../Image';\nimport { Cell, Row } from '../Row';\nimport { useContext, useMemo, useState } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Icon } from '../Icon';\nimport { dark } from '#/theme';\nimport { useSaveImage } from './save';\n\nconst ScrollWrapper = styled.ScrollView<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\n\nconst ScrollContent = styled.View`\n  flex-direction: row;\n`;\n\nconst Touchable = styled.TouchableWithoutFeedback``;\n\nconst ScrollPage = styled.View<{\n  width: number;\n}>`\n  width: ${({ width }) => width}px;\n`;\n\nconst Wrapper = styled.View`\n  border-radius: 5px;\n  overflow: hidden;\n`;\n\ntype PagerProps = {\n  current: number;\n  total: number;\n};\n\nconst DotWrapper = styled.View`\n  margin-top: 10px;\n  flex-direction: row;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Dot = styled.View<{\n  selected: boolean;\n}>`\n  width: 6px;\n  height: 6px;\n  background: ${({ selected, theme }) => (selected ? theme.colors.primary : '#ccc')};\n  margin: 0 5px;\n  border-radius: 3px;\n`;\n\nconst Pager: React.FC<PagerProps> = ({ current, total }) => {\n  const dots = useMemo(\n    () => new Array(total).fill(undefined).map((_, i) => i),\n    [total]\n  );\n\n  return (\n    <DotWrapper>\n      {dots.map(i => (\n        <Dot key={i} selected={i === current} />\n      ))}\n    </DotWrapper>\n  );\n};\n\ntype GalleryProps = {\n  media: DeepPartial<MediaModel[]>;\n};\n\nconst Gallery: React.FC<GalleryProps> = ({ media }) => {\n  const [width, setWidth] = useState(0);\n  const [offset, setOffset] = useState(0);\n  const saveImage = useSaveImage();\n  const { domain, token } = useContext(ServerContext);\n  const currentIndex = useMemo(\n    () => Math.round(offset / width) || 0,\n    [offset, width]\n  );\n  const [lightboxVisible, setLightboxVisible] = useState(false);\n  const lightboxImages = useMemo(\n    () =>\n      media.map(item => ({\n        uri: `${domain}/api/media/${item?.id}`,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })),\n    [domain, token, media]\n  );\n  const currentMedia = useMemo(\n    () => media[currentIndex],\n    [media, currentIndex]\n  );\n  const currentAspect = useMemo(\n    () => currentMedia?.aspect || 1, // use current media aspect\n    [currentMedia]\n  );\n\n  if (media.length === 0) {\n    return <></>;\n  }\n  const Lightbox = () => (\n    <ImageView\n      images={lightboxImages}\n      imageIndex={currentIndex}\n      visible={lightboxVisible}\n      onRequestClose={() => setLightboxVisible(false)}\n      FooterComponent={() => (\n        <ThemeProvider theme={dark}>\n          <Row\n            right={\n              <Cell onPress={() => saveImage(lightboxImages[currentIndex].uri)}>\n                <Icon name=\"download\" />\n              </Cell>\n            }\n          />\n          <Row />\n        </ThemeProvider>\n      )}\n    />\n  );\n  if (media.length === 1) {\n    return (\n      <Row>\n        <Lightbox />\n        <Touchable onPress={() => setLightboxVisible(true)}>\n          <Wrapper>\n            <Image media={media[0]!} />\n          </Wrapper>\n        </Touchable>\n      </Row>\n    );\n  }\n\n  return (\n    <Row>\n      <Lightbox />\n      <Wrapper>\n        <ScrollWrapper\n          horizontal\n          scrollEventThrottle={16}\n          snapToInterval={width}\n          showsHorizontalScrollIndicator={false}\n          decelerationRate={0}\n          snapToAlignment=\"center\"\n          disableIntervalMomentum\n          height={width / currentAspect}\n          onScroll={evt => {\n            const offset = evt.nativeEvent.contentOffset.x;\n            setOffset(offset);\n          }}\n          onLayout={evt => {\n            const currentWidth = evt.nativeEvent.layout.width;\n            if (currentWidth !== width) {\n              setWidth(currentWidth);\n            }\n          }}\n        >\n          <Touchable onPress={() => setLightboxVisible(true)}>\n            <ScrollContent>\n              {media.map(item => (\n                <ScrollPage key={item!.id} width={width}>\n                  <Image media={item!} />\n                </ScrollPage>\n              ))}\n            </ScrollContent>\n          </Touchable>\n        </ScrollWrapper>\n      </Wrapper>\n      <Pager current={currentIndex} total={media.length} />\n    </Row>\n  );\n};\n\nexport { Gallery };\n","import * as MediaLibrary from 'expo-media-library';\nimport * as FileSystem from 'expo-file-system';\nimport { useCallback, useContext } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Alert } from 'react-native';\n\nexport const useSaveImage = () => {\n  const { token } = useContext(ServerContext);\n  const saveImage = useCallback(\n    async (url: string) => {\n      try {\n        const download = FileSystem.createDownloadResumable(\n          url,\n          FileSystem.cacheDirectory + 'download.jpeg',\n          { headers: { Authorization: `bearer: ${token}`}},\n        );\n        const result = await download.downloadAsync();\n        if (!result) {\n          throw new Error('failed');\n        }\n        MediaLibrary.saveToLibraryAsync(result.uri);\n        Alert.alert('Image saved');\n      } catch (err) {\n        Alert.alert(`Failed: ${err.toString()}`)\n      }\n    },\n    [token]\n  );\n\n  return saveImage;\n};\n","import { ServerContext } from '#/context/server';\nimport { useCallback, useContext } from 'react';\nimport { UploadFile } from './posts';\n\nexport const useCreateMedia = () => {\n  const { domain, token } = useContext(ServerContext);\n  const createMedia = useCallback(\n    async (media: UploadFile[]) => {\n      const ids: string[] = [];\n      for (let file of media) {\n        const data = new FormData();\n        data.append('media', file as any);\n        const response = await fetch(`${domain}/api/media`, {\n          method: 'POST',\n          body: data,\n          headers: {\n            'content-type': 'multipart/form-data',\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        if (!response.ok) {\n          console.error(await response.text());\n          throw new Error('Could not upload image');\n        }\n        const json = await response.json();\n        ids.push(json.ids[0]);\n      };\n      return ids;\n    },\n    [token, domain]\n  );\n  return createMedia;\n};\n","import { HomeContext } from '#/context/home';\nimport { ServerContext } from '#/context/server';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport {\n  useCreatePostMutation,\n  useProfileQuery,\n  useRemovePostMutation,\n} from './graphql';\nimport { useCreateMedia } from './media';\nimport { useErrorNotification } from './utils';\n\nexport type UploadFile = {\n  uri: string;\n  name: string;\n  type: string;\n};\n\nexport const useCreatePostData = () => {\n  const { data, refetch, loading, error } = useProfileQuery();\n  useErrorNotification(error);\n  const feeds = useMemo(\n    () => data?.profile?.feeds.filter(f => f.accessType === 'admin'),\n    [data]\n  );\n\n  return {\n    feeds,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nexport const useCreatePost = () => {\n  const { domain, token } = useContext(ServerContext);\n  const [createPostMutation, { error }] = useCreatePostMutation();\n  useErrorNotification(error);\n  const createMedia = useCreateMedia();\n  const createPost = useCallback(\n    async (feed: string, body: string, media: UploadFile[]) => {\n      const ids = await createMedia(media);\n      await createPostMutation({\n        variables: {\n          params: {\n            feed,\n            body,\n            media: ids,\n          },\n        },\n      });\n    },\n    [createPostMutation, token, domain]\n  );\n\n  return createPost;\n};\n\nexport const useRemovePost = () => {\n  const [loading, setLoading] = useState(false);\n  const { refetch } = useFeed();\n  const [removePostMutation, { error }] = useRemovePostMutation();\n  useErrorNotification(error);\n  const removePost = useCallback(\n    async (id: string) => {\n      setLoading(true);\n      try {\n        await removePostMutation({\n          variables: { removePostId: id },\n        });\n        await refetch();\n      } finally {\n        setLoading(false);\n      }\n    },\n    [removePostMutation],\n  )\n\n  return { removePost, loading };\n};\n\nexport const useFeed = () => {\n  const context = useContext(HomeContext);\n  return context;\n};\n","import { PostModel, useRemovePostMutation } from '#/hooks/graphql';\nimport styled from 'styled-components/native';\nimport { DeepPartial } from '#/helpers/types';\nimport { Cell, Row } from '#/components/Row';\nimport { Icon } from '#/components/Icon';\nimport { Gallery } from '#/components/gallery';\nimport { Body1 } from '#/typography';\nimport { Avatar } from '#/components/avatar';\nimport { useNavigation } from '@react-navigation/native';\nimport { Popup } from '#/components/Popup';\nimport { useCallback, useState } from 'react';\nimport { useProfile } from '#/hooks/profile';\nimport { useFeed, useRemovePost } from '#/hooks/posts';\nimport { Button } from '#/components/Button';\nimport { OverlayLoader } from '#/components/loaders';\n\ntype PostRowProps = {\n  post: DeepPartial<PostModel>;\n  fullWidth: boolean;\n};\n\nconst Wrapper = styled.View<{\n  fullWidth: boolean;\n}>`\n  ${({ fullWidth, theme }) => fullWidth ? `\n    border-top-width: 7px; \n    border-color: ${theme.colors.shade};\n  ` : `\n    background-color: ${theme.colors.shade};\n    margin: 7px;\n    border-radius: 7px;\n  `}\n`;\n\nconst PostRow: React.FC<PostRowProps> = ({ post, fullWidth }) => {\n  const navigation = useNavigation();\n  const { removePost, loading } = useRemovePost();\n  const [menuVisible, setMenuVisible] = useState(false);\n  return (\n    <Wrapper fullWidth={fullWidth}>\n      {loading && <OverlayLoader />}\n      <Row\n        left={\n          <Cell>\n            <Avatar mediaId={post?.creator?.avatar!} />\n          </Cell>\n        }\n        right={\n          (\n            <>\n              <Cell onPress={() => navigation.navigate('Comments', { id: post.id })}>\n                <Icon name=\"message-circle\" color=\"text\" size={20} />\n                <Body1>{post.commentCount}</Body1>\n              </Cell>\n              <Cell onPress={() => setMenuVisible(true)}>\n                <Icon name=\"more-horizontal\" color=\"text\" size={20} />\n              </Cell>\n            </>\n          )\n        }\n        description={post.body}\n        overline={post.creator?.name || post.creator?.username}\n      />\n      {post.media && <Gallery media={post!.media} />}\n      <Popup onClose={() => setMenuVisible(false)} visible={menuVisible}>\n        <Button onPress={() => removePost(post.id!)} title=\"Remove\" type=\"destructive\" />\n      </Popup>\n    </Wrapper>\n  );\n};\n\nexport { PostRow };\n","import { useCallback } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport styled from 'styled-components/native';\nimport { UploadFile } from '#/hooks/posts';\nimport { Icon } from '../Icon';\nimport { Row } from '../Row';\n\ntype Props = {\n  files: UploadFile[];\n  onUpdate: (files: UploadFile[]) => void;\n};\n\nconst Image = styled.Image`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 5px;\n`;\n\nconst Spacer = styled.View`\n  padding-bottom: 100%;\n`;\n\nconst Item = styled.View`\n  width: 33%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Wrapper = styled.View`\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst Button = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n  justify-content: center;\n  align-items: center;\n  background: #ddd;\n  border-radius: 5px;\n`;\n\nconst ImageWrapper = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n`;\n\nconst AddImages: React.FC<Props> = ({ files, onUpdate }) => {\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    onUpdate([...files, file]);\n  }, [files, onUpdate]);\n\n  const remove = useCallback(\n    (file: UploadFile) => {\n      onUpdate(files.filter(f => f !== file));\n    },\n    [files, onUpdate]\n  );\n\n  return (\n    <Row>\n      <Wrapper>\n        {files.map(m => (\n          <Item key={m.uri}>\n            <Spacer />\n            <ImageWrapper onPress={() => remove(m)}>\n              <Image source={{ uri: m.uri }} />\n            </ImageWrapper>\n          </Item>\n        ))}\n        <Item>\n          <Spacer />\n          <Button onPress={pickImage}>\n            <Icon name=\"plus-circle\" size={40} />\n          </Button>\n        </Item>\n      </Wrapper>\n    </Row>\n  );\n};\n\nexport { AddImages };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { DeepPartial } from '#/helpers/types';\nimport { FeedModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype FeedInputProps = {\n  label: string;\n  feeds: DeepPartial<FeedModel>[];\n  selected?: DeepPartial<FeedModel>;\n  onSelect: (feed?: DeepPartial<FeedModel>) => void;\n};\n\nconst FeedInput: React.FC<FeedInputProps> = ({\n  label,\n  feeds,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={feeds || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name} />}\n      />\n    </>\n  );\n};\n\nexport { FeedInput };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { PartialDeep } from 'type-fest';\nimport { UserModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype UserInputProps = {\n  label: string;\n  users: PartialDeep<UserModel>[];\n  selected?: PartialDeep<UserModel>;\n  onSelect: (user?: PartialDeep<UserModel>) => void;\n};\n\nconst UserInput: React.FC<UserInputProps> = ({\n  label,\n  users,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || selected?.username || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={users || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name || item.username} />}\n      />\n    </>\n  );\n};\n\nexport { UserInput };\n","import { Row } from '#/components/Row';\nimport { Dialog } from '#/components/Dialog';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype NameValueInputItem = {\n  key: string;\n  value: any;\n};\n\ntype NameValueInputProps = {\n  label: string;\n  items: NameValueInputItem[];\n  selected?: NameValueInputItem;\n  onSelect: (item?: NameValueInputItem) => void;\n};\n\nconst NameValueInput: React.FC<NameValueInputProps> = ({\n  label,\n  items,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.key || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={items}\n        getKey={item => item.key}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.key} />}\n      />\n    </>\n  );\n};\n\nexport { NameValueInputItem, NameValueInput };\n","import { ServerContext } from '#/context/server';\nimport { useRegisterPushNotificationMutation } from '#/hooks/graphql';\nimport React, { useContext, useEffect } from 'react';\n\nconst PushRegistation: React.FC<{}> = () => {\n  const { pushToken } = useContext(ServerContext);\n  const [registerPushMutation] = useRegisterPushNotificationMutation();\n\n  useEffect(() => {\n    if (!pushToken) {\n      return;\n    }\n    registerPushMutation({\n      variables: {\n        token: pushToken,\n      },\n    });\n  }, [pushToken]);\n\n  return <></>;\n};\n\nexport { PushRegistation };\n","import { ProfileContext } from '#/context/profile';\nimport { useCallback, useContext } from 'react';\nimport { useSetProfileAvatarMutation } from './graphql';\nimport { useCreateMedia } from './media';\nimport { UploadFile } from './posts';\n\nexport const useSetAvatar = () => {\n  const createMedia = useCreateMedia();\n  const [setAvatarMutation] = useSetProfileAvatarMutation();\n\n  const setAvatar = useCallback(async (media?: UploadFile) => {\n    const [id] = media ? await createMedia([media]) : [];\n    await setAvatarMutation({\n      variables: {\n        mediaId: id,\n      },\n    });\n  }, []);\n\n  return setAvatar;\n};\n\nexport const useProfile = () => {\n  const context = useContext(ProfileContext);\n  return context;\n};\n","import React, { useCallback, useState, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { UploadFile, useCreatePost } from '#/hooks/posts';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { Page, FeedInput, AddImages, Row, Input, Button } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\nimport { useFeed } from '#/hooks/posts';\n\nconst Wrapper = styled.ScrollView`\n  flex: 1;\n`;\nconst Outer = styled.View`\n  flex: 1;\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n\nconst AddPostScreen: React.FC<AddScreenNavigationProp> = ({ navigation }) => {\n  const [loading, setLoading] = useState(false);\n  const { refetch: refetchPosts } = useFeed();\n  const { feeds, refetch, loading: profileLoading } = useProfile();\n  const [selectedFeed, setSelectedFeed] = useState<any>();\n  const [media, setMedia] = useState<UploadFile[]>([]);\n  const [body, setBody] = useState('');\n  const createPost = useCreatePost();\n  const adminFeeds = useMemo(\n    () => feeds?.filter(f => f.accessType === 'admin').map(f => f.feed) || [],\n    [feeds]\n  );\n\n  const submit = useCallback(async () => {\n    setLoading(true);\n    await createPost(selectedFeed.id, body, media);\n    await refetchPosts();\n    setLoading(false);\n    setSelectedFeed(undefined);\n    setMedia([]);\n    setBody('');\n    navigation.navigate('Feed', {});\n  }, [selectedFeed, body, media]);\n  useFocusEffect(\n    useCallback(() => {\n      refetch();\n    }, [refetch])\n  );\n\n  if (!feeds) {\n    return <></>;\n  }\n\n  return (\n    <Page loading={profileLoading || loading}>\n      <Outer>\n        <Header title=\"Create post\" />\n        <Wrapper>\n          <AddImages files={media} onUpdate={setMedia} />\n          <FeedInput\n            label=\"Feed\"\n            feeds={adminFeeds}\n            selected={selectedFeed}\n            onSelect={setSelectedFeed}\n          />\n          <Row overline=\"Content\">\n            <Input\n              label=\"Tell your story...\"\n              value={body}\n              onChangeText={setBody}\n            />\n          </Row>\n        </Wrapper>\n        <Row>\n          {!!selectedFeed && media.length > 0 && (\n            <Button onPress={submit} title=\"Create\" />\n          )}\n        </Row>\n      </Outer>\n    </Page>\n  );\n};\n\nexport { AddPostScreen };\n","import React, { useCallback, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { ListRenderItem, RefreshControl, Dimensions } from 'react-native';\nimport MasonryList from '@react-native-seoul/masonry-list';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { useFeed } from '#/hooks/posts';\nimport { Page } from '#/components/Page';\nimport { PostFilter, PostRow } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\n\nconst Seperator = styled.View`\n  margin-top: 15px;\n  border-bottom-width: 5px;\n  margin-bottom: 15px;\n  border-color: ${({ theme }) => theme.colors.shade};\n`;\nconst Wrapper = styled.View`\n  background-color: ${({ theme }) => theme.colors.background};\n  flex: 1;\n`;\n\nconst FeedScreen: React.FC<AddScreenNavigationProp> = () => {\n  const { posts, loading, refetch, feeds: selectedFeeds, setFeeds: setSelectedFeeds } = useFeed();\n  const { feeds } = useProfile();\n\n  const userFeeds = useMemo(() => feeds.map(f => f.feed), [feeds]);\n  const columns = useMemo(\n    () => Math.ceil(Dimensions.get('window').width / 500),\n    [],\n  );\n\n  const renderItem: ListRenderItem<typeof posts[0]> = useCallback(\n    ({ item }) => <PostRow fullWidth={columns <= 1} key={item.id} post={item} />,\n    [columns]\n  );\n\n  return (\n    <Page>\n      <Wrapper>\n        <Header\n          key=\"test\"\n          title=\"All posts\"\n          right={\n            <>\n              {userFeeds.length > 1 && (\n                <PostFilter\n                  feeds={userFeeds}\n                  selected={selectedFeeds}\n                  onSelect={setSelectedFeeds}\n                />\n              )}\n            </>\n          }\n        />\n        <MasonryList\n          data={posts}\n          keyExtractor={(item: any) => item.id}\n          renderItem={renderItem}\n          numColumns={columns}\n          ItemSeparatorComponent={Seperator}\n          refreshControl={\n            <RefreshControl refreshing={loading} onRefresh={refetch} />\n          }\n        />\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { FeedScreen };\n","import {\n  useAddUserToFeedMutation,\n  useCreateFeedMutation,\n  useRemoveUserFromFeedMutation,\n  useFeedQuery,\n  useAllFeedsQuery,\n  useRemoveFeedMutation,\n} from '#/hooks/graphql';\nimport { useCallback, useMemo } from 'react';\nimport { useErrorNotification } from './utils';\n\nconst useFeed = (id: string) => {\n  const { data, refetch, loading, error } = useFeedQuery({\n    variables: { feedId: id },\n  });\n  useErrorNotification(error);\n  const feed = useMemo(() => data?.feed, [data]);\n  return {\n    feed,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nconst useAllFeeds = () => {\n  const { data, refetch, loading, error } = useAllFeedsQuery();\n  useErrorNotification(error);\n  const feeds = useMemo(() => data?.allFeeds || [], [data]);\n  return {\n    feeds,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nconst useCreateFeed = () => {\n  const [createFeedMutation, { error }] = useCreateFeedMutation();\n  useErrorNotification(error);\n  const createFeed = useCallback(\n    async (name: string) => {\n      await createFeedMutation({\n        variables: {\n          name,\n        },\n      });\n    },\n    [createFeedMutation]\n  );\n\n  return createFeed;\n};\n\nconst useAddUserToFeed = () => {\n  const [addUserToFeedMutation, {error}] = useAddUserToFeedMutation();\n  useErrorNotification(error);\n  const addUserToFeed = useCallback(\n    async (feedId: string, userId: string, accessType: string) => {\n      await addUserToFeedMutation({\n        variables: {\n          feedId,\n          userId,\n          accessType,\n        },\n      });\n    },\n    [addUserToFeedMutation]\n  );\n\n  return addUserToFeed;\n};\n\nconst useRemoveUserFromFeed = () => {\n  const [removeUserFromFeedMutation, { error }] = useRemoveUserFromFeedMutation();\n  useErrorNotification(error);\n  const removeUserFromFeed = useCallback(\n    async (feedId: string, userId: string) => {\n      await removeUserFromFeedMutation({\n        variables: {\n          feedId,\n          userId,\n        },\n      });\n    },\n    [removeUserFromFeedMutation]\n  );\n\n  return removeUserFromFeed;\n};\n\nexport const useRemoveFeed = () => {\n  const [removeFeedMutation, { error }] = useRemoveFeedMutation();\n  useErrorNotification(error);\n  const removeFeed = useCallback(\n    async (id: string) => {\n      await removeFeedMutation({\n        variables: { feedId: id },\n      });\n    },\n    [removeFeedMutation],\n  );\n\n  return removeFeed;\n};\n\nexport { useAllFeeds, useFeed, useCreateFeed, useAddUserToFeed, useRemoveUserFromFeed };\n","import { useCallback, useMemo } from 'react';\nimport { useInviteProfileMutation, useRemoveUserMutation, useUsersQuery } from './graphql';\nimport { useErrorNotification } from './utils';\n\nexport const useUsers = () => {\n  const { data, refetch, loading, error } = useUsersQuery();\n  useErrorNotification(error);\n  const users = useMemo(() => data?.users, [data]);\n  return {\n    users,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nexport const useSendInvite = () => {\n  const [sendInviteMutation, { error }] = useInviteProfileMutation();\n  useErrorNotification(error);\n  const sendInvite = useCallback(\n    async (email: string) => {\n      await sendInviteMutation({\n        variables: { email },\n      });\n    },\n    [sendInviteMutation],\n  );\n\n  return sendInvite;\n};\n\nexport const useRemoveUser = () => {\n  const [removeUserMutation, { error }] = useRemoveUserMutation();\n  useErrorNotification(error);\n  const removeUser = useCallback(\n    async (id: string) => {\n      await removeUserMutation({\n        variables: { userId: id },\n      });\n    },\n    [removeUserMutation],\n  );\n\n  return removeUser;\n};\n","import { useCallback, useContext, useState } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport {\n  Avatar,\n  Button,\n  Cell,\n  Group,\n  Header,\n  Icon,\n  Input,\n  Page,\n  Popup,\n  Row,\n} from '#/components';\nimport { useProfile, useSetAvatar } from '#/hooks/profile';\nimport { ProfileMainScreenNavigationProp } from '#/router/types';\nimport { useCreateFeed } from '#/hooks/feeds';\nimport { ServerContext } from '#/context/server';\nimport { useSendInvite } from '#/hooks/users';\nimport styled from 'styled-components/native';\n\nconst Wrapper = styled.ScrollView`\n  flex: 1;\n`\n\nconst ProfileScreen: React.FC<ProfileMainScreenNavigationProp> = ({\n  navigation,\n}) => {\n  const { profile, feeds, refetch } = useProfile();\n  const { logout } = useContext(ServerContext);\n  const createFeed = useCreateFeed();\n  const [addFeedVisible, setAddFeedVisible] = useState(false);\n  const [inviteVisible, setInviteVisible] = useState(false);\n  const [inviteEmail, setInviteEmail] = useState('');\n  const [feedName, setFeedName] = useState('');\n  const setAvatar = useSetAvatar();\n  const sendInvite = useSendInvite();\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    await setAvatar(file);\n    await refetch();\n  }, []);\n\n  const saveAddFeed = useCallback(async () => {\n    await createFeed(feedName);\n    setFeedName('');\n    setAddFeedVisible(false);\n    await refetch();\n  }, [feedName, createFeed]);\n\n  const sendInviteAction = useCallback(async () => {\n    await sendInvite(inviteEmail);\n    setInviteEmail('');\n    setInviteVisible(false);\n    await refetch();\n  }, [inviteEmail, sendInvite]);\n\n  return (\n    <Page>\n      <Wrapper>\n        <Header title=\"Profile\" />\n        <Row\n          left={\n            <Cell>\n              <Avatar\n                mediaId={profile?.avatar || undefined}\n                onPress={pickImage}\n              />\n            </Cell>\n          }\n          title={profile?.name || profile?.username}\n        />\n        <Popup visible={addFeedVisible} onClose={() => setAddFeedVisible(false)}>\n          <Row>\n            <Input label=\"Name\" value={feedName} onChangeText={setFeedName} />\n          </Row>\n          <Row>\n            <Button title=\"Save\" onPress={saveAddFeed} />\n          </Row>\n        </Popup>\n        <Group\n          title=\"My feeds\"\n          items={feeds}\n          getKey={item => item.feed.id}\n          add={\n            profile?.admin\n              ? () => {\n                  setAddFeedVisible(true);\n                }\n              : undefined\n          }\n          render={item => (\n            <Row\n              title={item.feed.name}\n              overline={item.accessType}\n              right={\n                <Cell>\n                  <Button title=\"Leave\" type=\"destructive\" />\n                </Cell>\n              }\n              onPress={() => {\n                navigation.navigate('FeedEdit', { id: item.feed.id });\n              }}\n            />\n          )}\n        />\n        {profile?.admin && (\n          <Group title=\"Admin\">\n            <Row\n              title=\"Invite\"\n              onPress={() => setInviteVisible(true)}\n              left={(\n                <Cell><Icon name=\"user-plus\" color=\"text\" /></Cell>\n              )}\n            />\n            <Row\n              title=\"Users\"\n              onPress={() => navigation.navigate('AdminUsers', {})}\n              left={(\n                <Cell><Icon name=\"users\" color=\"text\" /></Cell>\n              )}\n              right={(\n                <Cell><Icon name=\"chevron-right\" color=\"text\" /></Cell>\n              )}\n            />\n            <Row\n              title=\"Feeds\"\n              onPress={() => navigation.navigate('AdminFeeds', {})}\n              left={(\n                <Cell><Icon name=\"layers\" color=\"text\" /></Cell>\n              )}\n              right={(\n                <Cell><Icon name=\"chevron-right\" color=\"text\" /></Cell>\n              )}\n            />\n            <Popup visible={inviteVisible} onClose={() => setInviteVisible(false)}>\n              <Row>\n                <Input label=\"Email\" value={inviteEmail} onChangeText={setInviteEmail} />\n              </Row>\n              <Row>\n                <Button title=\"Send\" onPress={sendInviteAction} />\n              </Row>\n            </Popup>\n          </Group>\n        )}\n        <Row>\n          <Button title=\"Logout\" type=\"destructive\" onPress={logout} />\n        </Row>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { ProfileScreen };\n","import {\n  Group,\n  NameValueInput,\n  Header,\n  Input,\n  Page,\n  Popup,\n  Row,\n  UserInput,\n  NameValueInputItem,\n  Button,\n  Cell,\n} from '#/components';\nimport {\n  useAddUserToFeed,\n  useFeed,\n  useRemoveUserFromFeed,\n} from '#/hooks/feeds';\nimport { UserModel } from '#/hooks/graphql';\nimport { useUsers } from '#/hooks/users';\nimport { FeedEditScreenNavigationProp } from '#/router/types';\nimport { useCallback, useState } from 'react';\nimport { PartialDeep } from 'type-fest';\n\nconst accessTypes = [\n  { key: 'Admin', value: 'admin' },\n  { key: 'Moderator', value: 'moderator' },\n  { key: 'Writer', value: 'writer' },\n  { key: 'Reader', value: 'reader' },\n];\n\nconst FeedEditScreen: React.FC<FeedEditScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const { feed, refetch } = useFeed(id);\n  const { users } = useUsers();\n  const removeUserFromFeed = useRemoveUserFromFeed();\n  const addUserToFeed = useAddUserToFeed();\n  const [addUserVisible, setAddUserVisible] = useState(false);\n  const [addUserSelected, setAddUserSelected] =\n    useState<PartialDeep<UserModel>>();\n  const [addUserAccessType, setAddUserAccessType] =\n    useState<NameValueInputItem>();\n\n  const addUser = useCallback(async () => {\n    await addUserToFeed(id, addUserSelected!.id!, addUserAccessType!.value);\n    setAddUserSelected(undefined);\n    setAddUserAccessType(undefined);\n    setAddUserVisible(false);\n    await refetch();\n  }, [id, addUserSelected, addUserAccessType]);\n\n  const removeUser = useCallback(\n    async (userId: string) => {\n      await removeUserFromFeed(id, userId);\n      await refetch();\n    },\n    [id, removeUserFromFeed, refetch]\n  );\n\n  if (!feed) {\n    return <></>;\n  }\n\n  return (\n    <Page>\n      <Header back title=\"Feed\" />\n      <Row>\n        <Input label=\"Name\" value={feed.name} />\n      </Row>\n      <Group\n        title=\"Users\"\n        add={() => {\n          setAddUserVisible(true);\n        }}\n        items={feed.users}\n        getKey={relation => relation.user.id}\n        render={relation => (\n          <Row\n            overline={relation.accessType}\n            title={relation.user.name || relation.user.username}\n            right={\n              <Cell>\n                <Button\n                  title=\"Remove\"\n                  onPress={() => removeUser(relation.user.id)}\n                />\n              </Cell>\n            }\n          />\n        )}\n      />\n      <Popup visible={addUserVisible} onClose={() => setAddUserVisible(false)}>\n        <UserInput\n          label=\"User\"\n          selected={addUserSelected}\n          onSelect={user => setAddUserSelected(user!)}\n          users={users}\n        />\n        <NameValueInput\n          label=\"Access type\"\n          selected={addUserAccessType}\n          onSelect={accessType => setAddUserAccessType(accessType!)}\n          items={accessTypes}\n        />\n        {!!addUserAccessType && !!addUserSelected && (\n          <Row>\n            <Button title=\"Save\" onPress={addUser} />\n          </Row>\n        )}\n      </Popup>\n    </Page>\n  );\n};\n\nexport { FeedEditScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { ServerContext } from '#/context/server';\nimport { Header, Icon, Page } from '#/components';\nimport { LoginScreenNavigationProp } from '#/router/types';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background: ${({ theme }) => theme.colors.shade};\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\nconst Text = styled.Text``;\n\nconst LoginScreen: React.FC<LoginScreenNavigationProp> = ({ navigation }) => {\n  const { login } = useContext(ServerContext);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n  const [domain, setDomain] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const doLogin = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await login(domain, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [domain, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          {error && <Text>{error.toString()}</Text>}\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"server\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Domain\"\n              value={domain}\n              onChangeText={setDomain}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Secret\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doLogin} title=\"Login\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { LoginScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { AcceptInvitationScreenNavigationProp } from '#/router/types';\nimport { ServerContext } from '#/context/server';\nimport { Text } from 'react-native';\nimport { Header, Icon, Page } from '#/components';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  align-items: center;\n  justify-content: center;\n  padding: 0 20px;\n  flex: 1;\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\n\nconst AcceptInvitationScreen: React.FC<\n  AcceptInvitationScreenNavigationProp\n> = ({ route, navigation }) => {\n  const { inviteCode } = route.params;\n  const { acceptInvitation } = useContext(ServerContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n\n  const doAccept = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await acceptInvitation(inviteCode, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [inviteCode, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          <Row description=\"You are almost there! Just pick your username and password and off we go!\" />\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Password\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doAccept} title=\"Let's GO\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { AcceptInvitationScreen };\n","\nimport {\n  Header,\n  Input,\n  Page,\n  Row,\n  Button,\n  Cell,\n  Avatar,\n} from '#/components';\nimport { useCreateCommentMutation, usePostQuery } from '#/hooks/graphql';\nimport { CommentsScreenNavigationProp } from '#/router/types';\nimport { useCallback, useState } from 'react';\nimport { FlatList } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\n\nconst Content = styled.View`\n  flex: 1;\n`\n\nconst Wrapper = styled.View`\n  flex: 1;\n`\n\nconst CommentsScreen: React.FC<CommentsScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const insets = useSafeAreaInsets();\n  const [content, setContent] = useState('');\n  const [createCommentMutation] = useCreateCommentMutation();\n  const { data, refetch } = usePostQuery({\n    variables: {\n      postId: id,\n    },\n  });\n\n  const createComment = useCallback(\n    async () => {\n      await createCommentMutation({\n        variables: {\n          params: {\n            content,\n            post: id,\n          }\n        }\n      });\n      setContent('');\n      await refetch();\n    },\n    [content, id, createCommentMutation, refetch],\n  )\n  return (\n    <Page>\n      <Header title=\"Comments\" />\n      <Wrapper style={{ paddingBottom: insets.bottom + 20 }}>\n        <Content>\n          <FlatList\n            style={{ flex: 1 }}\n            inverted\n            keyExtractor={item => item.id}\n            renderItem={({ item }) => (\n              <Row\n                left={(\n                  <Cell>\n                    <Avatar mediaId={item.creator.avatar || undefined}/>\n                  </Cell>\n                )}\n                overline={item.creator.name || item.creator.username}\n                description={item.content}\n              />\n            )}\n            data={[...(data?.post.comments || [])].reverse()}\n          />\n        </Content> \n        <Row\n          right={(\n            <Button title=\"Send\" onPress={createComment} />\n          )}\n        >\n          <Input label=\" Say something...\" value={content} onChangeText={setContent} />\n        </Row>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { CommentsScreen };\n","import { Avatar, Cell, Header, Icon, Input, Page, Row } from '#/components';\nimport { useRemoveUser, useUsers } from '#/hooks/users';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Alert, FlatList } from 'react-native';\n\nconst AdminUsersScreen = () => {\n  const [searchText, setSearchText] = useState('');\n  const removeUser = useRemoveUser();\n  const { users, refetch } = useUsers();\n  const result = useMemo(\n    () => users?.filter(user => !searchText || user?.username.toLowerCase().includes(searchText.toLowerCase())) || [],\n    [users, searchText],\n  );\n  const remove = useCallback(\n    async (id: string) => {\n      Alert.alert(\n        'Are you sure?',\n        undefined,\n        [\n          { text: 'Yes', onPress: () => removeUser(id).then(() => refetch()) },\n          { text: 'Cancel', style: 'cancel' },\n        ]\n      )\n    },\n    []\n  )\n  return (\n    <Page>\n      <Header title=\"Users\" back />\n      <Row\n        left={(\n          <Cell><Icon name=\"search\" /></Cell>\n        )}\n      >\n        <Input label=\"Search\" value={searchText} onChangeText={setSearchText} />\n      </Row>\n      <FlatList\n        data={result}\n        keyExtractor={user => user.id}\n        renderItem={({ item }) => (\n          <Row\n            overline={item.username}\n            title={item.name || item.username}\n            left={(\n              <Cell><Avatar mediaId={item.avatar || undefined} /></Cell>\n            )}\n            right={(\n              <>\n                <Cell><Icon name=\"edit\" /></Cell>\n                <Cell onPress={() => remove(item.id)}><Icon name=\"trash-2\" color=\"destructive\" /></Cell>\n              </>\n            )}\n          />\n        )}\n      />\n    </Page>\n  )\n}\n\nexport { AdminUsersScreen };\n","import { Avatar, Cell, Header, Icon, Input, Page, Row } from '#/components';\nimport { useAllFeeds, useRemoveFeed } from '#/hooks/feeds';\nimport { ProfileMainScreenNavigationProp } from '#/router/types';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Alert, FlatList } from 'react-native';\n\nconst AdminFeedsScreen: React.FC<ProfileMainScreenNavigationProp> = ({\n  navigation,\n}) => {\n  const [searchText, setSearchText] = useState('');\n  const removeFeed = useRemoveFeed();\n  const { feeds, refetch } = useAllFeeds();\n  const result = useMemo(\n    () => feeds?.filter(feed => !searchText || feed?.name.toLowerCase().includes(searchText.toLowerCase())) || [],\n    [feeds, searchText],\n  );\n  const remove = useCallback(\n    async (id: string) => {\n      Alert.alert(\n        'Are you sure?',\n        undefined,\n        [\n          { text: 'Yes', onPress: () => removeFeed(id).then(() => refetch()) },\n          { text: 'Cancel', style: 'cancel' },\n        ]\n      )\n    },\n    []\n  )\n  return (\n    <Page>\n      <Header title=\"Feeds\" back />\n      <Row\n        left={(\n          <Cell><Icon name=\"search\" /></Cell>\n        )}\n      >\n        <Input label=\"Search\" value={searchText} onChangeText={setSearchText} />\n      </Row>\n      <FlatList\n        data={result}\n        keyExtractor={feed => feed.id}\n        renderItem={({ item }) => (\n          <Row\n            title={item.name}\n            overline={`${item.users.length} user(s), admins: ${item.users.filter(user => user.accessType === 'admin').map(u => u.user.username).join(', ')}`}\n            left={(\n              <Cell><Icon color=\"text\" name=\"layers\" /></Cell>\n            )}\n            right={(\n              <>\n                <Cell\n                  onPress={() => navigation.navigate('FeedEdit', { id: item.id })}\n                >\n                  <Icon name=\"edit\" />\n                </Cell>\n                <Cell onPress={() => remove(item.id)}><Icon name=\"trash-2\" color=\"destructive\" /></Cell>\n              </>\n            )}\n          />\n        )}\n      />\n    </Page>\n  )\n}\n\nexport { AdminFeedsScreen };\n","import React, { useContext, useMemo } from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useTheme } from 'styled-components/native';\nimport { ProfileParamList, RootStackParamList, TabParamList } from './types';\nimport { linkingConfig } from './linking';\nimport { Icon, PushRegistation } from '#/components';\n\nimport { AddPostScreen } from '#/screens/posts/add';\nimport { FeedScreen } from '#/screens/posts/feed';\nimport { ProfileScreen } from '#/screens/profile';\nimport { FeedEditScreen } from '#/screens/feeds/edit';\nimport { ServerContext } from '#/context/server';\nimport { LoginScreen } from '#/screens/login/login';\nimport { useProfile } from '#/hooks/profile';\nimport { AcceptInvitationScreen } from '#/screens/login/accept-invitation';\nimport { CommentsScreen } from '#/screens/comments';\nimport { AdminUsersScreen } from '#/screens/admin/users';\nimport { AdminFeedsScreen } from '#/screens/admin/feeds';\n\nconst RootStack = createNativeStackNavigator<RootStackParamList>();\nconst TabStack = createBottomTabNavigator<TabParamList>();\nconst ProfileStack = createNativeStackNavigator<ProfileParamList>();\n\nconst Profile = () => {\n  return (\n    <ProfileStack.Navigator screenOptions={{ headerShown: false }}>\n      <ProfileStack.Screen name=\"ProfileMain\" component={ProfileScreen} />\n      <ProfileStack.Screen name=\"AdminUsers\" component={AdminUsersScreen} />\n      <ProfileStack.Screen name=\"AdminFeeds\" component={AdminFeedsScreen} />\n      <ProfileStack.Screen name=\"FeedEdit\" component={FeedEditScreen} />\n    </ProfileStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const theme = useTheme();\n  const { profile } = useProfile();\n  const canCreate = useMemo(\n    () =>\n      profile?.feeds?.find(\n        f =>\n          f.accessType === 'admin' ||\n          f.accessType === 'moderator' ||\n          f.accessType === 'writer'\n      ),\n    [profile]\n  );\n  return (\n    <>\n      <PushRegistation />\n      <TabStack.Navigator\n        screenOptions={{\n          headerShown: false,\n          tabBarActiveTintColor: theme.colors.primary,\n        }}\n      >\n        <TabStack.Screen\n          name=\"Feed\"\n          component={FeedScreen}\n          options={{\n            title: 'Posts',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"home\"\n                size={28}\n              />\n            ),\n          }}\n        />\n        {canCreate && (\n          <TabStack.Screen\n            name=\"Add\"\n            component={AddPostScreen}\n            options={{\n              title: 'Add',\n              tabBarIcon: ({ focused }) => (\n                <Icon\n                  color={focused ? 'primary' : 'text'}\n                  name=\"plus-square\"\n                  size={28}\n                />\n              ),\n            }}\n          />\n        )}\n        <TabStack.Screen\n          name=\"Profile\"\n          component={Profile}\n          options={{\n            title: 'Profile',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"user\"\n                size={28}\n              />\n            ),\n          }}\n        />\n      </TabStack.Navigator>\n    </>\n  );\n};\n\nconst Root = () => {\n  const theme = useTheme();\n  const { domain } = useContext(ServerContext);\n  return (\n    <RootStack.Navigator screenOptions={{ headerShown: false }}>\n      {domain ? (\n        <>\n          <RootStack.Group>\n            <RootStack.Screen name=\"Main\" component={Tabs} />\n          </RootStack.Group>\n          <RootStack.Group\n            screenOptions={{\n              contentStyle: {\n                backgroundColor: theme.colors.shade,\n              },\n              presentation: 'modal',\n            }}\n          >\n            <RootStack.Screen name=\"Comments\" component={CommentsScreen} />\n          </RootStack.Group>\n        </>\n      ) : (\n        <RootStack.Group>\n          <RootStack.Screen name=\"Login\" component={LoginScreen} />\n          <RootStack.Screen\n            initialParams={{ inviteCode: '' }}\n            name=\"AcceptInvitation\"\n            component={AcceptInvitationScreen}\n          />\n        </RootStack.Group>\n      )}\n    </RootStack.Navigator>\n  );\n};\n\ninterface RouterProps {\n  colorScheme: string;\n}\n\nconst Router: React.FC<RouterProps> = ({ colorScheme }) => {\n  const theme = useTheme();\n  const baseTheme = useMemo(\n    () => (colorScheme === 'dark' ? DarkTheme : DefaultTheme),\n    [colorScheme]\n  );\n  const navigationTheme = useMemo(\n    () => ({\n      ...baseTheme,\n      colors: {\n        ...baseTheme.colors,\n        background: theme.colors.shade,\n        card: theme.colors.background,\n        text: theme.colors.text,\n      },\n    }),\n    [baseTheme, theme]\n  );\n  return (\n    <NavigationContainer linking={linkingConfig} theme={navigationTheme}>\n      <Root />\n    </NavigationContainer>\n  );\n};\n\nexport { Router };\n","import { Image } from 'react-native';\nimport * as Sentry from 'sentry-expo';\n\nSentry.init({\n  dsn: 'https://a13b4a62799a4225bf9072bedc4f41fa@o165705.ingest.sentry.io/6244307',\n  enableInExpoDevelopment: true,\n  debug: false,\n});\n\nif (!Image.getSizeWithHeaders) {\n  Image.getSizeWithHeaders = (uri, headers, success, failed) => {\n    success(100, 100);\n  };\n}\n\nimport App from './src/App';\n\nexport default App;\n","import React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { useColorScheme } from './hooks/colors';\nimport { ThemeProvider } from 'styled-components/native';\nimport { StatusBar } from 'expo-status-bar';\nimport { GraphQLProvider } from './context/graphql';\nimport { ServerProvider } from './context/server';\nimport { light, dark } from '#/theme';\nimport { Router } from '#/router';\nimport { NotificationProvider } from './context/notifications';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n  return (\n    <ThemeProvider theme={colorScheme === 'dark' ? dark : light}>\n      <SafeAreaProvider>\n        <NotificationProvider>\n          <ServerProvider>\n            <StatusBar style={colorScheme === 'dark' ? 'light' : 'dark'} />\n            <GraphQLProvider>\n              <Router colorScheme={colorScheme} />\n            </GraphQLProvider>\n          </ServerProvider>\n        </NotificationProvider>\n      </SafeAreaProvider>\n    </ThemeProvider>\n  );\n}\n","import {\n  ColorSchemeName,\n  useColorScheme as _useColorScheme,\n} from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import React, { createContext, useCallback, useEffect, useState } from 'react';\nimport { Buffer } from 'buffer';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { registerForPushNotificationsAsync } from './push';\nimport { useNotifications } from '#/hooks/notifications';\n\nconst STORAGE_KEY = '_/server';\ntype ServerContextValue = {\n  domain?: string;\n  pushToken: string | undefined;\n  token?: string;\n  logout: () => Promise<void>;\n  login: (domain: string, username: string, secret: string) => Promise<void>;\n  config?: {\n    notifications: {\n      push: boolean;\n    };\n  };\n  acceptInvitation: (\n    invitation: string,\n    username: string,\n    secret: string,\n    name?: string\n  ) => Promise<void>;\n};\n\nconst ServerContext = createContext<ServerContextValue>(undefined as any);\n\nconst ServerProvider: React.FC = ({ children }) => {\n  const [context, setContext] = useState<{ domain: string; token: string }>();\n  const { show, dismiss } = useNotifications();\n  const [config, setConfig] = useState<ServerContextValue['config']>();\n  const [pushToken, setPushToken] = useState<string>();\n  const [ready, setReady] = useState(false);\n  const logout = useCallback(async () => {\n    await AsyncStorage.removeItem(STORAGE_KEY);\n    setContext(undefined);\n  }, [setContext]);\n\n  useEffect(() => {\n    if (!context || !config?.notifications.push) {\n      return;\n    }\n    registerForPushNotificationsAsync().then(setPushToken);\n  }, [context, config]);\n\n  const login = useCallback(\n    async (domain: string, username: string, secret: string) => {\n      const authUrl = `${domain}/graphql`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: `\n            mutation CreateAuthToken($secret: String!, $username: String!) {\n              createAuthToken(secret: $secret, username: $username)\n            } \n          `,\n          variables: {\n            username,\n            secret,\n          },\n        }),\n      });\n      if (!response.ok) {\n        show({\n          type: 'error',\n          text: await response.text(),\n        });\n        throw new Error('failed');\n      }\n      const json = await response.json();\n      const context = {\n        token: json.data.createAuthToken,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    [show]\n  );\n\n  const acceptInvitation = useCallback(\n    async (\n      invitation: string,\n      username: string,\n      secret: string,\n      name?: string\n    ) => {\n      const rawInvite = Buffer.from(invitation, 'base64').toString('utf-8');\n      const { creationToken, domain } = JSON.parse(rawInvite);\n      const authUrl = `${domain}/api/accept-invitation`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n          secret,\n          creationToken,\n          name,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const json = await response.json();\n      const context = {\n        token: json.token,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    []\n  );\n\n  useEffect(() => {\n    const run = async () => {\n      const item = await AsyncStorage.getItem(STORAGE_KEY);\n      if (item) {\n        const nextContext = JSON.parse(item) as ServerContextValue;\n        try {\n          const configResponse = await fetch(`${nextContext.domain}/api/config`, {\n            headers: {\n              Authorization: `Bearer ${nextContext.token}`,\n            },\n          });\n          if (configResponse.ok) {\n            setConfig(await configResponse.json());\n            setContext(JSON.parse(item));\n          } else {\n            show({\n              type: 'error',\n              text: await configResponse.text(),\n            });     \n          }\n        } catch(err) {\n          show({\n            type: 'error',\n            text: err.message,\n          });     \n        }\n      }\n      setReady(true);\n    };\n    run().catch(() => {\n      setReady(true);\n    });\n  }, []);\n\n  if (!ready) {\n    return <></>;\n  }\n\n  return (\n    <ServerContext.Provider\n      value={{ ...context, config, pushToken, logout, login, acceptInvitation }}\n    >\n      {children}\n    </ServerContext.Provider>\n  );\n};\n\nexport { ServerContext, ServerProvider };\n","import * as Device from 'expo-device';\nimport { Platform } from 'react-native';\nimport * as Notifications from 'expo-notifications';\n\nexport const registerForPushNotificationsAsync = async () => {\n  if (Device.isDevice && Platform.OS !== 'web') {\n    const { status: existingStatus } =\n      await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      return;\n    }\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n    return token;\n  };\n};\n","import React from 'react';\nimport { Feather } from '@expo/vector-icons';\nimport { useTheme } from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ntype Props = {\n  size?: number;\n  color?: keyof Theme['colors'];\n  name: keyof typeof Feather.glyphMap;\n};\n\nfunction Icon({ size, color, name }: Props) {\n  const theme = useTheme();\n  return (\n    <Feather\n      name={name}\n      color={color ? theme.colors[color] : theme.colors.icon}\n      size={size ?? theme.sizes.icons}\n    />\n  );\n}\n\nexport { Icon };\n","import styled from 'styled-components/native';\nimport Theme from '#/theme/Theme';\n\ninterface TextProps {\n  color?: keyof Theme['colors'];\n  bold?: boolean;\n  theme: Theme;\n}\n\nconst BaseText = styled.Text<TextProps>`\n  color: ${({ color, theme }) =>\n    color ? theme.colors[color] : theme.colors.text};\n  font-weight: ${({ bold }) => (bold ? 'bold' : 'normal')};\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n`;\n\nconst Jumbo = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 2.8}px;\n  font-weight: bold;\n`;\n\nconst Title2 = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 1.3}px;\n  font-weight: bold;\n`;\n\nconst Title1 = styled(BaseText)`\n  font-weight: bold;\n`;\n\nconst Body1 = styled(BaseText)``;\n\nconst Overline = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.6}px;\n  text-transform: uppercase;\n`;\n\nconst Caption = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.8}px;\n`;\n\nconst Link = styled(BaseText)`\n  text-transform: uppercase;\n`;\n\nexport type { TextProps };\nexport { Jumbo, Title2, Title1, Body1, Overline, Caption, Link };\n","import { ServerContext } from '#/context/server';\nimport styled from 'styled-components/native';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\n\nconst Wrapper = styled.View<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\nconst ImageWrapper = styled.Image`\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: #ccc;\n`;\n\ntype Props = {\n  media: DeepPartial<MediaModel>;\n};\nconst Image: React.FC<Props> = ({ media }) => {\n  const { domain, token } = useContext(ServerContext);\n  const [width, setWidth] = useState<number>(0);\n  const [url, setUrl] = useState<string>();\n  useEffect(() => {\n    const run = async () => {\n      const response = await fetch(`${domain}/api/thumb/${media.id!}`, {\n        headers: {\n          Authorization: `bearer ${token!}`,\n        },\n      });\n      const binaryData = await response.arrayBuffer();\n      const contentType = response.headers.get('content-type');\n      const base64 = Buffer.from(binaryData).toString('base64');\n      const dataUrl = `data:${contentType || 'image/jpeg'};base64,${base64}`;\n      setUrl(dataUrl);\n    };\n    run();\n  }, [domain, token, media.id]);\n  return (\n    <Wrapper\n      height={width / media.aspect!}\n      onLayout={evt => {\n        const currentWidth = evt.nativeEvent.layout.width;\n        if (currentWidth !== width) {\n          setWidth(currentWidth);\n        }\n      }}\n    >\n      <ImageWrapper source={{ uri: url }} />\n    </Wrapper>\n  );\n};\n\nexport { Image };\n"],"sourceRoot":""}