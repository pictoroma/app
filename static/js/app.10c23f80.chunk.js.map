{"version":3,"sources":["assets/images/tourist.png","src/context/server/index.tsx","src/context/server/push.ts","src/context/graphql/index.tsx","src/theme/light.ts","src/theme/dark.ts","src/components/Icon/index.tsx","src/components/Image/index.web.tsx","src/components/avatar/index.tsx","src/typography/index.ts","src/components/Button/index.tsx","src/components/Modal/index.web.tsx","src/components/Row/Cell.tsx","src/components/Row/index.tsx","src/components/Row/PlaceholderIcon.tsx","src/components/Page/index.tsx","src/components/Popup/index.tsx","src/components/posts/filter/index.tsx","src/components/Row/Header.tsx","src/components/Group/index.tsx","src/components/Input/index.tsx","src/components/Dialog/index.tsx","src/components/Header/index.tsx","src/components/gallery/index.tsx","src/components/rows/post/index.tsx","src/components/add-images/index.tsx","src/components/inputs/feed/index.tsx","src/components/inputs/user/index.tsx","src/components/inputs/name-value/index.tsx","src/hooks/graphql.tsx","src/components/utils/push-registration.tsx","src/hooks/media.ts","src/hooks/posts.ts","src/hooks/profile.ts","src/screens/posts/add/index.tsx","src/screens/posts/feed/index.tsx","src/hooks/feeds.ts","src/screens/profile/index.tsx","src/hooks/users.ts","src/screens/feeds/edit/index.tsx","src/screens/login/login/index.tsx","src/screens/login/accept-invitation/index.tsx","src/router/index.tsx","App.tsx","src/App.tsx","src/hooks/colors.ts"],"names":["module","exports","ServerContext","createContext","undefined","ServerProvider","children","useState","context","setContext","setError","pushToken","setPushToken","ready","setReady","logout","useCallback","a","async","AsyncStorage","removeItem","useEffect","Device","Platform","OS","Notifications","existingStatus","status","finalStatus","alert","token","data","name","importance","MAX","vibrationPattern","lightColor","registerForPushNotificationsAsync","then","login","domain","username","secret","authUrl","fetch","method","headers","Accept","body","JSON","stringify","query","variables","response","json","ok","errors","Error","createAuthToken","setItem","acceptInvitation","invitation","rawInvite","Buffer","from","toString","parse","creationToken","text","console","log","getItem","item","nextContext","Authorization","run","catch","err","Provider","value","GraphQLProvider","useContext","apolloClient","useMemo","link","createHttpLink","uri","authLink","_","authorization","ApolloClient","cache","InMemoryCache","concat","ApolloProvider","client","lightTheme","colors","primary","icon","destructive","shade","input","secondary","shadow","background","textShade","sizes","corners","icons","margins","small","medium","large","font","baseSize","darkTheme","light","Icon","size","color","theme","useTheme","Feather","Wrapper","styled","View","height","ImageWrapper","Image","media","width","setWidth","id","aspect","onLayout","evt","currentWidth","nativeEvent","layout","Touchable","TouchableOpacity","Avatar","mediaId","onPress","content","BaseText","Text","bold","Jumbo","Title1","Body1","Overline","Link","Touch","getColors","type","bg","fg","StyledLink","Button","title","accessibilityHint","accessibilityRole","accessibilityLabel","accessible","Modal","visible","elm","newElm","document","createElement","style","position","display","flexDirection","left","top","transition","transform","appendChild","removeChild","ReactDOM","createPortal","flex","direction","align","Cell","props","others","node","Children","componentOrString","Component","Row","right","overline","description","KeyboardAvoiding","KeyboardAvoidingView","Pressable","Page","keyboardShown","setKeyboardShown","show","Keyboard","addListener","hide","remove","disabled","dismiss","behavior","Top","Outer","Popup","onClose","insets","useSafeAreaInsets","transparent","animationType","paddingBottom","bottom","PostFilter","selected","feeds","onSelect","setVisible","length","map","feed","isSelected","includes","filter","s","Header","add","Group","items","getKey","render","marginLeft","InputField","TextInput","Input","label","onChangeText","autoCorrect","secure","keyboardType","autoCapitalize","secureTextEntry","placeholderTextColor","placeholder","Content","Dialog","renderSelect","search","create","allowClear","searchInput","setSeachInput","results","select","createItem","FlatList","keyExtractor","renderItem","back","actions","navigation","useNavigation","paddingTop","goBack","Ionicons","action","ScrollWrapper","ScrollView","ScrollContent","TouchableWithoutFeedback","ScrollPage","DotWrapper","Dot","Pager","current","total","dots","Array","fill","i","Gallery","offset","setOffset","currentIndex","Math","round","lightboxVisible","setLightboxVisible","lightboxImages","currentMedia","currentAspect","Lightbox","images","imageIndex","onRequestClose","FooterComponent","dark","horizontal","scrollEventThrottle","snapToInterval","showsHorizontalScrollIndicator","decelerationRate","snapToAlignment","disableIntervalMomentum","onScroll","contentOffset","x","PostRow","post","creator","avatar","Spacer","Item","AddImages","files","onUpdate","pickImage","ImagePicker","mediaTypes","All","quality","base64","result","cancelled","split","filename","match","exec","file","f","m","source","FeedInput","UserInput","users","NameValueInput","key","defaultOptions","gql","FeedDocument","CreateFeedDocument","AddUserToFeedDocument","RemoveUserFromFeedDocument","PostsDocument","CreatePostDocument","ProfileDocument","useProfileQuery","baseOptions","options","Apollo","SetProfileAvatarDocument","RegisterPushNotificationDocument","UsersDocument","PushRegistation","useRegisterPushNotificationMutation","registerPushMutation","useCreateMedia","Promise","all","FormData","append","error","ids","useCreatePost","useCreatePostMutation","createPostMutation","createMedia","params","useFeed","usePostsQuery","posts","useSetAvatar","useSetProfileAvatarMutation","setAvatarMutation","useProfile","refetch","loading","profile","AddPostScreen","selectedFeed","setSelectedFeed","setMedia","setBody","createPost","adminFeeds","accessType","submit","navigate","useFocusEffect","Seperator","FeedScreen","selectedFeeds","setSelectedFeeds","userFeeds","ListHeader","ListHeaderComponent","ItemSeparatorComponent","refreshControl","RefreshControl","refreshing","onRefresh","useFeedQuery","feedId","useCreateFeed","useCreateFeedMutation","createFeedMutation","useAddUserToFeed","useAddUserToFeedMutation","addUserToFeedMutation","userId","useRemoveUserFromFeed","useRemoveUserFromFeedMutation","removeUserFromFeedMutation","ProfileScreen","createFeed","addFeedVisible","setAddFeedVisible","feedName","setFeedName","setAvatar","saveAddFeed","admin","useUsers","useUsersQuery","accessTypes","FeedEditScreen","route","removeUserFromFeed","addUserToFeed","addUserVisible","setAddUserVisible","addUserSelected","setAddUserSelected","addUserAccessType","setAddUserAccessType","addUser","removeUser","relation","user","LoginScreen","setLoading","setDomain","setUsername","password","setPassword","doLogin","image","AcceptInvitationScreen","inviteCode","doAccept","RootStack","createNativeStackNavigator","TabStack","createBottomTabNavigator","ProfileStack","Profile","Navigator","screenOptions","headerShown","Screen","component","Tabs","canCreate","find","tabBarActiveTintColor","tabBarIcon","focused","Root","contentStyle","backgroundColor","presentation","initialParams","Router","colorScheme","baseTheme","DarkTheme","DefaultTheme","navigationTheme","card","NavigationContainer","getSizeWithHeaders","success","failed","App","_useColorScheme","StatusBar"],"mappings":"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","file":"static/js/app.10c23f80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tourist.e3fa36f8.png\";","import React, { createContext, useCallback, useEffect, useState } from 'react';\nimport { Buffer } from 'buffer';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { registerForPushNotificationsAsync } from './push';\n\nconst STORAGE_KEY = '_/server';\ntype ServerContextValue = {\n  domain?: string;\n  pushToken: string | undefined;\n  token?: string;\n  logout: () => Promise<void>;\n  login: (domain: string, username: string, secret: string) => Promise<void>;\n  acceptInvitation: (\n    invitation: string,\n    username: string,\n    secret: string,\n    name?: string\n  ) => Promise<void>;\n};\n\nconst ServerContext = createContext<ServerContextValue>(undefined as any);\n\nconst ServerProvider: React.FC = ({ children }) => {\n  const [context, setContext] = useState<{ domain: string; token: string }>();\n  const [error, setError] = useState<any>();\n  const [pushToken, setPushToken] = useState<string>();\n  const [ready, setReady] = useState(false);\n  const logout = useCallback(async () => {\n    await AsyncStorage.removeItem(STORAGE_KEY);\n    setContext(undefined);\n  }, [setContext]);\n\n  useEffect(() => {\n    if (!context) {\n      return;\n    }\n    registerForPushNotificationsAsync().then(setPushToken);\n  }, [context]);\n\n  const login = useCallback(\n    async (domain: string, username: string, secret: string) => {\n      const authUrl = `${domain}/graphql`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: `\n            mutation CreateAuthToken($secret: String!, $username: String!) {\n              createAuthToken(secret: $secret, username: $username)\n            } \n          `,\n          variables: {\n            username,\n            secret,\n          },\n        }),\n      });\n      const json = await response.json();\n      if (!response.ok) {\n        setError(json.errors);\n        throw new Error('failed');\n      }\n      const context = {\n        token: json.data.createAuthToken,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    []\n  );\n\n  const acceptInvitation = useCallback(\n    async (\n      invitation: string,\n      username: string,\n      secret: string,\n      name?: string\n    ) => {\n      const rawInvite = Buffer.from(invitation, 'base64').toString('utf-8');\n      const { creationToken, domain } = JSON.parse(rawInvite);\n      const authUrl = `${domain}/api/accept-invitation`;\n      const response = await fetch(authUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n          secret,\n          creationToken,\n          name,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const json = await response.json();\n      console.log(json);\n      const context = {\n        token: json.token,\n        domain,\n      };\n      setContext(context);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(context));\n    },\n    []\n  );\n\n  useEffect(() => {\n    const run = async () => {\n      const item = await AsyncStorage.getItem(STORAGE_KEY);\n      if (item) {\n        const nextContext = JSON.parse(item) as ServerContextValue;\n        const configResponse = await fetch(`${nextContext.domain}/api/config`, {\n          headers: {\n            Authorization: `Bearer ${nextContext.token}`,\n          },\n        });\n        if (configResponse.ok) {\n          setContext(JSON.parse(item));\n        }\n      }\n      setReady(true);\n    };\n    run().catch(err => {\n      setReady(true);\n      setError(err);\n    });\n  }, []);\n\n  if (!ready) {\n    return <></>;\n  }\n\n  return (\n    <ServerContext.Provider\n      value={{ ...context, pushToken, logout, login, acceptInvitation }}\n    >\n      {children}\n    </ServerContext.Provider>\n  );\n};\n\nexport { ServerContext, ServerProvider };\n","import * as Device from 'expo-device';\nimport { Platform } from 'react-native';\nimport * as Notifications from 'expo-notifications';\n\nexport const registerForPushNotificationsAsync = async () => {\n  if (Device.isDevice && Platform.OS !== 'web') {\n    const { status: existingStatus } =\n      await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n    return token;\n  };\n};\n","import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport React, { useContext, useMemo } from 'react';\nimport { ServerContext } from '../server';\n\nconst GraphQLProvider: React.FC = ({ children }) => {\n  const { token, domain } = useContext(ServerContext);\n  const apolloClient = useMemo(() => {\n    const link = createHttpLink({\n      uri: `${domain}/graphql`,\n    });\n    const authLink = setContext((_, { headers }) => {\n      return {\n        headers: {\n          ...headers,\n          authorization: `bearer ${token}`,\n        },\n      };\n    });\n    return new ApolloClient({\n      cache: new InMemoryCache(),\n      link: authLink.concat(link),\n    });\n  }, [token, domain]);\n\n  if (!domain) {\n    return <>{children}</>;\n  }\n\n  return <ApolloProvider client={apolloClient}>{children}</ApolloProvider>;\n};\n\nexport { GraphQLProvider };\n","import Theme from './Theme';\n\nconst lightTheme: Theme = {\n  colors: {\n    primary: '#1abc9c',\n    icon: '#1abc9c',\n    destructive: '#e74c3c',\n    shade: '#ededed',\n    input: '#ddd',\n    secondary: 'blue',\n    shadow: '#000',\n    background: '#fff',\n    text: '#000',\n    textShade: '#999',\n  },\n  sizes: {\n    corners: 5,\n    icons: 24,\n  },\n  margins: {\n    small: 8,\n    medium: 16,\n    large: 24,\n  },\n  font: {\n    baseSize: 14,\n  },\n};\n\nexport default lightTheme;\n","import Theme from './Theme';\nimport light from './light';\n\nconst darkTheme: Theme = {\n  ...light,\n  colors: {\n    ...light.colors,\n    primary: '#e67e22',\n    input: '#333',\n    icon: '#e67e22',\n    background: '#151515',\n    shadow: '#000',\n    secondary: 'blue',\n    shade: '#000',\n    text: '#fff',\n    textShade: '#666',\n  },\n};\n\nexport default darkTheme;\n","import React from 'react';\nimport { Feather } from '@expo/vector-icons';\nimport { useTheme } from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ntype Props = {\n  size?: number;\n  color?: keyof Theme['colors'];\n  name: keyof typeof Feather.glyphMap;\n};\n\nfunction Icon({ size, color, name }: Props) {\n  const theme = useTheme();\n  return (\n    <Feather\n      name={name}\n      color={color ? theme.colors[color] : theme.colors.icon}\n      size={size ?? theme.sizes.icons}\n    />\n  );\n}\n\nexport { Icon };\n","import { ServerContext } from '#/context/server';\nimport styled from 'styled-components/native';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\nimport axios from 'axios';\n\nconst Wrapper = styled.View<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n`;\nconst ImageWrapper = styled.Image`\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: #ccc;\n`;\n\ntype Props = {\n  media: DeepPartial<MediaModel>;\n};\nconst Image: React.FC<Props> = ({ media }) => {\n  const { domain, token } = useContext(ServerContext);\n  const [width, setWidth] = useState<number>(0);\n  useEffect(() => {\n    const run = async () => {\n      // const response = await axios.get(`${domain}/api/thumb/${media.id!}`, {\n      //   withCredentials: true,\n      //   headers: {\n      //     Authorization: token!,\n      //   },\n      // });\n      // console.log(response.data);\n    };\n    run();\n  }, [domain, token, media.id]);\n  return (\n    <Wrapper\n      height={width / media.aspect!}\n      onLayout={evt => {\n        const currentWidth = evt.nativeEvent.layout.width;\n        if (currentWidth !== width) {\n          setWidth(currentWidth);\n        }\n      }}\n    >\n      <ImageWrapper />\n    </Wrapper>\n  );\n};\n\nexport { Image };\n","import styled from 'styled-components/native';\nimport { Icon } from '../Icon';\nimport { Image } from '../Image';\n\ntype Props = {\n  mediaId?: string;\n  onPress?: () => void;\n};\n\nconst Touchable = styled.TouchableOpacity``;\nconst Wrapper = styled.View`\n  position: relative;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Avatar: React.FC<Props> = ({ mediaId, onPress }) => {\n  const content = (\n    <Wrapper>\n      {mediaId ? (\n        <Image media={{ aspect: 1, id: mediaId }} />\n      ) : (\n        <Icon name=\"user\" />\n      )}\n    </Wrapper>\n  );\n\n  if (onPress) {\n    return <Touchable onPress={onPress}>{content}</Touchable>;\n  }\n  return content;\n};\n\nexport { Avatar };\n","import styled from 'styled-components/native';\nimport Theme from '#/theme/Theme';\n\ninterface TextProps {\n  color?: keyof Theme['colors'];\n  bold?: boolean;\n  theme: Theme;\n}\n\nconst BaseText = styled.Text<TextProps>`\n  color: ${({ color, theme }) =>\n    color ? theme.colors[color] : theme.colors.text};\n  font-weight: ${({ bold }) => (bold ? 'bold' : 'normal')};\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n`;\n\nconst Jumbo = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 2.8}px;\n  font-weight: bold;\n`;\n\nconst Title2 = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 1.3}px;\n  font-weight: bold;\n`;\n\nconst Title1 = styled(BaseText)`\n  font-weight: bold;\n`;\n\nconst Body1 = styled(BaseText)``;\n\nconst Overline = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.6}px;\n  text-transform: uppercase;\n`;\n\nconst Caption = styled(BaseText)`\n  font-size: ${({ theme }) => theme.font.baseSize * 0.8}px;\n`;\n\nconst Link = styled(BaseText)`\n  text-transform: uppercase;\n`;\n\nexport type { TextProps };\nexport { Jumbo, Title2, Title1, Body1, Overline, Caption, Link };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native';\nimport { Theme } from '#/theme';\nimport { Link } from '#/typography';\n\ninterface Props {\n  title: string;\n  onPress?: () => any;\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  type?: 'primary' | 'secondary' | 'destructive';\n}\n\nconst Touch = styled.TouchableOpacity``;\n\nconst getColors = (type: Props['type'], theme: Theme) => {\n  if (type === 'secondary') {\n    return { bg: theme.colors.secondary, fg: '#fff' };\n  }\n  if (type === 'destructive') {\n    return { bg: 'transparent', fg: theme.colors.destructive };\n  }\n  return { bg: theme.colors.primary, fg: '#fff' };\n};\n\nconst Wrapper = styled.View<{\n  theme: Theme;\n  type: Props['type'];\n}>`\n  background: ${({ theme, type }) => getColors(type, theme).bg};\n  padding: ${({ theme }) => theme.margins.small}px;\n  border-radius: ${({ theme }) => theme.sizes.corners}px;\n  align-items: center;\n`;\n\nconst StyledLink = styled<{\n  theme: Theme;\n  type: Props['type'];\n}>(Link)`\n  color: ${({ theme, type }) => getColors(type, theme).fg};\n  font-weight: bold;\n`;\n\nconst Button: React.FC<Props> = ({\n  title,\n  onPress,\n  accessibilityHint,\n  accessibilityRole,\n  accessibilityLabel,\n  type,\n}) => (\n  <Touch\n    onPress={onPress}\n    accessible\n    accessibilityHint={accessibilityHint}\n    accessibilityRole={accessibilityRole}\n    accessibilityLabel={accessibilityLabel}\n  >\n    <Wrapper type={type}>\n      <StyledLink type={type}>{title}</StyledLink>\n    </Wrapper>\n  </Touch>\n);\n\nexport { Button };\n","import ReactDOM from 'react-dom';\nimport React, { useMemo, useEffect, ReactNode } from 'react';\n\ninterface Props {\n  visible: boolean;\n  children: ReactNode;\n}\n\nconst Modal: React.FC<Props> = ({ visible, children }) => {\n  const elm = useMemo(() => {\n    const newElm = document.createElement('div');\n    newElm.style.position = 'fixed';\n    newElm.style.display = 'flex';\n    newElm.style.flexDirection = 'column';\n    newElm.style.left = '0px';\n    newElm.style.top = '0px';\n    newElm.style.width = '100%';\n    newElm.style.height = '100%';\n    newElm.style.transition = 'transform 0.3s';\n    newElm.style.transform = 'translateY(100%)';\n    return newElm;\n  }, []);\n  useEffect(() => {\n    document.body.appendChild(elm);\n    return () => {\n      document.body.removeChild(elm);\n    };\n  }, [elm]);\n  useEffect(() => {\n    if (visible) {\n      elm.style.transform = 'translateY(0)';\n    } else {\n      elm.style.transform = 'translateY(100%)';\n    }\n  }, [elm, visible]);\n\n  return ReactDOM.createPortal(<>{children}</>, elm);\n};\n\nexport { Modal };\n","import React, { ReactNode } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Theme } from '#/theme';\n\ninterface Props {\n  accessibilityRole?: TouchableOpacity['props']['accessibilityRole'];\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  children?: ReactNode;\n  onPress?: () => any;\n  background?: string;\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}\n\nconst Wrapper = styled.View<{\n  background?: string;\n  flex?: string | number;\n  direction?: 'row' | 'column';\n  theme: Theme;\n  align?: 'flex-start' | 'flex-end' | 'center' | 'stretch';\n}>`\n  padding: ${({ theme }) => theme.margins.medium / 2}px\n    ${({ theme }) => theme.margins.medium / 2}px;\n  ${({ background }) => (background ? `background: ${background};` : '')}\n  ${({ flex }) => (flex ? `flex: ${flex};` : '')}\n  flex-direction: ${({ direction }) => (direction ? direction : 'row')};\n  align-items: ${({ align }) => (align ? align : 'center')};\n`;\n\nconst Touch = styled.TouchableOpacity``;\n\nconst Cell: React.FC<Props> = ({ children, onPress, ...props }) => {\n  const {\n    accessibilityLabel,\n    accessibilityRole,\n    accessibilityHint,\n    ...others\n  } = props;\n  const node = <Wrapper {...others}>{children}</Wrapper>;\n  if (onPress) {\n    return (\n      <Touch\n        accessible\n        accessibilityRole={accessibilityRole || 'button'}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        onPress={onPress}\n      >\n        {node}\n      </Touch>\n    );\n  }\n  return node;\n};\n\nexport { Cell };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { Title1, Body1, Overline } from '#/typography';\nimport { Cell } from './Cell';\nimport { PlaceholderIcon } from './PlaceholderIcon';\n\ninterface Props {\n  background?: string;\n  top?: ReactNode;\n  left?: ReactNode;\n  right?: ReactNode;\n  title?: ReactNode;\n  overline?: ReactNode;\n  description?: ReactNode;\n  children?: ReactNode;\n  onPress?: () => any;\n}\n\nconst Children = styled.View``;\n\nconst componentOrString = (\n  input: ReactNode,\n  Component: React.FC<{ children: ReactNode }>\n) => {\n  if (!input) {\n    return null;\n  }\n  if (typeof input === 'string') {\n    return <Component>{input}</Component>;\n  }\n  return input;\n};\n\nconst Row: React.FC<Props> = ({\n  background,\n  top,\n  left,\n  right,\n  title,\n  overline,\n  description,\n  children,\n  onPress,\n}) => (\n  <Cell background={background} onPress={onPress}>\n    {left}\n    <Cell flex={1} direction=\"column\" align=\"stretch\">\n      {!!top}\n      {componentOrString(overline, Overline)}\n      {componentOrString(title, Title1)}\n      {componentOrString(description, Body1)}\n      {!!children && <Children>{children}</Children>}\n    </Cell>\n    {right}\n  </Cell>\n);\n\nexport { Row, Cell, PlaceholderIcon };\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { Cell } from './Cell';\n\ninterface Props {\n  color?: string;\n  size?: number;\n  onPress?: () => void;\n}\n\nconst Icon = styled.View<{ size: number; color: string }>`\n  background: ${({ color }) => color};\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  border-radius: ${({ size }) => size / 4}px;\n`;\n\nconst PlaceholderIcon: React.FC<Props> = ({\n  color = 'red',\n  size = 24,\n  onPress,\n}) => (\n  <Cell onPress={onPress}>\n    <Icon color={color} size={size} />\n  </Cell>\n);\n\nexport { PlaceholderIcon };\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components/native';\nimport { Keyboard, Platform } from 'react-native';\n\nconst KeyboardAvoiding = styled.KeyboardAvoidingView`\n  flex: 1;\n`;\n\nconst Pressable = styled.Pressable`\n  flex: 1;\n`;\n\nconst Page: React.FC = ({ children }) => {\n  const [keyboardShown, setKeyboardShown] = useState(false);\n  useEffect(() => {\n    const keyboardDidShow = () => setKeyboardShown(true);\n    const keyboardDidHide = () => setKeyboardShown(false);\n    const show = Keyboard.addListener('keyboardDidShow', keyboardDidShow);\n    const hide = Keyboard.addListener('keyboardDidHide', keyboardDidHide);\n\n    return () => {\n      show.remove();\n      hide.remove();\n    };\n  }, []);\n  return (\n    <Pressable disabled={!keyboardShown} onPress={() => Keyboard.dismiss()}>\n      <KeyboardAvoiding behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        {children}\n      </KeyboardAvoiding>\n    </Pressable>\n  );\n};\n\nexport { Page };\n","import React, { ReactNode } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport styled from 'styled-components/native';\nimport { Icon } from '#/components/Icon';\nimport { Modal } from '#/components/Modal';\nimport { Row, Cell } from '#/components/Row';\nimport { Page } from '#/components/Page';\n\ninterface Props {\n  visible: boolean;\n  onClose?: () => void;\n  children: ReactNode;\n}\n\nconst Top = styled.Pressable`\n  flex: 1;\n`;\n\nconst Wrapper = styled.View`\n  background: ${({ theme }) => theme.colors.background};\n  width: 100%;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-offset: 0 0;\n  shadow-opacity: 1;\n  shadow-radius: 200px;\n  border-radius: 12px;\n  margin-bottom: -12px;\n`;\n\nconst Outer = styled.View`\n  flex: 1;\n`;\n\nconst Popup: React.FC<Props> = ({ visible, children, onClose }) => {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Modal visible={visible} transparent animationType=\"slide\">\n      <Page>\n        <Outer>\n          <Top onPress={onClose} />\n          <Wrapper style={{ paddingBottom: insets.bottom + 12 }}>\n            <Row\n              right={\n                <Cell onPress={onClose}>\n                  <Icon name=\"x-circle\" />\n                </Cell>\n              }\n            />\n            {children}\n          </Wrapper>\n        </Outer>\n      </Page>\n    </Modal>\n  );\n};\n\nexport { Popup };\n","import { Button } from '#/components/Button';\nimport { Icon } from '#/components/Icon';\nimport { Popup } from '#/components/Popup';\nimport { Cell, Row } from '#/components/Row';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components/native';\n\nconst Content = styled.View`\n  min-height: 40%;\n`;\n\ninterface PostFilterProps {\n  selected?: string[];\n  feeds?: {\n    id: string;\n    name: string;\n  }[];\n  onSelect: (ids: string[]) => void;\n}\nconst PostFilter: React.FC<PostFilterProps> = ({\n  selected = [],\n  feeds = [],\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Cell onPress={() => setVisible(true)}>\n        <Icon name=\"filter\" color={selected.length > 0 ? 'primary' : 'text'} />\n      </Cell>\n      <Popup visible={visible} onClose={() => setVisible(false)}>\n        {feeds.map(feed => {\n          const isSelected = selected.includes(feed.id);\n          return (\n            <Row\n              key={feed.id}\n              onPress={\n                isSelected\n                  ? () => onSelect(selected.filter(s => s !== feed.id))\n                  : () => onSelect([...selected, feed.id])\n              }\n              left={\n                <Cell>\n                  <Icon name={isSelected ? 'check-circle' : 'circle'} />\n                </Cell>\n              }\n              title={feed.name}\n            />\n          );\n        })}\n        {selected.length > 0 && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => onSelect([])} />\n          </Row>\n        )}\n      </Popup>\n    </>\n  );\n};\n\nexport { PostFilter };\n","import React, { ReactNode } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Row, Cell } from './index';\n\ninterface Props {\n  title: string;\n  add?: () => void;\n  onPress?: () => void;\n  left?: ReactNode;\n}\n\nfunction Header({ title, add, onPress, left }: Props) {\n  return (\n    <Row\n      onPress={onPress}\n      left={left}\n      title={title}\n      right={\n        add && (\n          <Cell onPress={add}>\n            <Icon name=\"plus-circle\" size={18} />\n          </Cell>\n        )\n      }\n    />\n  );\n}\n\nexport { Header };\n","import React, { Fragment, ReactNode, useState } from 'react';\nimport { Icon } from '#/components/Icon';\nimport { Header } from '#/components/Row/Header';\nimport styled from 'styled-components/native';\nimport { Row, Cell } from '#/components/Row';\nimport { Body1 } from '#/typography';\n\ninterface ListProps<T> {\n  title: string;\n  items: T[];\n  getKey: (item: T) => any;\n  render: (item: T) => ReactNode;\n  add?: () => void;\n}\n\ninterface ChildProps {\n  title: string;\n  add?: () => void;\n  children?: ReactNode;\n}\n\nconst Wrapper = styled.View`\n  border-radius: 7px;\n  background: ${({ theme }) => theme.colors.background};\n  shadow-offset: 0px;\n  shadow-opacity: 0.1;\n  shadow-color: ${({ theme }) => theme.colors.shadow};\n  shadow-radius: 5px;\n`;\n\nfunction Group<T = any>(props: ListProps<T> | ChildProps) {\n  const [visible, setVisible] = useState(true);\n  const { title, items, getKey, render, add, children } =\n    props as ListProps<T> & ChildProps;\n  return (\n    <Row>\n      <Wrapper>\n        <Header\n          left={\n            <Icon name={visible ? 'chevron-down' : 'chevron-up'} size={18} />\n          }\n          title={title}\n          add={add}\n          onPress={() => setVisible(!visible)}\n        />\n        {visible &&\n          items &&\n          items.map(item => (\n            <Fragment key={getKey(item)}>{render(item)}</Fragment>\n          ))}\n        {visible && children}\n        {visible && !children && (!items || items.length === 0) && (\n          <Row\n            left={\n              <Cell>\n                <Icon color=\"textShade\" name=\"maximize\" />\n              </Cell>\n            }\n          >\n            <Body1 style={{ marginLeft: 10 }} color=\"textShade\">\n              Empty\n            </Body1>\n          </Row>\n        )}\n      </Wrapper>\n    </Row>\n  );\n}\n\nexport { Group };\n","import React from 'react';\nimport { KeyboardType } from 'react-native';\nimport styled, { useTheme } from 'styled-components/native';\n\ninterface Props {\n  label: string;\n  value: string;\n  onChangeText?: (text: string) => any;\n  type?: KeyboardType;\n  autoCorrect?: boolean;\n  secure?: boolean;\n}\n\nconst InputField = styled.TextInput`\n  color: ${({ theme }) => theme.colors.text};\n  padding: ${({ theme }) => theme.margins.small}px 0;\n  font-size: ${({ theme }) => theme.font.baseSize}px;\n  width: 100%;\n`;\n\nconst Input: React.FC<Props> = ({\n  label,\n  value,\n  onChangeText,\n  type,\n  autoCorrect,\n  secure,\n}) => {\n  const theme = useTheme();\n  return (\n    <InputField\n      value={value}\n      keyboardType={type}\n      autoCapitalize={'none'}\n      autoCorrect={autoCorrect}\n      secureTextEntry={secure}\n      placeholderTextColor={theme.colors.textShade}\n      placeholder={label}\n      onChangeText={onChangeText}\n    />\n  );\n};\n\nexport { Input };\n","import React, { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { Popup } from '#/components/Popup';\nimport { FlatList } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Row } from '#/components/Row';\nimport { Button } from '#/components/Button';\n\ninterface Props<T> {\n  visible: boolean;\n  onClose: () => void;\n  selected?: T;\n  allowClear?: boolean;\n  items: T[];\n  onSelect: (item?: T) => void;\n  renderSelect: (item: T) => ReactNode;\n  getKey: (item: T) => any;\n  search?: (term: string, items: T[]) => T[];\n  create?: (term: string) => Promise<T>;\n}\n\nconst Touch = styled.TouchableOpacity``;\nconst Content = styled.View`\n  min-height: 40%;\n`;\n\nfunction Dialog<T>({\n  visible,\n  onClose,\n  items,\n  onSelect,\n  renderSelect,\n  getKey,\n  search,\n  create,\n  allowClear,\n}: Props<T>) {\n  const [searchInput, setSeachInput] = useState('');\n  const results = useMemo(() => {\n    if (!search || !searchInput) {\n      return items;\n    }\n    return search(searchInput, items);\n  }, [items, searchInput, search]);\n  const hide = useCallback(() => {\n    setSeachInput('');\n    onClose();\n  }, [setSeachInput, onClose]);\n\n  const select = useCallback(\n    (item: T) => {\n      onSelect(item);\n      hide();\n    },\n    [onSelect, hide]\n  );\n  const createItem = useCallback(async () => {\n    if (!create) {\n      return;\n    }\n    const item = await create(searchInput);\n    onSelect(item);\n    hide();\n  }, [create, searchInput, hide]);\n  return (\n    <Popup visible={visible} onClose={hide}>\n      {search && (\n        <Row>\n          <Input\n            label=\"Search\"\n            value={searchInput}\n            onChangeText={setSeachInput}\n          />\n        </Row>\n      )}\n      <Content>\n        {create && results.length === 0 && searchInput && (\n          <Row>\n            <Button title={`Create ${searchInput}`} onPress={createItem} />\n          </Row>\n        )}\n        {results.length > 0 && (\n          <FlatList\n            data={results}\n            keyExtractor={getKey}\n            style={{ flex: 1 }}\n            renderItem={({ item }) => (\n              <Touch onPress={() => select(item)}>{renderSelect(item)}</Touch>\n            )}\n          />\n        )}\n        {allowClear && (\n          <Row>\n            <Button title=\"Clear\" onPress={() => select(undefined)} />\n          </Row>\n        )}\n      </Content>\n    </Popup>\n  );\n}\n\nexport { Dialog };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components/native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Row, Cell } from '#/components/Row';\nimport { Button } from '#/components/Button';\nimport { Jumbo } from '#/typography';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\ninterface Props {\n  title: string;\n  back?: boolean;\n  actions?: {\n    title: string;\n    onPress?: () => any;\n  }[];\n  right?: ReactNode;\n}\n\nconst Wrapper = styled.View``;\n\nconst Header: React.FC<Props> = ({ title, back, actions, right }) => {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Wrapper style={{ paddingTop: insets.top }}>\n      <Row\n        left={\n          !!back && (\n            <Cell onPress={() => navigation.goBack()}>\n              <Ionicons name=\"arrow-back-circle\" size={26} />\n            </Cell>\n          )\n        }\n        right={\n          (actions || right) && (\n            <>\n              {actions &&\n                actions.map(action => (\n                  <Button\n                    key={action.title}\n                    title={action.title}\n                    onPress={action.onPress}\n                  />\n                ))}\n              {right}\n            </>\n          )\n        }\n      >\n        <Jumbo>{title}</Jumbo>\n      </Row>\n    </Wrapper>\n  );\n};\n\nexport { Header };\n","import styled, { ThemeProvider } from 'styled-components/native';\nimport ImageView from 'react-native-image-viewing';\nimport { DeepPartial } from '#/helpers/types';\nimport { MediaModel } from '#/hooks/graphql';\nimport { Image } from '../Image';\nimport { Cell, Row } from '../Row';\nimport { useContext, useMemo, useState } from 'react';\nimport { ServerContext } from '#/context/server';\nimport { Icon } from '../Icon';\nimport { dark } from '#/theme';\n\nconst ScrollWrapper = styled.ScrollView<{\n  height: number;\n}>`\n  height: ${({ height }) => height}px;\n  width: 100%;\n`;\n\nconst ScrollContent = styled.View`\n  flex-direction: row;\n`;\n\nconst Touchable = styled.TouchableWithoutFeedback``;\n\nconst ScrollPage = styled.View<{\n  width: number;\n}>`\n  width: ${({ width }) => width}px;\n`;\n\nconst Wrapper = styled.View`\n  border-radius: 5px;\n  overflow: hidden;\n`;\n\ntype PagerProps = {\n  current: number;\n  total: number;\n};\n\nconst DotWrapper = styled.View`\n  margin-top: 10px;\n  flex-direction: row;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Dot = styled.View<{\n  selected: boolean;\n}>`\n  width: 6px;\n  height: 6px;\n  background: ${({ selected }) => (selected ? '#000' : '#ccc')};\n  margin: 0 5px;\n  border-radius: 3px;\n`;\n\nconst Pager: React.FC<PagerProps> = ({ current, total }) => {\n  const dots = useMemo(\n    () => new Array(total).fill(undefined).map((_, i) => i),\n    [total]\n  );\n\n  return (\n    <DotWrapper>\n      {dots.map(i => (\n        <Dot key={i} selected={i === current} />\n      ))}\n    </DotWrapper>\n  );\n};\n\ntype GalleryProps = {\n  media: DeepPartial<MediaModel[]>;\n};\n\nconst Gallery: React.FC<GalleryProps> = ({ media }) => {\n  const [width, setWidth] = useState(0);\n  const [offset, setOffset] = useState(0);\n  const { domain, token } = useContext(ServerContext);\n  const currentIndex = useMemo(\n    () => Math.round(offset / width) || 0,\n    [offset, width]\n  );\n  const [lightboxVisible, setLightboxVisible] = useState(false);\n  const lightboxImages = useMemo(\n    () =>\n      media.map(item => ({\n        uri: `${domain}/api/media/${item?.id}`,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })),\n    [domain, token, media]\n  );\n  const currentMedia = useMemo(\n    () => media[currentIndex],\n    [media, currentIndex]\n  );\n  const currentAspect = useMemo(\n    () => currentMedia?.aspect || 1, // use current media aspect\n    [currentMedia]\n  );\n\n  if (media.length === 0) {\n    return <></>;\n  }\n  const Lightbox = () => (\n    <ImageView\n      images={lightboxImages}\n      imageIndex={currentIndex}\n      visible={lightboxVisible}\n      onRequestClose={() => setLightboxVisible(false)}\n      FooterComponent={() => (\n        <ThemeProvider theme={dark}>\n          <Row\n            right={\n              <Cell>\n                <Icon name=\"download\" />\n              </Cell>\n            }\n          />\n          <Row />\n        </ThemeProvider>\n      )}\n    />\n  );\n  if (media.length === 1) {\n    return (\n      <Row>\n        <Lightbox />\n        <Touchable onPress={() => setLightboxVisible(true)}>\n          <Wrapper>\n            <Image media={media[0]!} />\n          </Wrapper>\n        </Touchable>\n      </Row>\n    );\n  }\n\n  return (\n    <Row>\n      <Lightbox />\n      <Wrapper>\n        <ScrollWrapper\n          horizontal\n          scrollEventThrottle={16}\n          snapToInterval={width}\n          showsHorizontalScrollIndicator={false}\n          decelerationRate={0}\n          snapToAlignment=\"center\"\n          disableIntervalMomentum\n          height={width / currentAspect}\n          onScroll={evt => {\n            const offset = evt.nativeEvent.contentOffset.x;\n            setOffset(offset);\n          }}\n          onLayout={evt => {\n            const currentWidth = evt.nativeEvent.layout.width;\n            if (currentWidth !== width) {\n              setWidth(currentWidth);\n            }\n          }}\n        >\n          <Touchable onPress={() => setLightboxVisible(true)}>\n            <ScrollContent>\n              {media.map(item => (\n                <ScrollPage key={item!.id} width={width}>\n                  <Image media={item!} />\n                </ScrollPage>\n              ))}\n            </ScrollContent>\n          </Touchable>\n        </ScrollWrapper>\n      </Wrapper>\n      <Pager current={currentIndex} total={media.length} />\n    </Row>\n  );\n};\n\nexport { Gallery };\n","import { PostModel } from '#/hooks/graphql';\nimport styled from 'styled-components/native';\nimport { DeepPartial } from '#/helpers/types';\nimport { Cell, Row } from '#/components/Row';\nimport { Icon } from '#/components';\nimport { Gallery } from '#/components/gallery';\nimport { Body1 } from '#/typography';\nimport { Avatar } from '#/components/avatar';\n\ntype PostRowProps = {\n  post: DeepPartial<PostModel>;\n};\n\nconst Wrapper = styled.View``;\n\nconst PostRow: React.FC<PostRowProps> = ({ post }) => {\n  return (\n    <Wrapper>\n      {post.media && <Gallery media={post!.media} />}\n      <Row\n        left={\n          <Cell>\n            <Avatar mediaId={post?.creator?.avatar!} />\n          </Cell>\n        }\n        right={\n          false && (\n            <>\n              <Cell>\n                <Icon name=\"message-circle\" color=\"text\" size={20} />\n                <Body1>0</Body1>\n              </Cell>\n              <Cell>\n                <Icon name=\"bookmark\" color=\"text\" size={20} />\n              </Cell>\n            </>\n          )\n        }\n        description={post.body}\n        overline={post.creator?.name || post.creator?.username}\n      />\n    </Wrapper>\n  );\n};\n\nexport { PostRow };\n","import { useCallback } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport styled from 'styled-components/native';\nimport { UploadFile } from '#/hooks/posts';\nimport { Icon } from '#/components';\nimport { Row } from '../Row';\n\ntype Props = {\n  files: UploadFile[];\n  onUpdate: (files: UploadFile[]) => void;\n};\n\nconst Image = styled.Image`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 5px;\n`;\n\nconst Spacer = styled.View`\n  padding-bottom: 100%;\n`;\n\nconst Item = styled.View`\n  width: 33%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Wrapper = styled.View`\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst Button = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n  justify-content: center;\n  align-items: center;\n  background: #ddd;\n  border-radius: 5px;\n`;\n\nconst ImageWrapper = styled.TouchableOpacity`\n  position: absolute;\n  top: 5px;\n  left: 0px;\n  bottom: 5px;\n  right: 10px;\n`;\n\nconst AddImages: React.FC<Props> = ({ files, onUpdate }) => {\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    onUpdate([...files, file]);\n  }, [files, onUpdate]);\n\n  const remove = useCallback(\n    (file: UploadFile) => {\n      onUpdate(files.filter(f => f !== file));\n    },\n    [files, onUpdate]\n  );\n\n  return (\n    <Row>\n      <Wrapper>\n        {files.map(m => (\n          <Item key={m.uri}>\n            <Spacer />\n            <ImageWrapper onPress={() => remove(m)}>\n              <Image source={{ uri: m.uri }} />\n            </ImageWrapper>\n          </Item>\n        ))}\n        <Item>\n          <Spacer />\n          <Button onPress={pickImage}>\n            <Icon name=\"plus-circle\" size={40} />\n          </Button>\n        </Item>\n      </Wrapper>\n    </Row>\n  );\n};\n\nexport { AddImages };\n","import { Row, Dialog } from '#/components';\nimport { DeepPartial } from '#/helpers/types';\nimport { FeedModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype FeedInputProps = {\n  label: string;\n  feeds: DeepPartial<FeedModel>[];\n  selected?: DeepPartial<FeedModel>;\n  onSelect: (feed?: DeepPartial<FeedModel>) => void;\n};\n\nconst FeedInput: React.FC<FeedInputProps> = ({\n  label,\n  feeds,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={feeds || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name} />}\n      />\n    </>\n  );\n};\n\nexport { FeedInput };\n","import { Row, Dialog } from '#/components';\nimport { PartialDeep } from 'type-fest';\nimport { UserModel } from '#/hooks/graphql';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype UserInputProps = {\n  label: string;\n  users: PartialDeep<UserModel>[];\n  selected?: PartialDeep<UserModel>;\n  onSelect: (user?: PartialDeep<UserModel>) => void;\n};\n\nconst UserInput: React.FC<UserInputProps> = ({\n  label,\n  users,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.name || selected?.username || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={users || []}\n        getKey={item => item.id}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.name || item.username} />}\n      />\n    </>\n  );\n};\n\nexport { UserInput };\n","import { Row, Dialog } from '#/components';\nimport { Body1 } from '#/typography';\nimport { useState } from 'react';\n\ntype NameValueInputItem = {\n  key: string;\n  value: any;\n};\n\ntype NameValueInputProps = {\n  label: string;\n  items: NameValueInputItem[];\n  selected?: NameValueInputItem;\n  onSelect: (item?: NameValueInputItem) => void;\n};\n\nconst NameValueInput: React.FC<NameValueInputProps> = ({\n  label,\n  items,\n  selected,\n  onSelect,\n}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <>\n      <Row overline={label} onPress={() => setVisible(true)}>\n        <Body1>{selected?.key || 'Select'}</Body1>\n      </Row>\n      <Dialog\n        visible={visible}\n        selected={selected}\n        onClose={() => setVisible(false)}\n        items={items}\n        getKey={item => item.key}\n        onSelect={onSelect}\n        renderSelect={item => <Row title={item.key} />}\n      />\n    </>\n  );\n};\n\nexport { NameValueInputItem, NameValueInput };\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type CommentCreateParameters = {\n  content?: InputMaybe<Scalars['String']>;\n  post: Scalars['String'];\n};\n\nexport type CommentModel = {\n  __typename?: 'CommentModel';\n  content: Scalars['String'];\n  created: Scalars['DateTime'];\n  creator: UserModel;\n  id: Scalars['String'];\n  post: PostModel;\n};\n\nexport type FeedModel = {\n  __typename?: 'FeedModel';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  posts: Array<PostModel>;\n  users: Array<UserFeedRelationModel>;\n};\n\n\nexport type FeedModelPostsArgs = {\n  filter?: InputMaybe<PostFindParameters>;\n};\n\nexport type MediaModel = {\n  __typename?: 'MediaModel';\n  aspect?: Maybe<Scalars['Float']>;\n  contentType?: Maybe<Scalars['String']>;\n  creator: UserModel;\n  filename?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  lowres?: Maybe<Scalars['String']>;\n  size: Scalars['Float'];\n  type?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addUserToFeed: UserFeedRelationModel;\n  createAuthToken: Scalars['String'];\n  createComment: CommentModel;\n  createFeed: FeedModel;\n  createPost: PostModel;\n  inviteProfile: UserModel;\n  registerPushNotification: PushRegistrationModel;\n  removeUserFromFeed: Scalars['Boolean'];\n  setProfileAvatar: UserModel;\n};\n\n\nexport type MutationAddUserToFeedArgs = {\n  accessType: Scalars['String'];\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationCreateAuthTokenArgs = {\n  secret: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationCreateCommentArgs = {\n  params: CommentCreateParameters;\n};\n\n\nexport type MutationCreateFeedArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  params: PostCreateParameters;\n};\n\n\nexport type MutationInviteProfileArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterPushNotificationArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type MutationRemoveUserFromFeedArgs = {\n  feedId: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationSetProfileAvatarArgs = {\n  mediaId?: InputMaybe<Scalars['String']>;\n};\n\nexport type PostCreateParameters = {\n  body?: InputMaybe<Scalars['String']>;\n  feed: Scalars['String'];\n  media: Array<Scalars['String']>;\n};\n\nexport type PostFindParameters = {\n  after?: InputMaybe<Scalars['DateTime']>;\n  feeds?: InputMaybe<Array<Scalars['String']>>;\n  limit?: InputMaybe<Scalars['Float']>;\n  offset?: InputMaybe<Scalars['Float']>;\n};\n\nexport type PostModel = {\n  __typename?: 'PostModel';\n  body?: Maybe<Scalars['String']>;\n  comments: Array<CommentModel>;\n  created: Scalars['DateTime'];\n  creator?: Maybe<UserModel>;\n  feed: FeedModel;\n  id: Scalars['String'];\n  media: Array<MediaModel>;\n};\n\nexport type PushRegistrationModel = {\n  __typename?: 'PushRegistrationModel';\n  device?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  feed: FeedModel;\n  feeds: Array<FeedModel>;\n  post: PostModel;\n  posts: Array<PostModel>;\n  profile?: Maybe<UserModel>;\n  users: Array<UserModel>;\n};\n\n\nexport type QueryFeedArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostsArgs = {\n  filter: PostFindParameters;\n};\n\nexport type UserFeedRelationModel = {\n  __typename?: 'UserFeedRelationModel';\n  accessType: Scalars['String'];\n  feed: FeedModel;\n  user: UserModel;\n};\n\nexport type UserModel = {\n  __typename?: 'UserModel';\n  admin: Scalars['Boolean'];\n  avatar?: Maybe<Scalars['String']>;\n  feeds: Array<UserFeedRelationModel>;\n  id: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  username: Scalars['String'];\n};\n\nexport type FeedsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FeedsQuery = { __typename?: 'Query', feeds: Array<{ __typename?: 'FeedModel', id: string, name: string, posts: Array<{ __typename?: 'PostModel', id: string, body?: string | null, media: Array<{ __typename?: 'MediaModel', id: string }> }> }> };\n\nexport type FeedQueryVariables = Exact<{\n  feedId: Scalars['String'];\n}>;\n\n\nexport type FeedQuery = { __typename?: 'Query', feed: { __typename?: 'FeedModel', id: string, name: string, users: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, user: { __typename?: 'UserModel', id: string, name?: string | null, username: string } }> } };\n\nexport type CreateFeedMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateFeedMutation = { __typename?: 'Mutation', createFeed: { __typename?: 'FeedModel', id: string } };\n\nexport type AddUserToFeedMutationVariables = Exact<{\n  accessType: Scalars['String'];\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\n\nexport type AddUserToFeedMutation = { __typename?: 'Mutation', addUserToFeed: { __typename?: 'UserFeedRelationModel', accessType: string } };\n\nexport type RemoveUserFromFeedMutationVariables = Exact<{\n  userId: Scalars['String'];\n  feedId: Scalars['String'];\n}>;\n\n\nexport type RemoveUserFromFeedMutation = { __typename?: 'Mutation', removeUserFromFeed: boolean };\n\nexport type PostsQueryVariables = Exact<{\n  filter: PostFindParameters;\n}>;\n\n\nexport type PostsQuery = { __typename?: 'Query', posts: Array<{ __typename?: 'PostModel', id: string, body?: string | null, created: any, creator?: { __typename?: 'UserModel', name?: string | null, username: string, avatar?: string | null } | null, media: Array<{ __typename?: 'MediaModel', id: string, aspect?: number | null, type?: string | null }> }> };\n\nexport type CreatePostMutationVariables = Exact<{\n  params: PostCreateParameters;\n}>;\n\n\nexport type CreatePostMutation = { __typename?: 'Mutation', createPost: { __typename?: 'PostModel', id: string } };\n\nexport type ProfileQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProfileQuery = { __typename?: 'Query', profile?: { __typename?: 'UserModel', id: string, username: string, name?: string | null, admin: boolean, avatar?: string | null, feeds: Array<{ __typename?: 'UserFeedRelationModel', accessType: string, feed: { __typename?: 'FeedModel', id: string, name: string } }> } | null };\n\nexport type SetProfileAvatarMutationVariables = Exact<{\n  mediaId?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type SetProfileAvatarMutation = { __typename?: 'Mutation', setProfileAvatar: { __typename?: 'UserModel', id: string } };\n\nexport type RegisterPushNotificationMutationVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type RegisterPushNotificationMutation = { __typename?: 'Mutation', registerPushNotification: { __typename?: 'PushRegistrationModel', id: string } };\n\nexport type UsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'UserModel', id: string, name?: string | null, username: string, avatar?: string | null }> };\n\n\nexport const FeedsDocument = gql`\n    query Feeds {\n  feeds {\n    id\n    name\n    posts {\n      id\n      body\n      media {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedsQuery__\n *\n * To run a query within a React component, call `useFeedsQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFeedsQuery(baseOptions?: Apollo.QueryHookOptions<FeedsQuery, FeedsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FeedsQuery, FeedsQueryVariables>(FeedsDocument, options);\n      }\nexport function useFeedsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedsQuery, FeedsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FeedsQuery, FeedsQueryVariables>(FeedsDocument, options);\n        }\nexport type FeedsQueryHookResult = ReturnType<typeof useFeedsQuery>;\nexport type FeedsLazyQueryHookResult = ReturnType<typeof useFeedsLazyQuery>;\nexport type FeedsQueryResult = Apollo.QueryResult<FeedsQuery, FeedsQueryVariables>;\nexport const FeedDocument = gql`\n    query Feed($feedId: String!) {\n  feed(id: $feedId) {\n    id\n    name\n    users {\n      accessType\n      user {\n        id\n        name\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFeedQuery__\n *\n * To run a query within a React component, call `useFeedQuery` and pass it any options that fit your needs.\n * When your component renders, `useFeedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFeedQuery({\n *   variables: {\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useFeedQuery(baseOptions: Apollo.QueryHookOptions<FeedQuery, FeedQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n      }\nexport function useFeedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FeedQuery, FeedQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FeedQuery, FeedQueryVariables>(FeedDocument, options);\n        }\nexport type FeedQueryHookResult = ReturnType<typeof useFeedQuery>;\nexport type FeedLazyQueryHookResult = ReturnType<typeof useFeedLazyQuery>;\nexport type FeedQueryResult = Apollo.QueryResult<FeedQuery, FeedQueryVariables>;\nexport const CreateFeedDocument = gql`\n    mutation CreateFeed($name: String!) {\n  createFeed(name: $name) {\n    id\n  }\n}\n    `;\nexport type CreateFeedMutationFn = Apollo.MutationFunction<CreateFeedMutation, CreateFeedMutationVariables>;\n\n/**\n * __useCreateFeedMutation__\n *\n * To run a mutation, you first call `useCreateFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createFeedMutation, { data, loading, error }] = useCreateFeedMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateFeedMutation(baseOptions?: Apollo.MutationHookOptions<CreateFeedMutation, CreateFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateFeedMutation, CreateFeedMutationVariables>(CreateFeedDocument, options);\n      }\nexport type CreateFeedMutationHookResult = ReturnType<typeof useCreateFeedMutation>;\nexport type CreateFeedMutationResult = Apollo.MutationResult<CreateFeedMutation>;\nexport type CreateFeedMutationOptions = Apollo.BaseMutationOptions<CreateFeedMutation, CreateFeedMutationVariables>;\nexport const AddUserToFeedDocument = gql`\n    mutation AddUserToFeed($accessType: String!, $userId: String!, $feedId: String!) {\n  addUserToFeed(accessType: $accessType, userId: $userId, feedId: $feedId) {\n    accessType\n  }\n}\n    `;\nexport type AddUserToFeedMutationFn = Apollo.MutationFunction<AddUserToFeedMutation, AddUserToFeedMutationVariables>;\n\n/**\n * __useAddUserToFeedMutation__\n *\n * To run a mutation, you first call `useAddUserToFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddUserToFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addUserToFeedMutation, { data, loading, error }] = useAddUserToFeedMutation({\n *   variables: {\n *      accessType: // value for 'accessType'\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useAddUserToFeedMutation(baseOptions?: Apollo.MutationHookOptions<AddUserToFeedMutation, AddUserToFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddUserToFeedMutation, AddUserToFeedMutationVariables>(AddUserToFeedDocument, options);\n      }\nexport type AddUserToFeedMutationHookResult = ReturnType<typeof useAddUserToFeedMutation>;\nexport type AddUserToFeedMutationResult = Apollo.MutationResult<AddUserToFeedMutation>;\nexport type AddUserToFeedMutationOptions = Apollo.BaseMutationOptions<AddUserToFeedMutation, AddUserToFeedMutationVariables>;\nexport const RemoveUserFromFeedDocument = gql`\n    mutation RemoveUserFromFeed($userId: String!, $feedId: String!) {\n  removeUserFromFeed(userId: $userId, feedId: $feedId)\n}\n    `;\nexport type RemoveUserFromFeedMutationFn = Apollo.MutationFunction<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>;\n\n/**\n * __useRemoveUserFromFeedMutation__\n *\n * To run a mutation, you first call `useRemoveUserFromFeedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveUserFromFeedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeUserFromFeedMutation, { data, loading, error }] = useRemoveUserFromFeedMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      feedId: // value for 'feedId'\n *   },\n * });\n */\nexport function useRemoveUserFromFeedMutation(baseOptions?: Apollo.MutationHookOptions<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>(RemoveUserFromFeedDocument, options);\n      }\nexport type RemoveUserFromFeedMutationHookResult = ReturnType<typeof useRemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationResult = Apollo.MutationResult<RemoveUserFromFeedMutation>;\nexport type RemoveUserFromFeedMutationOptions = Apollo.BaseMutationOptions<RemoveUserFromFeedMutation, RemoveUserFromFeedMutationVariables>;\nexport const PostsDocument = gql`\n    query Posts($filter: PostFindParameters!) {\n  posts(filter: $filter) {\n    id\n    body\n    creator {\n      name\n      username\n      avatar\n    }\n    created\n    media {\n      id\n      aspect\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const CreatePostDocument = gql`\n    mutation CreatePost($params: PostCreateParameters!) {\n  createPost(params: $params) {\n    id\n  }\n}\n    `;\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      params: // value for 'params'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, options);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const ProfileDocument = gql`\n    query Profile {\n  profile {\n    id\n    username\n    name\n    admin\n    avatar\n    feeds {\n      feed {\n        id\n        name\n      }\n      accessType\n    }\n  }\n}\n    `;\n\n/**\n * __useProfileQuery__\n *\n * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProfileQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProfileQuery(baseOptions?: Apollo.QueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n      }\nexport function useProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n        }\nexport type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;\nexport type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;\nexport type ProfileQueryResult = Apollo.QueryResult<ProfileQuery, ProfileQueryVariables>;\nexport const SetProfileAvatarDocument = gql`\n    mutation SetProfileAvatar($mediaId: String) {\n  setProfileAvatar(mediaId: $mediaId) {\n    id\n  }\n}\n    `;\nexport type SetProfileAvatarMutationFn = Apollo.MutationFunction<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>;\n\n/**\n * __useSetProfileAvatarMutation__\n *\n * To run a mutation, you first call `useSetProfileAvatarMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetProfileAvatarMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setProfileAvatarMutation, { data, loading, error }] = useSetProfileAvatarMutation({\n *   variables: {\n *      mediaId: // value for 'mediaId'\n *   },\n * });\n */\nexport function useSetProfileAvatarMutation(baseOptions?: Apollo.MutationHookOptions<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>(SetProfileAvatarDocument, options);\n      }\nexport type SetProfileAvatarMutationHookResult = ReturnType<typeof useSetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationResult = Apollo.MutationResult<SetProfileAvatarMutation>;\nexport type SetProfileAvatarMutationOptions = Apollo.BaseMutationOptions<SetProfileAvatarMutation, SetProfileAvatarMutationVariables>;\nexport const RegisterPushNotificationDocument = gql`\n    mutation RegisterPushNotification($token: String!) {\n  registerPushNotification(token: $token) {\n    id\n  }\n}\n    `;\nexport type RegisterPushNotificationMutationFn = Apollo.MutationFunction<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>;\n\n/**\n * __useRegisterPushNotificationMutation__\n *\n * To run a mutation, you first call `useRegisterPushNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterPushNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerPushNotificationMutation, { data, loading, error }] = useRegisterPushNotificationMutation({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useRegisterPushNotificationMutation(baseOptions?: Apollo.MutationHookOptions<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>(RegisterPushNotificationDocument, options);\n      }\nexport type RegisterPushNotificationMutationHookResult = ReturnType<typeof useRegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationResult = Apollo.MutationResult<RegisterPushNotificationMutation>;\nexport type RegisterPushNotificationMutationOptions = Apollo.BaseMutationOptions<RegisterPushNotificationMutation, RegisterPushNotificationMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    name\n    username\n    avatar\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n      }\nexport function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;","import { ServerContext } from '#/context/server';\nimport { useRegisterPushNotificationMutation } from '#/hooks/graphql';\nimport React, { useContext, useEffect } from 'react';\n\nconst PushRegistation: React.FC<{}> = () => {\n  const { pushToken } = useContext(ServerContext);\n  const [registerPushMutation] = useRegisterPushNotificationMutation();\n\n  useEffect(() => {\n    if (!pushToken) {\n      return;\n    }\n    registerPushMutation({\n      variables: {\n        token: pushToken,\n      },\n    });\n  }, [pushToken]);\n\n  return <></>;\n};\n\nexport { PushRegistation };\n","import { ServerContext } from '#/context/server';\nimport { useCallback, useContext } from 'react';\nimport { UploadFile } from './posts';\n\nexport const useCreateMedia = () => {\n  const { domain, token } = useContext(ServerContext);\n  const createMedia = useCallback(\n    async (media: UploadFile[]) => {\n      const ids = await Promise.all(\n        media.map(async file => {\n          const data = new FormData();\n          data.append('media', file as any);\n          const response = await fetch(`${domain}/api/media`, {\n            method: 'POST',\n            body: data,\n            headers: {\n              'content-type': 'multipart/form-data',\n              Authorization: `Bearer ${token}`,\n            },\n          });\n          if (!response.ok) {\n            console.error(await response.text());\n            throw new Error('Could not upload image');\n          }\n          const json = await response.json();\n          return json.ids[0] as string;\n        })\n      );\n      return ids;\n    },\n    [token, domain]\n  );\n  return createMedia;\n};\n","import { ServerContext } from '#/context/server';\nimport { useCallback, useContext, useMemo } from 'react';\nimport {\n  useCreatePostMutation,\n  usePostsQuery,\n  useProfileQuery,\n} from './graphql';\nimport { useCreateMedia } from './media';\n\nexport type UploadFile = {\n  uri: string;\n  name: string;\n  type: string;\n};\n\nexport const useCreatePostData = () => {\n  const { data, refetch, loading, error } = useProfileQuery();\n  const feeds = useMemo(\n    () => data?.profile?.feeds.filter(f => f.accessType === 'admin'),\n    [data]\n  );\n\n  return {\n    feeds,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nexport const useCreatePost = () => {\n  const { domain, token } = useContext(ServerContext);\n  const [createPostMutation] = useCreatePostMutation();\n  const createMedia = useCreateMedia();\n  const createPost = useCallback(\n    async (feed: string, body: string, media: UploadFile[]) => {\n      const ids = await createMedia(media);\n      await createPostMutation({\n        variables: {\n          params: {\n            feed,\n            body,\n            media: ids,\n          },\n        },\n      });\n    },\n    [createPostMutation, token, domain]\n  );\n\n  return createPost;\n};\n\nexport const useFeed = (feeds?: string[]) => {\n  const { data, ...props } = usePostsQuery({\n    variables: {\n      filter: {\n        feeds,\n      },\n    },\n  });\n\n  console.log(props.error);\n\n  const posts = useMemo(() => data?.posts || [], [data]);\n\n  return {\n    ...props,\n    posts,\n  };\n};\n","import { useCallback, useMemo } from 'react';\nimport { useProfileQuery, useSetProfileAvatarMutation } from './graphql';\nimport { useCreateMedia } from './media';\nimport { UploadFile } from './posts';\n\nexport const useSetAvatar = () => {\n  const createMedia = useCreateMedia();\n  const [setAvatarMutation] = useSetProfileAvatarMutation();\n\n  const setAvatar = useCallback(async (media?: UploadFile) => {\n    const [id] = media ? await createMedia([media]) : [];\n    await setAvatarMutation({\n      variables: {\n        mediaId: id,\n      },\n    });\n  }, []);\n\n  return setAvatar;\n};\n\nexport const useProfile = () => {\n  const { data, refetch, loading, error } = useProfileQuery();\n  const feeds = useMemo(() => data?.profile?.feeds || [], [data]);\n  const profile = useMemo(() => data?.profile, [data]);\n\n  return {\n    profile,\n    feeds,\n    refetch,\n    loading,\n    error,\n  };\n};\n","import React, { useCallback, useState, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { UploadFile, useCreatePost } from '#/hooks/posts';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { Page, FeedInput, AddImages, Row, Input, Button } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\n\nconst Wrapper = styled.ScrollView`\n  flex: 1;\n`;\nconst Outer = styled.View`\n  flex: 1;\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n\nconst AddPostScreen: React.FC<AddScreenNavigationProp> = ({ navigation }) => {\n  const { feeds, refetch } = useProfile();\n  const [selectedFeed, setSelectedFeed] = useState<any>();\n  const [media, setMedia] = useState<UploadFile[]>([]);\n  const [body, setBody] = useState('');\n  const createPost = useCreatePost();\n  const adminFeeds = useMemo(\n    () => feeds?.filter(f => f.accessType === 'admin').map(f => f.feed) || [],\n    [feeds]\n  );\n\n  const submit = useCallback(async () => {\n    await createPost(selectedFeed.id, body, media);\n    setSelectedFeed(undefined);\n    setMedia([]);\n    setBody('');\n    navigation.navigate('Feed', {});\n  }, [selectedFeed, body, media]);\n  useFocusEffect(\n    useCallback(() => {\n      refetch();\n    }, [refetch])\n  );\n\n  if (!feeds) {\n    return <></>;\n  }\n\n  return (\n    <Page>\n      <Outer>\n        <Header title=\"Create post\" />\n        <Wrapper>\n          <AddImages files={media} onUpdate={setMedia} />\n          <FeedInput\n            label=\"Feed\"\n            feeds={adminFeeds}\n            selected={selectedFeed}\n            onSelect={setSelectedFeed}\n          />\n          <Row overline=\"Content\">\n            <Input\n              label=\"Tell your story...\"\n              value={body}\n              onChangeText={setBody}\n            />\n          </Row>\n        </Wrapper>\n        <Row>\n          {!!selectedFeed && media.length > 0 && (\n            <Button onPress={submit} title=\"Create\" />\n          )}\n        </Row>\n      </Outer>\n    </Page>\n  );\n};\n\nexport { AddPostScreen };\n","import React, { useCallback, useMemo, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { ListRenderItem, FlatList, RefreshControl } from 'react-native';\nimport { AddScreenNavigationProp } from '#/router/types';\nimport { useFeed } from '#/hooks/posts';\nimport { Page } from '#/components/Page';\nimport { PostFilter, PostRow } from '#/components';\nimport { Header } from '#/components';\nimport { useProfile } from '#/hooks/profile';\n\nconst Seperator = styled.View`\n  margin-top: 15px;\n  border-bottom-width: 5px;\n  margin-bottom: 15px;\n  border-color: ${({ theme }) => theme.colors.shade};\n`;\nconst Wrapper = styled.View`\n  background-color: ${({ theme }) => theme.colors.background};\n  flex: 1;\n`;\n\nconst FeedScreen: React.FC<AddScreenNavigationProp> = () => {\n  const [selectedFeeds, setSelectedFeeds] = useState<string[]>([]);\n  const { posts, loading, refetch } = useFeed(\n    selectedFeeds.length > 0 ? selectedFeeds : undefined\n  );\n  const { feeds } = useProfile();\n\n  const userFeeds = useMemo(() => feeds.map(f => f.feed), [feeds]);\n\n  const renderItem: ListRenderItem<typeof posts[0]> = useCallback(\n    ({ item }) => <PostRow key={item.id} post={item} />,\n    []\n  );\n\n  const ListHeader = useMemo(\n    () => () =>\n      (\n        <Header\n          key=\"test\"\n          title=\"All posts\"\n          right={\n            <>\n              {userFeeds.length > 1 && (\n                <PostFilter\n                  feeds={userFeeds}\n                  selected={selectedFeeds}\n                  onSelect={setSelectedFeeds}\n                />\n              )}\n            </>\n          }\n        />\n      ),\n    [userFeeds, selectedFeeds, setSelectedFeeds]\n  );\n\n  return (\n    <Page>\n      <Wrapper>\n        <FlatList\n          ListHeaderComponent={<ListHeader />}\n          data={posts}\n          keyExtractor={item => item.id}\n          renderItem={renderItem}\n          ItemSeparatorComponent={Seperator}\n          refreshControl={\n            <RefreshControl refreshing={loading} onRefresh={refetch} />\n          }\n        />\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { FeedScreen };\n","import {\n  useAddUserToFeedMutation,\n  useCreateFeedMutation,\n  useRemoveUserFromFeedMutation,\n  useFeedQuery,\n} from '#/hooks/graphql';\nimport { useCallback, useMemo } from 'react';\n\nexport const useFeed = (id: string) => {\n  const { data, refetch, loading, error } = useFeedQuery({\n    variables: { feedId: id },\n  });\n  const feed = useMemo(() => data?.feed, [data]);\n  return {\n    feed,\n    refetch,\n    loading,\n    error,\n  };\n};\n\nconst useCreateFeed = () => {\n  const [createFeedMutation] = useCreateFeedMutation();\n  const createFeed = useCallback(\n    async (name: string) => {\n      await createFeedMutation({\n        variables: {\n          name,\n        },\n      });\n    },\n    [createFeedMutation]\n  );\n\n  return createFeed;\n};\n\nconst useAddUserToFeed = () => {\n  const [addUserToFeedMutation] = useAddUserToFeedMutation();\n  const addUserToFeed = useCallback(\n    async (feedId: string, userId: string, accessType: string) => {\n      await addUserToFeedMutation({\n        variables: {\n          feedId,\n          userId,\n          accessType,\n        },\n      });\n    },\n    [addUserToFeedMutation]\n  );\n\n  return addUserToFeed;\n};\n\nconst useRemoveUserFromFeed = () => {\n  const [removeUserFromFeedMutation] = useRemoveUserFromFeedMutation();\n  const removeUserFromFeed = useCallback(\n    async (feedId: string, userId: string) => {\n      await removeUserFromFeedMutation({\n        variables: {\n          feedId,\n          userId,\n        },\n      });\n    },\n    [removeUserFromFeedMutation]\n  );\n\n  return removeUserFromFeed;\n};\n\nexport { useCreateFeed, useAddUserToFeed, useRemoveUserFromFeed };\n","import { useCallback, useContext, useState } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport {\n  Avatar,\n  Button,\n  Cell,\n  Group,\n  Header,\n  Input,\n  Page,\n  Popup,\n  Row,\n} from '#/components';\nimport { useProfile, useSetAvatar } from '#/hooks/profile';\nimport { ProfileMainScreenNavigationProp } from '#/router/types';\nimport { useCreateFeed } from '#/hooks/feeds';\nimport { ServerContext } from '#/context/server';\n\nconst ProfileScreen: React.FC<ProfileMainScreenNavigationProp> = ({\n  navigation,\n}) => {\n  const { profile, feeds, refetch } = useProfile();\n  const { logout } = useContext(ServerContext);\n  const createFeed = useCreateFeed();\n  const [addFeedVisible, setAddFeedVisible] = useState(false);\n  const [feedName, setFeedName] = useState('');\n  const setAvatar = useSetAvatar();\n  const pickImage = useCallback(async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true,\n    });\n\n    if (result.cancelled || !result.base64) {\n      return;\n    }\n    let [filename] = result.uri.split('/');\n    let match = /\\.(\\w+)$/.exec(filename);\n    let type = match ? `image/${match[1]}` : 'image';\n\n    const file = {\n      type,\n      name: filename,\n      uri: result.uri,\n    };\n    await setAvatar(file);\n    await refetch();\n  }, []);\n  const saveAddFeed = useCallback(async () => {\n    await createFeed(feedName);\n    setFeedName('');\n    setAddFeedVisible(false);\n    await refetch();\n  }, [feedName, createFeed]);\n  return (\n    <Page>\n      <Header title=\"Profile\" />\n      <Row\n        left={\n          <Cell>\n            <Avatar\n              mediaId={profile?.avatar || undefined}\n              onPress={pickImage}\n            />\n          </Cell>\n        }\n        title={profile?.name || profile?.username}\n      />\n      <Popup visible={addFeedVisible} onClose={() => setAddFeedVisible(false)}>\n        <Row>\n          <Input label=\"Name\" value={feedName} onChangeText={setFeedName} />\n        </Row>\n        <Row>\n          <Button title=\"Save\" onPress={saveAddFeed} />\n        </Row>\n      </Popup>\n      <Group\n        title=\"My feeds\"\n        items={feeds}\n        getKey={item => item.feed.id}\n        add={\n          profile?.admin\n            ? () => {\n                setAddFeedVisible(true);\n              }\n            : undefined\n        }\n        render={item => (\n          <Row\n            title={item.feed.name}\n            overline={item.accessType}\n            right={\n              <Cell>\n                <Button title=\"Leave\" type=\"destructive\" />\n              </Cell>\n            }\n            onPress={() => {\n              navigation.navigate('FeedEdit', { id: item.feed.id });\n            }}\n          />\n        )}\n      />\n      <Row>\n        <Button title=\"Logout\" type=\"destructive\" onPress={logout} />\n      </Row>\n    </Page>\n  );\n};\n\nexport { ProfileScreen };\n","import { useMemo } from 'react';\nimport { useUsersQuery } from './graphql';\n\nexport const useUsers = () => {\n  const { data, refetch, loading, error } = useUsersQuery();\n  const users = useMemo(() => data?.users, [data]);\n  return {\n    users,\n    refetch,\n    loading,\n    error,\n  };\n};\n","import {\n  Group,\n  NameValueInput,\n  Header,\n  Input,\n  Page,\n  Popup,\n  Row,\n  UserInput,\n  NameValueInputItem,\n  Button,\n  Cell,\n} from '#/components';\nimport {\n  useAddUserToFeed,\n  useFeed,\n  useRemoveUserFromFeed,\n} from '#/hooks/feeds';\nimport { UserModel } from '#/hooks/graphql';\nimport { useUsers } from '#/hooks/users';\nimport { FeedEditScreenNavigationProp } from '#/router/types';\nimport { useCallback, useState } from 'react';\nimport { PartialDeep } from 'type-fest';\n\nconst accessTypes = [\n  { key: 'Admin', value: 'admin' },\n  { key: 'Moderator', value: 'moderator' },\n  { key: 'Writer', value: 'writer' },\n  { key: 'Reader', value: 'reader' },\n];\n\nconst FeedEditScreen: React.FC<FeedEditScreenNavigationProp> = ({ route }) => {\n  const { id } = route.params;\n  const { feed, refetch } = useFeed(id);\n  const { users } = useUsers();\n  const removeUserFromFeed = useRemoveUserFromFeed();\n  const addUserToFeed = useAddUserToFeed();\n  const [addUserVisible, setAddUserVisible] = useState(false);\n  const [addUserSelected, setAddUserSelected] =\n    useState<PartialDeep<UserModel>>();\n  const [addUserAccessType, setAddUserAccessType] =\n    useState<NameValueInputItem>();\n\n  const addUser = useCallback(async () => {\n    await addUserToFeed(id, addUserSelected!.id!, addUserAccessType!.value);\n    setAddUserSelected(undefined);\n    setAddUserAccessType(undefined);\n    setAddUserVisible(false);\n    await refetch();\n  }, [id, addUserSelected, addUserAccessType]);\n\n  const removeUser = useCallback(\n    async (userId: string) => {\n      await removeUserFromFeed(id, userId);\n      await refetch();\n    },\n    [id, removeUserFromFeed, refetch]\n  );\n\n  if (!feed) {\n    return <></>;\n  }\n\n  return (\n    <Page>\n      <Header title=\"Feed\" />\n      <Row>\n        <Input label=\"Name\" value={feed.name} />\n      </Row>\n      <Group\n        title=\"Users\"\n        add={() => {\n          setAddUserVisible(true);\n        }}\n        items={feed.users}\n        getKey={relation => relation.user.id}\n        render={relation => (\n          <Row\n            overline={relation.accessType}\n            title={relation.user.name || relation.user.username}\n            right={\n              <Cell>\n                <Button\n                  title=\"Remove\"\n                  onPress={() => removeUser(relation.user.id)}\n                />\n              </Cell>\n            }\n          />\n        )}\n      />\n      <Popup visible={addUserVisible} onClose={() => setAddUserVisible(false)}>\n        <UserInput\n          label=\"User\"\n          selected={addUserSelected}\n          onSelect={user => setAddUserSelected(user!)}\n          users={users}\n        />\n        <NameValueInput\n          label=\"Access type\"\n          selected={addUserAccessType}\n          onSelect={accessType => setAddUserAccessType(accessType!)}\n          items={accessTypes}\n        />\n        {!!addUserAccessType && !!addUserSelected && (\n          <Row>\n            <Button title=\"Save\" onPress={addUser} />\n          </Row>\n        )}\n      </Popup>\n    </Page>\n  );\n};\n\nexport { FeedEditScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { ServerContext } from '#/context/server';\nimport { Header, Icon, Page } from '#/components';\nimport { LoginScreenNavigationProp } from '#/router/types';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background: ${({ theme }) => theme.colors.shade};\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\nconst Text = styled.Text``;\n\nconst LoginScreen: React.FC<LoginScreenNavigationProp> = ({ navigation }) => {\n  const { login } = useContext(ServerContext);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n  const [domain, setDomain] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const doLogin = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await login(domain, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [domain, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          {error && <Text>{error.toString()}</Text>}\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"server\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Domain\"\n              value={domain}\n              onChangeText={setDomain}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Secret\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doLogin} title=\"Login\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { LoginScreen };\n","import React, { useCallback, useContext, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { Input } from '#/components/Input';\nimport { Button } from '#/components/Button';\nimport { Cell, Row } from '#/components/Row';\nimport { AcceptInvitationScreenNavigationProp } from '#/router/types';\nimport { ServerContext } from '#/context/server';\nimport { Text } from 'react-native';\nimport { Header, Icon, Page } from '#/components';\n\nimport image from '#/../assets/images/tourist.png';\n\nconst Image = styled.Image`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Wrapper = styled.View`\n  align-items: center;\n  justify-content: center;\n  padding: 0 20px;\n  flex: 1;\n`;\n\nconst Content = styled.View`\n  padding: 15px;\n  margin: 30px;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n`;\n\nconst AcceptInvitationScreen: React.FC<\n  AcceptInvitationScreenNavigationProp\n> = ({ route, navigation }) => {\n  const { inviteCode } = route.params;\n  const { acceptInvitation } = useContext(ServerContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n\n  const doAccept = useCallback(() => {\n    setLoading(true);\n    const run = async () => {\n      await acceptInvitation(inviteCode, username, password);\n      setLoading(false);\n    };\n    run().catch(err => {\n      setLoading(false);\n      setError(err);\n    });\n  }, [inviteCode, username, password]);\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  return (\n    <Page>\n      <Wrapper>\n        <Content>\n          <Image source={image} />\n          <Row description=\"You are almost there! Just pick your username and password and off we go!\" />\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"user\" />\n              </Cell>\n            }\n          >\n            <Input\n              autoCorrect={false}\n              label=\"Username\"\n              value={username}\n              onChangeText={setUsername}\n            />\n          </Row>\n          <Row\n            left={\n              <Cell>\n                <Icon name=\"key\" />\n              </Cell>\n            }\n          >\n            <Input\n              secure\n              label=\"Password\"\n              value={password}\n              onChangeText={setPassword}\n            />\n          </Row>\n          <Row>\n            <Button onPress={doAccept} title=\"Let's GO\" />\n          </Row>\n        </Content>\n      </Wrapper>\n    </Page>\n  );\n};\n\nexport { AcceptInvitationScreen };\n","import React, { useContext, useMemo } from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useTheme } from 'styled-components/native';\nimport { ProfileParamList, RootStackParamList, TabParamList } from './types';\nimport { linkingConfig } from './linking';\nimport { Icon, PushRegistation } from '#/components';\n\nimport { AddPostScreen } from '#/screens/posts/add';\nimport { FeedScreen } from '#/screens/posts/feed';\nimport { ProfileScreen } from '#/screens/profile';\nimport { FeedEditScreen } from '#/screens/feeds/edit';\nimport { ServerContext } from '#/context/server';\nimport { LoginScreen } from '#/screens/login/login';\nimport { useProfile } from '#/hooks/profile';\nimport { AcceptInvitationScreen } from '#/screens/login/accept-invitation';\n\nconst RootStack = createNativeStackNavigator<RootStackParamList>();\nconst TabStack = createBottomTabNavigator<TabParamList>();\nconst ProfileStack = createNativeStackNavigator<ProfileParamList>();\n\nconst Profile = () => {\n  return (\n    <ProfileStack.Navigator screenOptions={{ headerShown: false }}>\n      <ProfileStack.Screen name=\"ProfileMain\" component={ProfileScreen} />\n    </ProfileStack.Navigator>\n  );\n};\n\nconst Tabs = () => {\n  const theme = useTheme();\n  const { profile } = useProfile();\n  const canCreate = useMemo(\n    () =>\n      profile?.feeds?.find(\n        f =>\n          f.accessType === 'admin' ||\n          f.accessType === 'moderator' ||\n          f.accessType === 'writer'\n      ),\n    [profile]\n  );\n  return (\n    <>\n      <PushRegistation />\n      <TabStack.Navigator\n        screenOptions={{\n          headerShown: false,\n          tabBarActiveTintColor: theme.colors.primary,\n        }}\n      >\n        <TabStack.Screen\n          name=\"Feed\"\n          component={FeedScreen}\n          options={{\n            title: 'Posts',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"home\"\n                size={28}\n              />\n            ),\n          }}\n        />\n        {canCreate && (\n          <TabStack.Screen\n            name=\"Add\"\n            component={AddPostScreen}\n            options={{\n              title: 'Add',\n              tabBarIcon: ({ focused }) => (\n                <Icon\n                  color={focused ? 'primary' : 'text'}\n                  name=\"plus-square\"\n                  size={28}\n                />\n              ),\n            }}\n          />\n        )}\n        <TabStack.Screen\n          name=\"Profile\"\n          component={Profile}\n          options={{\n            title: 'Profile',\n            tabBarIcon: ({ focused }) => (\n              <Icon\n                color={focused ? 'primary' : 'text'}\n                name=\"user\"\n                size={28}\n              />\n            ),\n          }}\n        />\n      </TabStack.Navigator>\n    </>\n  );\n};\n\nconst Root = () => {\n  const theme = useTheme();\n  const { domain } = useContext(ServerContext);\n  return (\n    <RootStack.Navigator screenOptions={{ headerShown: false }}>\n      {domain ? (\n        <>\n          <RootStack.Group>\n            <RootStack.Screen name=\"Main\" component={Tabs} />\n          </RootStack.Group>\n          <RootStack.Group\n            screenOptions={{\n              contentStyle: {\n                backgroundColor: theme.colors.shade,\n              },\n              presentation: 'modal',\n            }}\n          >\n            <RootStack.Screen name=\"FeedEdit\" component={FeedEditScreen} />\n          </RootStack.Group>\n        </>\n      ) : (\n        <RootStack.Group>\n          <RootStack.Screen name=\"Login\" component={LoginScreen} />\n          <RootStack.Screen\n            initialParams={{ inviteCode: '' }}\n            name=\"AcceptInvitation\"\n            component={AcceptInvitationScreen}\n          />\n        </RootStack.Group>\n      )}\n    </RootStack.Navigator>\n  );\n};\n\ninterface RouterProps {\n  colorScheme: string;\n}\n\nconst Router: React.FC<RouterProps> = ({ colorScheme }) => {\n  const theme = useTheme();\n  const baseTheme = useMemo(\n    () => (colorScheme === 'dark' ? DarkTheme : DefaultTheme),\n    [colorScheme]\n  );\n  const navigationTheme = useMemo(\n    () => ({\n      ...baseTheme,\n      colors: {\n        ...baseTheme.colors,\n        background: theme.colors.shade,\n        card: theme.colors.background,\n        text: theme.colors.text,\n      },\n    }),\n    [baseTheme, theme]\n  );\n  return (\n    <>\n      <NavigationContainer theme={navigationTheme}>\n        <Root />\n      </NavigationContainer>\n    </>\n  );\n};\n\nexport { Router };\n","import { Image } from 'react-native';\n\nImage.getSizeWithHeaders = (uri, headers, success, failed) => {\n  success(100, 100);\n};\nconsole.log('foo', Image);\n\nimport App from './src/App';\n\nexport default App;\n","import { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { useColorScheme } from './hooks/colors';\nimport { ThemeProvider } from 'styled-components/native';\nimport { StatusBar } from 'expo-status-bar';\nimport { GraphQLProvider } from './context/graphql';\nimport { ServerProvider } from './context/server';\nimport { light, dark } from '#/theme';\nimport { Router } from '#/router';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n  return (\n    <ThemeProvider theme={colorScheme === 'dark' ? dark : light}>\n      <SafeAreaProvider>\n        <ServerProvider>\n          <StatusBar style={colorScheme === 'dark' ? 'light' : 'dark'} />\n          <GraphQLProvider>\n            <Router colorScheme={colorScheme} />\n          </GraphQLProvider>\n        </ServerProvider>\n      </SafeAreaProvider>\n    </ThemeProvider>\n  );\n}\n","import {\n  ColorSchemeName,\n  useColorScheme as _useColorScheme,\n} from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n"],"sourceRoot":""}